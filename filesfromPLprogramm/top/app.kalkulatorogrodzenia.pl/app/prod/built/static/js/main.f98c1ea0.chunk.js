(this["webpackJsonpjoniec-kalkulator"] = this["webpackJsonpjoniec-kalkulator"] || []).push([[0], {
    123: function(e, t, a) {},
    124: function(e, t, a) {},
    128: function(e, t, a) {},
    129: function(e, t, a) {
        "use strict";
        a.r(t);
        a(73);
        var i = a(1)
          , n = a.n(i)
          , o = a(36)
          , s = a.n(o)
          , l = a(2)
          , r = a(3)
          , c = a(6)
          , p = a(7)
          , d = a(5)
          , h = a(8)
          , u = a(28)
          , m = a(20);
        window.basepath = "";
        var g, f = "localhost" === window.location.hostname || /^192.168(?:(?:^|\.)(?:2(?:5[0-5]|[0-4]\d)|1?\d?\d)){2}$/.test(window.location.hostname) ? "dev" : "prod", b = {
            env: f,
            api: {
                url: "dev" === f ? "https://joniec-kalkulator.lo/api/" : "/api/",
                withCredentials: "dev" === f
            },
            auth: {
                default: !0,
                redirect: "/login/"
            }
        }, w = Object(u.createStore)((function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return e
        }
        )), v = a(64), y = Object(u.createStore)((function(e) {
            return e
        }
        ), Object(v.composeWithDevTools)()), k = a(4), x = a(131), j = a(48), z = a.n(j), M = function() {
            function e(t, a, i) {
                var n, o;
                Object(l.a)(this, e);
                var s = {
                    external: !1,
                    params: {},
                    data: {},
                    success: function() {},
                    cancelled: function() {},
                    error: function(e) {
                        console.log(e)
                    },
                    cancel: !1
                }
                  , r = Object(k.a)(Object(k.a)({}, s), i)
                  , c = r.external ? a : "".concat(null === (n = w.config.api) || void 0 === n ? void 0 : n.url).concat(a)
                  , p = r.params ? z.a.stringify(r.params) : "";
                p && (c += -1 === c.indexOf("?") ? "?".concat(p) : "&".concat(p)),
                Object(x.a)({
                    method: t,
                    url: c,
                    data: "post" === t && r.data ? z.a.stringify(r.data) : {},
                    headers: "post" === t ? {
                        "Content-Type": "application/x-www-form-urlencoded"
                    } : {},
                    cancelToken: r.cancel ? new x.a.CancelToken(r.cancel) : void 0,
                    withCredentials: !r.external && (null === (o = w.config.api) || void 0 === o ? void 0 : o.withCredentials)
                }).then((function(e) {
                    switch (e.status) {
                    case 200:
                        e.data._auth_denied_ && (w.user = null,
                        window.location.replace("/")),
                        r.success(e.data);
                        break;
                    case 401:
                        w.user = null,
                        window.location.replace("/")
                    }
                }
                )).catch((function(e) {
                    x.a.isCancel(e) ? r.cancelled(e) : r.error(e)
                }
                ))
            }
            return Object(r.a)(e, null, [{
                key: "get",
                value: function(t, a) {
                    return new e("get",t,a)
                }
            }, {
                key: "post",
                value: function(t, a) {
                    return new e("post",t,a)
                }
            }])
        }(), O = a(13), E = a(70), _ = a(71), S = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        g = S,
        S.count = function(e) {
            return g.keys(e).length
        }
        ,
        S.in = function(e, t) {
            if (void 0 !== t.includes)
                return t.includes(e);
            var a = !1;
            return g.values(t).forEach((function(t) {
                t === e && (a = !0)
            }
            )),
            a
        }
        ,
        S.find = function(e, t) {
            for (var a = 0; a < e.length; a++)
                if (t(e[a]))
                    return e[a];
            return !1
        }
        ,
        S.merge = function(e, t) {
            var a = Object(k.a)({}, e);
            return g.isObject(e) && g.isObject(t) && Object.keys(t).forEach((function(i) {
                g.isObject(t[i]) && i in e ? a[i] = g.merge(e[i], t[i]) : a = Object(k.a)(Object(k.a)({}, a), Object(O.a)({}, i, t[i]))
            }
            )),
            a
        }
        ,
        S.isArray = function(e) {
            return !!e && e.constructor === Array
        }
        ,
        S.isObject = function(e) {
            return !!e && e.constructor === Object
        }
        ,
        S.first = function(e) {
            return Object.keys(e)[0]
        }
        ,
        S.last = function(e) {
            return Object.keys(e)[Object.keys(e).length - 1]
        }
        ,
        S.keys = function(e) {
            return Object.keys(e).map((function(e) {
                return e
            }
            ))
        }
        ,
        S.keysReverse = function(e) {
            return Object.keys(e).reverse().map((function(e) {
                return e
            }
            ))
        }
        ,
        S.values = function(e) {
            return Object.keys(e).map((function(t) {
                return e[t]
            }
            ))
        }
        ,
        S.valuesReverse = function(e) {
            return Object.keys(e).reverse().map((function(t) {
                return e[t]
            }
            ))
        }
        ,
        S.entries = function(e) {
            return Object.keys(e).map((function(t) {
                return [t, e[t]]
            }
            ))
        }
        ,
        S.entriesReverse = function(e) {
            return Object.keys(e).reverse().map((function(t) {
                return [t, e[t]]
            }
            ))
        }
        ,
        S.add = function(e, t) {
            return Object(k.a)(Object(k.a)({}, e), t)
        }
        ,
        S.edit = function(e, t, a) {
            return e[t] && (e[t] = Object(k.a)(Object(k.a)({}, e[t]), a)),
            e
        }
        ,
        S.remove = function(e, t) {
            e[t];
            return Object(E.a)(e, [t].map(_.a))
        }
        ,
        S.clear = function() {
            return {}
        }
        ;
        var P = S
          , C = "ASSETS/NOTICES/"
          , D = {
            SET: "".concat(C, "SET"),
            ADD: "".concat(C, "ADD"),
            REMOVE: "".concat(C, "REMOVE"),
            CLEAR: "".concat(C, "CLEAR")
        }
          , R = {
            entities: {}
        }
          , F = {
            reducers: {
                notices: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : R
                      , t = arguments.length > 1 ? arguments[1] : void 0;
                    switch (t.type) {
                    case D.SET:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            entities: {
                                0: t.notice
                            }
                        });
                    case D.ADD:
                        var a = P.count(e.entities) ? parseInt(P.last(e.entities), 10) + 1 : 0;
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            entities: P.add(e.entities, Object(O.a)({}, a, t.notice))
                        });
                    case D.REMOVE:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            entities: P.remove(e.entities, t.id)
                        });
                    case D.CLEAR:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            entities: {}
                        });
                    default:
                        return e
                    }
                }
            }
        }
          , V = {
            SHOW: "".concat("ASSETS/DIALOG/", "SHOW"),
            HIDE: "".concat("ASSETS/DIALOG/", "HIDE")
        }
          , I = {
            status: !1,
            kind: null,
            content: null,
            accept: null,
            decline: null
        }
          , L = {
            reducers: {
                dialog: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I
                      , t = arguments.length > 1 ? arguments[1] : void 0;
                    switch (t.type) {
                    case V.SHOW:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            status: !0,
                            kind: t.kind,
                            content: t.content,
                            accept: t.accept,
                            decline: t.decline
                        });
                    case V.HIDE:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            status: !1,
                            kind: null,
                            content: null,
                            accept: null,
                            decline: null
                        });
                    default:
                        return e
                    }
                }
            }
        }
          , H = {
            SHOW: "".concat("ASSETS/POPUP/", "SHOW"),
            HIDE: "".concat("ASSETS/POPUP/", "HIDE")
        }
          , T = {
            status: !1,
            content: null,
            toolbar: null
        }
          , B = {
            reducers: {
                popup: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : T
                      , t = arguments.length > 1 ? arguments[1] : void 0;
                    switch (t.type) {
                    case H.SHOW:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            status: !0,
                            content: t.content,
                            toolbar: t.toolbar
                        });
                    case H.HIDE:
                        return Object(k.a)(Object(k.a)({}, e), {}, {
                            status: !1,
                            content: null,
                            toolbar: null
                        });
                    default:
                        return e
                    }
                }
            }
        }
          , W = function(e) {
            return w.translations && w.translations[e] ? w.translations[e] : e
        }
          , N = a(10)
          , A = a(16)
          , G = a.n(A)
          , U = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default"
              , a = null
              , i = null;
            return P.isArray(e) ? (a = e[0],
            i = e[1]) : i = e,
            {
                type: t,
                title: a,
                content: i
            }
        }
          , K = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default";
            return y.dispatch({
                type: D.SET,
                notice: U(e, t)
            })
        }
          , q = function(e) {
            return y.dispatch({
                type: D.REMOVE,
                id: e
            })
        };
        function Y(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Z = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = Y(this, t, [].concat(i))).close = function(e) {
                    window.noticesCurrent && (window.noticesCurrent.classList.remove("notice-active"),
                    setTimeout((function() {
                        q(e)
                    }
                    ), 1e3))
                }
                ,
                e.componentDidUpdate = function() {
                    window.noticesCurrent && setTimeout((function() {
                        window.noticesCurrent.classList.add("notice-active")
                    }
                    ), 10)
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement("div", {
                        id: "notices"
                    }, P.entries(this.props.entities).map((function(t, a) {
                        var i = Object(N.a)(t, 2)
                          , o = i[0]
                          , s = i[1];
                        return n.a.createElement("div", {
                            className: G()("notice", s.type ? "notice-".concat(s.type) : null),
                            ref: function(e) {
                                0 === a && (window.noticesCurrent = e)
                            },
                            key: o
                        }, n.a.createElement("button", {
                            onClick: function() {
                                return e.close(o)
                            },
                            className: "close",
                            "aria-label": W("Zamknij")
                        }), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "icon"
                        }), n.a.createElement("div", {
                            className: "content"
                        }, s.title && n.a.createElement("div", {
                            className: "title"
                        }, s.title), s.content && n.a.createElement("p", null, s.content))))
                    }
                    )))
                }
            }])
        }(n.a.Component);
        Z.defaultProps = {
            entities: null
        };
        var X = Object(m.b)((function(e) {
            return {
                entities: e.notices.entities
            }
        }
        ), null)(Z)
          , J = a(12);
        function Q(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var $ = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Q(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("section", {
                        id: "header"
                    }, n.a.createElement("div", {
                        className: "wrapper"
                    }, n.a.createElement("div", {
                        className: "grid"
                    }, n.a.createElement("div", {
                        className: "logo"
                    }, n.a.createElement(J.b, {
                        to: "/"
                    }, n.a.createElement("img", {
                        src: "/assets/img/logo-red.png",
                        className: "img-responsive",
                        alt: ""
                    }))), "login" !== this.props.type && n.a.createElement("div", null, w.user ? n.a.createElement("div", {
                        className: "user-menu"
                    }, n.a.createElement(J.b, {
                        to: "/logout/"
                    }, W("Wyloguj si\u0119")), n.a.createElement("div", {
                        className: "more"
                    }, n.a.createElement("div", {
                        className: "arrow"
                    }), n.a.createElement("ul", null, n.a.createElement("li", null, n.a.createElement(J.b, {
                        to: "/account/change-password/"
                    }, W("Zmie\u0144 has\u0142o")))))) : n.a.createElement("div", {
                        className: "user-menu"
                    }, n.a.createElement(J.b, {
                        to: "/login/"
                    }, W("Zaloguj si\u0119")), n.a.createElement("div", {
                        className: "more"
                    }, n.a.createElement("div", {
                        className: "arrow"
                    }), n.a.createElement("ul", null, n.a.createElement("li", null, n.a.createElement(J.b, {
                        to: "/register/"
                    }, W("Za\u0142\xf3\u017c konto"))))))))))
                }
            }])
        }(n.a.Component);
        function ee(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var te = function(e) {
            function t() {
                return Object(l.a)(this, t),
                ee(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("section", {
                        id: "footer"
                    }, n.a.createElement("div", {
                        className: "wrapper"
                    }))
                }
            }])
        }(n.a.Component);
        a(123);
        function ae(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var ie = function(e) {
            function t() {
                return Object(l.a)(this, t),
                ae(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("div", {
                        id: "templates-main-template"
                    }, n.a.createElement("div", {
                        id: "container"
                    }, n.a.createElement($, {
                        type: this.props.type
                    }), n.a.createElement("section", null, n.a.createElement("div", {
                        className: "wrapper"
                    }, this.props.children)), n.a.createElement(te, null), n.a.createElement(X, null)))
                }
            }])
        }(n.a.Component);
        ie.defaultProps = {
            type: void 0
        };
        var ne = ie;
        function oe(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var se = function(e) {
            function t() {
                return Object(l.a)(this, t),
                oe(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("div", {
                        className: "box-loading"
                    }, n.a.createElement("div", null))
                }
            }])
        }(n.a.Component)
          , le = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        le.nl2br = function(e) {
            return e.split(/(?:\r\n|\r|\n)/g).map((function(e, t) {
                return n.a.createElement(n.a.Fragment, {
                    key: t
                }, t > 0 && n.a.createElement("br", null), e)
            }
            ))
        }
        ;
        var re = le;
        function ce(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var pe = function(e) {
            function t() {
                return Object(l.a)(this, t),
                ce(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this.props.project;
                    return n.a.createElement("tr", null, n.a.createElement("td", {
                        className: "date"
                    }, n.a.createElement("span", {
                        "data-tooltip": e.date_edit.string
                    }, e.date_edit.digital), n.a.createElement("div", {
                        className: "small"
                    }, n.a.createElement("span", {
                        "data-tooltip": e.date_add.string
                    }, e.date_add.digital))), n.a.createElement("td", {
                        className: "project"
                    }, n.a.createElement("div", {
                        className: "title"
                    }, e.title ? e.title : W("Brak nazwy projektu")), e.description && n.a.createElement("div", {
                        className: "description"
                    }, re.nl2br(e.description))), n.a.createElement("td", {
                        className: "system",
                        dangerouslySetInnerHTML: {
                            __html: e.system
                        }
                    }), n.a.createElement("td", {
                        className: "options"
                    }, !e.locked && n.a.createElement(n.a.Fragment, null, n.a.createElement(J.b, {
                        to: ["/project", e.id].join("/")
                    }, W("Edycja")), n.a.createElement("br", null)), n.a.createElement(J.b, {
                        to: ["/preview", e.id, e.token].join("/")
                    }, W("Podgl\u0105d")), n.a.createElement("br", null), n.a.createElement(J.b, {
                        to: ["/duplicate", e.id].join("/")
                    }, W("Duplikuj")), n.a.createElement("br", null), P.in(w.user.type, ["admin", "employee"]) && n.a.createElement(n.a.Fragment, null, n.a.createElement(J.b, {
                        to: ["/follow", e.id].join("/")
                    }, W("Przeka\u017c")), n.a.createElement("br", null)), n.a.createElement(J.b, {
                        to: ["/delete", e.id].join("/")
                    }, W("Usu\u0144")), n.a.createElement("br", null)))
                }
            }])
        }(n.a.Component);
        pe.defaultProps = {
            project: null
        };
        var de = pe;
        function he(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var ue = function(e) {
            function t() {
                return Object(l.a)(this, t),
                he(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(n.a.Fragment, null, P.count(this.props.projects) ? n.a.createElement("table", {
                        className: "projects"
                    }, n.a.createElement("thead", null, n.a.createElement("tr", null, n.a.createElement("th", {
                        className: "date"
                    }, W("Data")), n.a.createElement("th", {
                        className: "project"
                    }, W("Projekt")), n.a.createElement("th", {
                        className: "system"
                    }, W("System")), n.a.createElement("th", {
                        className: "options"
                    }, "\xa0"))), n.a.createElement("tbody", null, P.values(this.props.projects).map((function(e) {
                        return n.a.createElement(de, {
                            project: e,
                            key: e.id
                        })
                    }
                    )))) : n.a.createElement(n.a.Fragment, null))
                }
            }])
        }(n.a.Component);
        ue.defaultProps = {
            projects: null
        };
        var me = ue;
        var ge = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    M.post("projects/index/", {
                        data: {
                            type: "my",
                            page: 1
                        },
                        success: function(e) {
                            e.projects && a.setState({
                                view: "default",
                                projects: e.projects
                            })
                        }
                    })
                }
                ,
                a.state = {
                    view: "loading"
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Lista projekt\xf3w")), n.a.createElement("a", {
                            href: "/project/"
                        }, W("Utw\xf3rz nowy projekt")), n.a.createElement(me, {
                            projects: this.state.projects
                        }));
                    case "loading":
                        return n.a.createElement(ne, null, n.a.createElement(se, null))
                    }
                }
            }])
        }(n.a.Component)
          , fe = a(15);
        var be = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    a.id && M.post("duplicate/".concat(a.id, "/"), {
                        success: function(e) {
                            e.status ? K("".concat(W("Skopiowano projekt"), "."), "success") : K("".concat(W("Nie uda\u0142o si\u0119 skopiowa\u0107 projektu"), "."), "error"),
                            a.setState({
                                view: "default"
                            })
                        }
                    })
                }
                ,
                a.id = a.props.match.params.id ? parseInt(a.props.match.params.id, 10) : 0,
                a.state = {
                    view: "loading"
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    case "loading":
                        return n.a.createElement(ne, null, n.a.createElement(se, null));
                    default:
                        return n.a.createElement(fe.a, {
                            to: "/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        be.defaultProps = {
            match: null
        };
        var we = be
          , ve = Object(r.a)((function e(t, a, i) {
            var n = this;
            Object(l.a)(this, e),
            this.init = function() {
                P.entries(n.fields).forEach((function(e) {
                    var t = Object(N.a)(e, 2)
                      , a = t[0]
                      , i = t[1];
                    n.fields[a].value = i.value ? i.value : "",
                    n.fields[a].errors = []
                }
                )),
                n.fields._token && M.post(n.action, {
                    success: function(e) {
                        n.fields._token.value = e.form._token.value,
                        n.setLoading(!1)
                    },
                    cancel: function(e) {
                        n.cancel = e
                    }
                })
            }
            ,
            this.cancel = function() {}
            ,
            this.onChange = function(e) {
                if (!n.instance.state.loading) {
                    var t = e.target.name
                      , a = "checkbox" === e.target.type ? e.target.checked : e.target.value;
                    n.fields[t].value = a,
                    n.validateField(t, a),
                    n.instance.forceUpdate()
                }
            }
            ,
            this.onSubmit = function(e) {
                if (e.preventDefault(),
                !n.instance.state.loading && n.isValid()) {
                    var t = [];
                    P.entries(n.fields).forEach((function(e) {
                        var a = Object(N.a)(e, 2)
                          , i = a[0]
                          , o = a[1]
                          , s = n.prefix ? "".concat(n.prefix, "[").concat(i, "]") : i;
                        o.value && (t[s] = o.value)
                    }
                    )),
                    n.setLoading(!0),
                    M.post(n.action, {
                        data: t,
                        success: function(e) {
                            n.setLoading(!1),
                            n.instance.onSubmit(e)
                        },
                        cancel: function(e) {
                            n.cancel = e
                        }
                    })
                }
            }
            ,
            this.isValid = function() {
                var e = !0;
                return P.entries(n.fields).forEach((function(t) {
                    var a = Object(N.a)(t, 2)
                      , i = a[0]
                      , o = a[1];
                    n.validateField(i, o.value) || (e = !1)
                }
                )),
                n.instance.forceUpdate(),
                e
            }
            ,
            this.validateField = function(e, t) {
                var a = !0;
                return n.fields[e].validators && n.fields[e].validators.length && (n.fields[e].errors = [],
                P.values(n.fields[e].validators).forEach((function(i) {
                    i.isValid(t) || (a = !1,
                    n.fields[e].errors.push(i.getMessage()))
                }
                ))),
                a
            }
            ,
            this.setResponseErrors = function(e) {
                P.keys(n.fields).forEach((function(t) {
                    n.fields[t].errors = [],
                    P.values(e.form[t].errors).forEach((function(e) {
                        n.fields[t].errors.push(e)
                    }
                    ))
                }
                )),
                n.instance.forceUpdate()
            }
            ,
            this.setLoading = function(e) {
                e ? document.documentElement.classList.add("waiting") : document.documentElement.classList.remove("waiting"),
                n.instance.setState({
                    loading: e
                })
            }
            ,
            this.instance = t,
            this.action = a,
            this.prefix = i,
            this.fields = this.instance.state.fields,
            this.init()
        }
        ))
          , ye = Object(r.a)((function e(t, a) {
            var i = this
              , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
            Object(l.a)(this, e),
            this.getMessage = function() {
                return i.message
            }
            ,
            this.isValid = function(e) {
                switch (i.type) {
                case "checked":
                    return i.isValidChecked(e);
                case "email":
                    return i.constraint = /^[0-9a-zA-Z_.-]+@[0-9a-zA-Z.-]+\.[a-zA-Z]{2,3}$/,
                    i.isValidRegex(e);
                case "min_max":
                    return i.isValidMinMax(e);
                case "not_blank":
                    return i.isValidNotBlank(e);
                case "regex":
                    return i.isValidRegex(e);
                default:
                    return !0
                }
            }
            ,
            this.isValidChecked = function(e) {
                return !!e
            }
            ,
            this.isValidMinMax = function(e) {
                return e.length >= i.constraint[0] && e.length <= i.constraint[1]
            }
            ,
            this.isValidNotBlank = function(e) {
                return !!e
            }
            ,
            this.isValidRegex = function(e) {
                return !!i.constraint.test(e)
            }
            ,
            this.message = t,
            this.type = a,
            this.constraint = n
        }
        ));
        var ke = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onSubmit = function(e) {
                    switch (e.status) {
                    case 1:
                        K(e.info, "success"),
                        a.setState({
                            view: "success"
                        });
                        break;
                    case -1:
                        K(e.info, "error")
                    }
                }
                ,
                a.id = a.props.match.params.id ? parseInt(a.props.match.params.id, 10) : 0,
                a.state = {
                    view: P.in(w.user.type, ["admin", "employee"]) ? "default" : "success",
                    fields: {
                        user: {
                            validators: [new ye(W("Podaj poprawny adres e-mail"),"email")]
                        }
                    }
                },
                a.form = new ve(a,"follow/".concat(a.id, "/")),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Przeka\u017c projekt")), n.a.createElement("div", {
                            className: "form"
                        }, n.a.createElement("form", {
                            onSubmit: this.form.onSubmit
                        }, n.a.createElement("p", null, "".concat(W("Podaj adres e-mail u\u017cytkownika, kt\xf3remu przekazujesz projekt"), ":")), n.a.createElement("br", null), n.a.createElement("fieldset", {
                            className: "fields"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "user",
                            value: this.state.fields.user.value,
                            placeholder: "",
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.user.errors.length ? n.a.createElement("ul", null, this.state.fields.user.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))))), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement("button", {
                            type: "submit",
                            className: "button"
                        }, W("Przeka\u017c"))))));
                    case "success":
                        return n.a.createElement(fe.a, {
                            to: "/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        ke.defaultProps = {
            match: null
        };
        var xe = ke;
        var je = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    a.id && M.post("delete/".concat(a.id, "/"), {
                        success: function(e) {
                            e.status ? K("".concat(W("Usuni\u0119to projekt"), "."), "success") : K("".concat(W("Nie uda\u0142o si\u0119 usun\u0105\u0107 projektu"), "."), "error"),
                            a.setState({
                                view: "default"
                            })
                        }
                    })
                }
                ,
                a.id = a.props.match.params.id ? parseInt(a.props.match.params.id, 10) : 0,
                a.state = {
                    view: "loading"
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    case "loading":
                        return n.a.createElement(ne, null, n.a.createElement(se, null));
                    default:
                        return n.a.createElement(fe.a, {
                            to: "/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        je.defaultProps = {
            match: null
        };
        var ze = {
            views: [{
                route: {
                    path: "",
                    component: ge
                }
            }, {
                route: {
                    path: "duplicate/:id",
                    component: we
                }
            }, {
                route: {
                    path: "follow/:id",
                    component: xe
                }
            }, {
                route: {
                    path: "delete/:id",
                    component: je
                }
            }]
        };
        var Me = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onSubmit = function(e) {
                    switch (e.status) {
                    case 0:
                        a.form.setResponseErrors(e);
                        break;
                    case 1:
                        K("".concat(W("Na podany adres e-mail zosta\u0142 wys\u0142any kod aktywacyjny"), ".")),
                        a.setState({
                            view: "success"
                        })
                    }
                }
                ,
                a.state = {
                    view: "default",
                    fields: {
                        _token: {},
                        name: {},
                        email: {},
                        password: {},
                        password_repeat: {},
                        phone: {},
                        zip_code: {},
                        city: {},
                        agreement_privacy: {},
                        agreement_regulation: {}
                    }
                },
                a.form = new ve(a,"users/register/","form"),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement("div", {
                            className: "form"
                        }, n.a.createElement("form", {
                            onSubmit: this.form.onSubmit
                        }, n.a.createElement("input", {
                            type: "hidden",
                            name: "_token",
                            value: this.state.fields._token.value
                        }), n.a.createElement("fieldset", {
                            className: "fields"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "name",
                            value: this.state.fields.name.value,
                            placeholder: W("Imi\u0119 i nazwisko"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.name.errors.length ? n.a.createElement("ul", null, this.state.fields.name.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "email",
                            value: this.state.fields.email.value,
                            placeholder: W("Adres e-mail"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.email.errors.length ? n.a.createElement("ul", null, this.state.fields.email.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "password",
                            value: this.state.fields.password.value,
                            placeholder: W("Has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.password.errors.length ? n.a.createElement("ul", null, this.state.fields.password.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "password_repeat",
                            value: this.state.fields.password_repeat.value,
                            placeholder: W("Powt\xf3rz has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.password_repeat.errors.length ? n.a.createElement("ul", null, this.state.fields.password_repeat.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "phone",
                            value: this.state.fields.phone.value,
                            placeholder: W("Numer telefonu"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.phone.errors.length ? n.a.createElement("ul", null, this.state.fields.phone.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "zip_code",
                            value: this.state.fields.zip_code.value,
                            placeholder: W("Kod pocztowy"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.zip_code.errors.length ? n.a.createElement("ul", null, this.state.fields.zip_code.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "city",
                            value: this.state.fields.city.value,
                            placeholder: W("Miejscowo\u015b\u0107"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.city.errors.length ? n.a.createElement("ul", null, this.state.fields.city.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))))), n.a.createElement("fieldset", {
                            className: "agreements"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("label", null, n.a.createElement("input", {
                            type: "checkbox",
                            name: "agreement_privacy",
                            onChange: this.form.onChange
                        }), n.a.createElement("i", {
                            className: "checkbox"
                        }), n.a.createElement("div", null, W("Zapozna\u0142em/am si\u0119 z"), " ", n.a.createElement("a", {
                            href: "https://www.joniec.pl/firma/polityka.html",
                            target: "blank"
                        }, W("Polityk\u0105 Prywatno\u015bci")), " ", W("Firmy JONIEC\xae"), "."))), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.agreement_privacy.errors.length ? n.a.createElement("ul", null, this.state.fields.agreement_privacy.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("label", null, n.a.createElement("input", {
                            type: "checkbox",
                            name: "agreement_regulation",
                            onChange: this.form.onChange
                        }), n.a.createElement("i", {
                            className: "checkbox"
                        }), n.a.createElement("div", null, W("Administratorem Pa\u0144stwa danych osobowych zawartych w niniejszym formularzu jest firma F.P.U.H. JONIEC Mieczys\u0142aw Joniec z siedzib\u0105: 34-650 Tymbark 109. Dane wpisane w formularzu b\u0119d\u0105 przetwarzane w celu utworzenia konta logowania do programu kalkulatorogrodzenia.pl i przes\u0142ania na wskazany w formularzu adres danych dost\u0119powych do konta zgodnie z"), " ", n.a.createElement("a", {
                            href: "https://www.kalkulatorogrodzenia.pl/regulamin",
                            target: "blank"
                        }, W("REGULAMINEM")), "."))), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.agreement_regulation.errors.length ? n.a.createElement("ul", null, this.state.fields.agreement_regulation.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))))), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement("button", {
                            type: "submit",
                            className: "button"
                        }, W("Za\u0142\xf3\u017c konto")))));
                    case "success":
                        return n.a.createElement(fe.a, {
                            to: "/login/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        function Oe(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ee = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Oe(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Rejestracja")), n.a.createElement(Me, null))
                }
            }])
        }(n.a.Component);
        var _e = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    M.post("users/activate/", {
                        data: {
                            code: a.code
                        },
                        success: function(e) {
                            e.status && K("".concat(W("Konto zosta\u0142o aktywowane"), ". ").concat(W("Mo\u017cesz si\u0119 teraz zalogowa\u0107"), ".")),
                            a.setState({
                                view: "default"
                            })
                        }
                    })
                }
                ,
                a.code = a.props.match.params.code,
                a.state = {
                    view: "loading"
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement(fe.a, {
                            to: "/login/"
                        });
                    case "loading":
                        return n.a.createElement(ne, null, n.a.createElement(se, null))
                    }
                }
            }])
        }(n.a.Component);
        _e.defaultProps = {
            match: null
        };
        var Se = _e;
        var Pe = function(e) {
            function t(e) {
                var a, i, o, s;
                return Object(l.a)(this, t),
                i = this,
                o = t,
                s = [e],
                o = Object(d.a)(o),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(i).constructor) : o.apply(i, s))).error = function(e) {
                    switch (e) {
                    case "Twoje konto wygas\u0142o. Aby je przed\u0142u\u017cy\u0107, kliknij tutaj.":
                        return n.a.createElement(n.a.Fragment, null, W("Twoje konto wygas\u0142o. Aby je przed\u0142u\u017cy\u0107"), ", ", n.a.createElement(J.b, {
                            to: "/extend/"
                        }, W("kliknij tutaj")), ".");
                    default:
                        return e
                    }
                }
                ,
                a.onSubmit = function(e) {
                    switch (e.status) {
                    case 0:
                        a.form.setResponseErrors(e);
                        break;
                    case 1:
                        a.setState({
                            view: "success"
                        })
                    }
                }
                ,
                a.state = {
                    view: "default",
                    fields: {
                        login: {
                            validators: [new ye(null,"not_blank")]
                        },
                        password: {
                            validators: [new ye(null,"not_blank")]
                        }
                    }
                },
                a.form = new ve(a,"users/login/","form"),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t = this;
                    switch (this.state.view) {
                    default:
                        return n.a.createElement("div", {
                            className: "form"
                        }, n.a.createElement("form", {
                            onSubmit: this.form.onSubmit
                        }, n.a.createElement("input", {
                            type: "hidden",
                            name: "_token",
                            value: null === (e = this.state.fields._token) || void 0 === e ? void 0 : e.value
                        }), n.a.createElement("fieldset", {
                            className: "fields"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "login",
                            value: this.state.fields.login.value,
                            placeholder: W("Adres e-mail"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.login.errors.length ? n.a.createElement("ul", null, this.state.fields.login.errors.map((function(e, a) {
                            return n.a.createElement("li", {
                                key: a
                            }, t.error(e))
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "password",
                            value: this.state.fields.password.value,
                            placeholder: W("Has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.password.errors.length ? n.a.createElement("ul", null, this.state.fields.password.errors.map((function(e, a) {
                            return n.a.createElement("li", {
                                key: a
                            }, t.error(e))
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("small", null, n.a.createElement(J.b, {
                            to: "/reset-password/",
                            className: "color-link"
                        }, W("Nie pami\u0119tam has\u0142a")))))), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement("button", {
                            type: "submit",
                            className: "button"
                        }, W("Zaloguj si\u0119"))), n.a.createElement("br", null), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement(J.b, {
                            to: "/register/",
                            className: "button",
                            style: {
                                fontSize: "1.2em"
                            }
                        }, W("Za\u0142\xf3\u017c konto")))));
                    case "success":
                        return localStorage.removeItem("search.user"),
                        localStorage.removeItem("search.search"),
                        localStorage.removeItem("search.date_from"),
                        localStorage.removeItem("search.date_to"),
                        window.location.replace("/")
                    }
                }
            }])
        }(n.a.Component);
        function Ce(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var De = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Ce(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(ne, {
                        type: "login"
                    }, n.a.createElement("h1", null, W("Logowanie")), n.a.createElement(Pe, null))
                }
            }])
        }(n.a.Component);
        var Re = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    M.post("users/logout/", {
                        success: function(e) {
                            e.status && (w.user = null,
                            K("".concat(W("Zosta\u0142e\u015b wylogowany"), "."))),
                            a.setState({
                                view: "default"
                            })
                        }
                    })
                }
                ,
                a.state = {
                    view: "loading"
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement(fe.a, {
                            to: "/login/"
                        });
                    case "loading":
                        return n.a.createElement(ne, null, n.a.createElement(se, null))
                    }
                }
            }])
        }(n.a.Component);
        var Fe = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onSubmit = function(e) {
                    switch (e.status) {
                    case 0:
                        a.form.setResponseErrors(e);
                        break;
                    case 1:
                        K("".concat(W("Na podany adres e-mail zosta\u0142 wys\u0142any link weryfikacyjny"), ".")),
                        a.setState({
                            view: "success"
                        })
                    }
                }
                ,
                a.state = {
                    view: "default",
                    fields: {
                        _token: {},
                        email: {}
                    }
                },
                a.form = new ve(a,"users/reset-password/","form"),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement("div", {
                            className: "form"
                        }, n.a.createElement("form", {
                            onSubmit: this.form.onSubmit
                        }, n.a.createElement("input", {
                            type: "hidden",
                            name: "_token",
                            value: this.state.fields._token.value
                        }), n.a.createElement("fieldset", {
                            className: "fields"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "email",
                            value: this.state.fields.email.value,
                            placeholder: W("Adres e-mail"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.email.errors.length ? n.a.createElement("ul", null, this.state.fields.email.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))))), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement("button", {
                            type: "submit",
                            className: "button"
                        }, W("Zresetuj has\u0142o")))));
                    case "success":
                        return n.a.createElement(fe.a, {
                            to: "/login/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        var Ve = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    switch (a.state.view) {
                    case "code":
                        M.post("users/reset-password/", {
                            data: {
                                code: a.code
                            },
                            success: function(e) {
                                e.status ? K(W("E-mail z danymi do logowania zosta\u0142 wys\u0142any.")) : K(W("Kod weryfikacyjny zosta\u0142 ju\u017c wykorzystany lub jest nieprawid\u0142owy."), "error"),
                                a.setState({
                                    view: void 0
                                })
                            }
                        })
                    }
                }
                ,
                a.code = a.props.match.params.code,
                a.state = {
                    view: a.code ? "code" : "form"
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    case "form":
                        return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Resetowanie has\u0142a")), n.a.createElement(Fe, null));
                    case "code":
                        return n.a.createElement(ne, null, n.a.createElement(se, null));
                    default:
                        return n.a.createElement(fe.a, {
                            to: "/login/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        Ve.defaultProps = {
            match: null
        };
        var Ie = Ve
          , Le = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        Le.aN = function(e) {
            return e || 0
        }
        ,
        Le.countWord = function(e, t, a, i) {
            return 1 === e ? t : 10 !== e % 100 - e % 10 && e % 10 >= 2 && e % 10 <= 4 ? a : i
        }
        ,
        Le.numberFormat = function(e, t) {
            for (var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ",", i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "", n = [], o = parseFloat(e).toFixed(t || 0).toString().split("."), s = o[0].length; s > 0; s -= 3)
                n.unshift(o[0].substring(Math.max(0, s - 3), s));
            return o[0] = n.join(i),
            o.join(a)
        }
        ;
        var He = Le;
        var Te = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onSubmit = function(e) {
                    switch (e.status) {
                    case 0:
                        a.form.setResponseErrors(e);
                        break;
                    case -1:
                        a.setState({
                            view: "info",
                            info: e.info
                        });
                        break;
                    case 1:
                        K("".concat(W("Konto zosta\u0142o przed\u0142u\u017cone na"), " ").concat(He.countWord(e.days, "".concat(W("kolejny"), " ").concat(e.days, " ").concat(W("dzie\u0144")), "".concat(W("kolejne"), " ").concat(e.days, " ").concat(W("dni")), "".concat(W("kolejne"), " ").concat(e.days, " ").concat(W("dni"))), ".")),
                        a.setState({
                            view: "success"
                        })
                    }
                }
                ,
                a.state = {
                    view: "default",
                    info: null,
                    fields: {
                        _token: {},
                        login: {},
                        password: {}
                    }
                },
                a.form = new ve(a,"users/extend/","form"),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement("div", {
                            className: "form"
                        }, n.a.createElement("form", {
                            onSubmit: this.form.onSubmit
                        }, n.a.createElement("input", {
                            type: "hidden",
                            name: "_token",
                            value: this.state.fields._token.value
                        }), n.a.createElement("fieldset", {
                            className: "fields"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "text",
                            name: "login",
                            value: this.state.fields.login.value,
                            placeholder: W("Adres e-mail"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.login.errors.length ? n.a.createElement("ul", null, this.state.fields.login.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "password",
                            value: this.state.fields.password.value,
                            placeholder: W("Has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.password.errors.length ? n.a.createElement("ul", null, this.state.fields.password.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))))), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement("button", {
                            type: "submit",
                            className: "button"
                        }, W("Przed\u0142u\u017c konto")))));
                    case "info":
                        return n.a.createElement("p", null, this.state.info);
                    case "success":
                        return n.a.createElement(fe.a, {
                            to: "/login/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        function Be(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var We = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Be(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Przed\u0142u\u017canie konta")), n.a.createElement(Te, null))
                }
            }])
        }(n.a.Component);
        var Ne = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onSubmit = function(e) {
                    switch (e.status) {
                    case 0:
                        a.form.setResponseErrors(e);
                        break;
                    case 1:
                        K("".concat(W("Has\u0142o zosta\u0142o pomy\u015blnie zmienione"), ".")),
                        a.setState({
                            view: "success"
                        })
                    }
                }
                ,
                a.state = {
                    view: "default",
                    fields: {
                        _token: {},
                        old_password: {},
                        password: {},
                        password_repeat: {}
                    }
                },
                a.form = new ve(a,"users/account/change-password/","form"),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement("div", {
                            className: "form"
                        }, n.a.createElement("form", {
                            onSubmit: this.form.onSubmit
                        }, n.a.createElement("input", {
                            type: "hidden",
                            name: "_token",
                            value: this.state.fields._token.value
                        }), n.a.createElement("fieldset", {
                            className: "fields"
                        }, n.a.createElement("div", {
                            className: "grid"
                        }, n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "old_password",
                            value: this.state.fields.old_password.value,
                            placeholder: W("Stare has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.old_password.errors.length ? n.a.createElement("ul", null, this.state.fields.old_password.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "password",
                            value: this.state.fields.password.value,
                            placeholder: W("Has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.password.errors.length ? n.a.createElement("ul", null, this.state.fields.password.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))), n.a.createElement("div", null, n.a.createElement("div", {
                            className: "item"
                        }, n.a.createElement("div", {
                            className: "input"
                        }, n.a.createElement("input", {
                            type: "password",
                            name: "password_repeat",
                            value: this.state.fields.password_repeat.value,
                            placeholder: W("Powt\xf3rz has\u0142o"),
                            autoComplete: "off",
                            onChange: this.form.onChange
                        })), n.a.createElement("div", {
                            className: "form-error"
                        }, this.state.fields.password_repeat.errors.length ? n.a.createElement("ul", null, this.state.fields.password_repeat.errors.map((function(e, t) {
                            return n.a.createElement("li", {
                                key: t
                            }, e)
                        }
                        ))) : null))))), n.a.createElement("fieldset", {
                            className: "submit"
                        }, n.a.createElement("button", {
                            type: "submit",
                            className: "button"
                        }, W("Zmie\u0144")))));
                    case "success":
                        return n.a.createElement(fe.a, {
                            to: "/"
                        })
                    }
                }
            }])
        }(n.a.Component);
        function Ae(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ge = {
            views: [{
                route: {
                    path: "register",
                    component: Ee,
                    auth: !1
                }
            }, {
                route: {
                    path: "activate/:code",
                    component: Se,
                    auth: !1
                }
            }, {
                route: {
                    path: "login",
                    component: De,
                    auth: !1
                }
            }, {
                route: {
                    path: "logout",
                    component: Re,
                    auth: !0
                }
            }, {
                route: {
                    path: "reset-password/:code?",
                    component: Ie,
                    auth: !1
                }
            }, {
                route: {
                    path: "extend",
                    component: We,
                    auth: !1
                }
            }, {
                route: {
                    path: "account"
                },
                childs: [{
                    route: {
                        path: "change-password",
                        component: function(e) {
                            function t() {
                                return Object(l.a)(this, t),
                                Ae(this, t, arguments)
                            }
                            return Object(h.a)(t, e),
                            Object(r.a)(t, [{
                                key: "render",
                                value: function() {
                                    return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Zmiana has\u0142a")), n.a.createElement(Ne, null))
                                }
                            }])
                        }(n.a.Component),
                        auth: !0
                    }
                }]
            }]
        }
          , Ue = {
            SET: "".concat("PROJECT/PANEL/", "SET"),
            RESET: "".concat("PROJECT/PANEL/", "RESET")
        }
          , Ke = {
            type: null,
            state: null,
            object: null
        }
          , qe = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ke
              , t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
            case Ue.SET:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    type: t.content.type,
                    state: t.content.state,
                    object: t.content.object
                });
            case Ue.RESET:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    type: null,
                    state: null,
                    object: null
                });
            default:
                return e
            }
        }
          , Ye = {
            ADD: "".concat("PROJECT/WORKSPACE/", "ADD"),
            EDIT: "".concat("PROJECT/WORKSPACE/", "EDIT"),
            RESET: "".concat("PROJECT/WORKSPACE/", "RESET"),
            SET_VIEW: "".concat("PROJECT/WORKSPACE/", "SET_VIEW"),
            SET_CONTENT: "".concat("PROJECT/WORKSPACE/", "SET_CONTENT")
        }
          , Ze = {
            update: null,
            view: null,
            content: null,
            objects: []
        }
          , Xe = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ze
              , t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
            case Ye.ADD:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    update: Date.now(),
                    objects: P.add(e.objects, t.object)
                });
            case Ye.EDIT:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    update: Date.now(),
                    objects: P.edit(e.objects, t.id, t.object)
                });
            case Ye.RESET:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    update: Date.now(),
                    objects: P.clear()
                });
            case Ye.SET_VIEW:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    view: t.view
                });
            case Ye.SET_CONTENT:
                return Object(k.a)(Object(k.a)({}, e), {}, {
                    content: t.content
                });
            default:
                return e
            }
        }
          , Je = function() {
            return {
                default: {
                    grafit: {
                        label: W("Grafit"),
                        color: "444444"
                    },
                    szary: {
                        label: W("Szary"),
                        color: "999999"
                    },
                    bialy: {
                        label: W("Bia\u0142y"),
                        color: "eeeeee"
                    }
                }
            }
        }
          , Qe = function() {
            return {
                colors: {
                    default: {
                        ral7016: {
                            label: "RAL 7016",
                            color: "464c50"
                        },
                        ral7039: {
                            label: "RAL 7039",
                            color: "6d6a63"
                        },
                        ral7042: {
                            label: "RAL 7042",
                            color: "81888e"
                        },
                        ral9005: {
                            label: "RAL 9005",
                            color: "303030"
                        }
                    }
                },
                customizables: {
                    default: {
                        space: {
                            default: "0.02",
                            options: {
                                .005: {
                                    label: "0,5 ".concat(W("cm"))
                                },
                                .01: {
                                    label: "1,0 ".concat(W("cm"))
                                },
                                .015: {
                                    label: "1,5 ".concat(W("cm"))
                                },
                                .02: {
                                    label: "2,0 ".concat(W("cm"))
                                },
                                .025: {
                                    label: "2,5 ".concat(W("cm"))
                                },
                                .03: {
                                    label: "3,0 ".concat(W("cm"))
                                },
                                .035: {
                                    label: "3,5 ".concat(W("cm"))
                                },
                                .04: {
                                    label: "4,0 ".concat(W("cm"))
                                },
                                .045: {
                                    label: "4,5 ".concat(W("cm"))
                                },
                                .05: {
                                    label: "5,0 ".concat(W("cm"))
                                },
                                .055: {
                                    label: "5,5 ".concat(W("cm"))
                                },
                                .06: {
                                    label: "6,0 ".concat(W("cm"))
                                },
                                .065: {
                                    label: "6,5 ".concat(W("cm"))
                                },
                                .07: {
                                    label: "7,0 ".concat(W("cm"))
                                },
                                .075: {
                                    label: "7,5 ".concat(W("cm"))
                                },
                                .08: {
                                    label: "8,0 ".concat(W("cm"))
                                }
                            }
                        }
                    }
                },
                materials: {
                    sheet: [{
                        material: 1,
                        mode: "all"
                    }],
                    perforated: [{
                        material: 2,
                        mode: "all",
                        wrap: "wrap"
                    }],
                    second: [{
                        material: 3,
                        mode: "top",
                        wrap: "wrap",
                        variant: {
                            offset: 1,
                            amount: 1
                        }
                    }]
                }
            }
        }
          , $e = function() {
            return {
                default: {
                    _179: {
                        label: "179 ".concat(W("cm")),
                        pole: "187",
                        count: 6
                    },
                    _150: {
                        label: "149 ".concat(W("cm")),
                        pole: "158",
                        count: 5
                    },
                    _120: {
                        label: "120 ".concat(W("cm")),
                        pole: "128",
                        count: 4
                    }
                }
            }
        }
          , et = function() {
            return {
                default: {
                    inox: {
                        label: W("Inox"),
                        path: "/assets/img/mailboxes/inox.jpg"
                    },
                    ral7016: {
                        label: "RAL 7016",
                        color: "3b3e3f"
                    },
                    ral7021: {
                        label: "RAL 7021",
                        color: "6a797e"
                    },
                    ral7048: {
                        label: "RAL 7048",
                        color: "bfbd8a"
                    },
                    ral8019: {
                        label: "RAL 8019",
                        color: "42322f"
                    },
                    ral9005: {
                        label: "RAL 9005",
                        color: "222222"
                    }
                },
                inox: {
                    inox: {
                        label: W("Inox"),
                        path: "/assets/img/mailboxes/inox.jpg"
                    }
                }
            }
        }
          , tt = function() {
            return {
                default: {
                    inox: {
                        label: W("Inox"),
                        path: "/assets/img/mailboxes/inox.jpg"
                    },
                    ral7016: {
                        label: "RAL 7016",
                        color: "3b3e3f"
                    },
                    ral7021: {
                        label: "RAL 7021",
                        color: "6a797e"
                    },
                    ral8019: {
                        label: "RAL 8019",
                        color: "42322f"
                    },
                    ral9005: {
                        label: "RAL 9005",
                        color: "222222"
                    }
                },
                reduced: {
                    inox: {
                        label: W("Inox"),
                        path: "/assets/img/mailboxes/inox.jpg"
                    },
                    ral7016: {
                        label: "RAL 7016",
                        color: "3b3e3f"
                    },
                    ral7021: {
                        label: "RAL 7021",
                        color: "6a797e"
                    },
                    ral9005: {
                        label: "RAL 9005",
                        color: "222222"
                    }
                }
            }
        }
          , at = function() {
            return {
                systemsDir: "/assets/img/systems/",
                systems: {
                    "joniec-gorc": {
                        label: "GORC<sup>&reg;</sup> de Luxe",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: {
                                space: {
                                    top: .02,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: .02
                                }
                            },
                            gates: {
                                space: {
                                    top: .02
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            uni: {
                                visible: !0,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL22 / GL38",
                                path: "gl",
                                options: {
                                    gm: {
                                        type: "checkbox",
                                        label: W("Zamie\u0144 p\u0142ytki GP na bloczki GM"),
                                        default: !1,
                                        reload: !1
                                    }
                                },
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22",
                                            modifiable: ["line"],
                                            supportReplacement: "gl38",
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csbnr",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-gl38",
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .22
                                            },
                                            peak1: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 1,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gl38",
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gm: {
                                            label: "GM",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        gmd: {
                                            label: "GMD",
                                            support: ["gl38", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                }
                            },
                            uni8: {
                                visible: !0,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL22/8 / GL38/8 <br /> <small>(".concat(W("Na indywidualne zapytania"), ")</small>"),
                                path: "gl8",
                                options: {},
                                colors: {
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 18
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22/8",
                                            modifiable: ["line"],
                                            supportReplacement: "gl38",
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .08
                                            },
                                            peak1: {
                                                peak: "csbnr",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38/8",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .08
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22/8"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-gl38",
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .08,
                                                coupler: .22
                                            },
                                            peak1: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38/8",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 1,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .08
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38/8"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gl38",
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .08,
                                                coupler: .38
                                            },
                                            peak1: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 4
                                    },
                                    materials: {
                                        gm: {
                                            label: "GMM",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .08
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        gmd: {
                                            label: "GMDM",
                                            support: ["gl38", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .16
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .08
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .08
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                }
                            },
                            gl: {
                                visible: !1,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL22 / GL22+GL38",
                                path: "gl",
                                options: {},
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csbnr",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .22
                                            },
                                            peak1: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gl38",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gm: {
                                            label: "GM",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        }
                                    }
                                }
                            },
                            gl38: {
                                visible: !1,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL38",
                                path: "gl",
                                options: {},
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl38",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl38",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 1,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gmd",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gmd: {
                                            label: "GMD",
                                            support: ["gl38", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                }
                            },
                            gl8: {
                                visible: !1,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL22/8 / GL22/8+GL38/8 <br /> <small>(".concat(W("Na indywidualne zapytania"), ")</small>"),
                                path: "gl8-mix",
                                options: {},
                                colors: {
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 7
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22/8",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    depth1: {
                                                        src: "depth1.jpg",
                                                        x: .22,
                                                        y: .48
                                                    },
                                                    depth3: {
                                                        src: "depth3.jpg",
                                                        x: .22,
                                                        y: .48
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .24
                                            },
                                            peak1: {
                                                peak: "csbnr",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38/8",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    depth1: {
                                                        src: "block1.jpg",
                                                        x: .38,
                                                        y: .48
                                                    },
                                                    depth3: {
                                                        src: "block3.jpg",
                                                        x: .38,
                                                        y: .48
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .24
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22/8"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    coupler1: {
                                                        src: "depth1.jpg",
                                                        x: .22,
                                                        y: .48
                                                    },
                                                    coupler3: {
                                                        src: "depth3.jpg",
                                                        x: .22,
                                                        y: .48
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .24,
                                                coupler: .22
                                            },
                                            peak1: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38/8",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    depth1: {
                                                        src: "block1.jpg",
                                                        x: .38,
                                                        y: .48
                                                    },
                                                    depth3: {
                                                        src: "block3.jpg",
                                                        x: .38,
                                                        y: .48
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .24
                                            },
                                            peak1: {
                                                peak: "csdr",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38/8"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gl38",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .76,
                                                        y: .48
                                                    },
                                                    coupler1: {
                                                        src: "block1.jpg",
                                                        x: .38,
                                                        y: .48
                                                    },
                                                    coupler3: {
                                                        src: "block3.jpg",
                                                        x: .38,
                                                        y: .48
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .24,
                                                coupler: .38
                                            },
                                            peak1: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                peak: "cpdd",
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                peak: "cpdd",
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gm: {
                                            label: "GM/GMM",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38", "c2-gl38"],
                                            block: {
                                                schedule: [.12, .26, .5, .64],
                                                texture: {
                                                    width1: {
                                                        src: "wall_width.jpg",
                                                        x: .76,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "wall_depth1.jpg",
                                                        x: .22,
                                                        y: .32
                                                    },
                                                    depth3: {
                                                        src: "wall_depth3.jpg",
                                                        x: .22,
                                                        y: .32
                                                    },
                                                    depth5: {
                                                        src: "wall_depth5.jpg",
                                                        x: .22,
                                                        y: .32
                                                    },
                                                    depth7: {
                                                        src: "wall_depth7.jpg",
                                                        x: .22,
                                                        y: .32
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak2: {
                                                peak: "cbg",
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                peak: "cbg",
                                                flat: "cpgm"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    "alaska-lupany": {
                                        label: "".concat(W("Alaska"), " ").concat(W("\u0142upany"))
                                    },
                                    "bronzyt-lupany": {
                                        label: "".concat(W("Bronzyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "czarny-lupany": {
                                        label: "".concat(W("Czarny"), " ").concat(W("\u0142upany"))
                                    },
                                    "getyt-lupany": {
                                        label: "".concat(W("Getyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "onyx-lupany": {
                                        label: "".concat(W("Onyx"), " ").concat(W("\u0142upany"))
                                    },
                                    "piaskowy-lupany": {
                                        label: "".concat(W("Piaskowy"), " ").concat(W("\u0142upany"))
                                    },
                                    "piryt-lupany": {
                                        label: "".concat(W("Piryt"), " ").concat(W("\u0142upany"))
                                    },
                                    "silver-lupany": {
                                        label: "".concat(W("Silver"), " ").concat(W("\u0142upany"))
                                    },
                                    "vera-lupany": {
                                        label: "".concat(W("Vera"), " ").concat(W("\u0142upany"))
                                    }
                                },
                                materials: {
                                    cpgs: {
                                        label: "CPGS ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgm: {
                                        label: "CPGM ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgsd: {
                                        label: "CPGSD ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgmd: {
                                        label: "CPGMD ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    }
                                }
                            }
                        }
                    },
                    "joniec-gorc_peak": {
                        label: "GORC<sup>&reg;</sup> Peak",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: {
                                space: {
                                    top: .02,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: .02
                                }
                            },
                            gates: {
                                space: {
                                    top: .02
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !1
                        },
                        blocks: {
                            uni: {
                                visible: !0,
                                label: "-",
                                path: "gp",
                                options: {},
                                colors: {
                                    dark: {
                                        label: W("Dark")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    wanad: {
                                        label: W("Wanad")
                                    }
                                },
                                default: {
                                    blocksColor: "onyx",
                                    peaksFamily: "flat",
                                    peaksColor: "onyx"
                                },
                                settings: {
                                    distance: {
                                        min: .756,
                                        default: 4
                                    },
                                    autocorner: "c2-gp19",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gp19",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        gp19: {
                                            label: "GPSM",
                                            modifiable: ["line"],
                                            supportReplacement: "gp28",
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .756,
                                                        y: .36
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .18
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .18
                                            },
                                            peak1: {
                                                flat: "cpgpsm"
                                            },
                                            peak2: {
                                                flat: "cpgpsm"
                                            },
                                            peak3: {
                                                flat: "cpgpmm"
                                            }
                                        },
                                        gp28: {
                                            label: "GPSD",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .756,
                                                        y: .36
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .18
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .28,
                                                height: .18
                                            },
                                            peak1: {
                                                flat: "cpgpsd"
                                            },
                                            peak2: {
                                                flat: "cpgpsd"
                                            },
                                            peak3: {
                                                flat: "cpgpsd"
                                            }
                                        },
                                        "c2-gp19": {
                                            label: "".concat(W("Naro\u017cnik"), " GPSM"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .756,
                                                        y: .36
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .756,
                                                        y: .36
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .18
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .18,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "cpgpsm"
                                            },
                                            peak2: {
                                                flat: "cpgpsm"
                                            },
                                            peak3: {
                                                flat: "cpgpmm"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gpmm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gpmm: {
                                            label: "GPMM",
                                            support: ["gp19", "gp28", "c2-gp19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .756,
                                                        y: .36
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .18
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .18
                                            },
                                            peak2: {
                                                flat: "cpgpsm"
                                            },
                                            peak3: {
                                                flat: "cpgpmm"
                                            }
                                        },
                                        gpmmp: {
                                            disabled: {
                                                material: "gpmm"
                                            },
                                            label: "GPMMP",
                                            support: ["gp19", "gp28", "c2-gp19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .756,
                                                        y: .36
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .18
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .18
                                            },
                                            peak2: {
                                                flat: "cpgpsm"
                                            },
                                            peak3: {
                                                flat: "cpgpmm"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    dark: {
                                        label: W("Dark")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    wanad: {
                                        label: W("Wanad")
                                    }
                                },
                                materials: {
                                    cpgpsm: {
                                        label: "CPGPSM ".concat(W("daszek p\u0142aski trzystronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .403,
                                        depth: .245,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgpmm: {
                                        label: "CPGPMM ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .245,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgpsd: {
                                        label: "CPGPSD ".concat(W("daszek p\u0142aski trzystronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .403,
                                        depth: .33,
                                        height: .06,
                                        protrude: .025
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_classic": {
                        label: "ROMA Classic",
                        migration: "roma",
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rc: {
                                visible: !0,
                                label: "-",
                                path: "rc",
                                options: {},
                                colors: {
                                    gagat: {
                                        label: W("Gagat")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    }
                                },
                                default: {
                                    blocksColor: "onyx",
                                    peaksFamily: "flat",
                                    peaksColor: "onyx"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 5
                                    },
                                    autocorner: "c2-brsm",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "brsm",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        brsm: {
                                            label: "BRSM",
                                            modifiable: ["line"],
                                            supportReplacement: "brdm",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crsm"
                                            },
                                            peak2: {
                                                flat: "crsm"
                                            },
                                            peak3: {
                                                flat: "crsm"
                                            }
                                        },
                                        brmm: {
                                            disabled: {
                                                material: "brsm"
                                            },
                                            label: "BRMM",
                                            modifiable: ["line"],
                                            supportReplacement: "brdm",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width25.jpg",
                                                        x: .756,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .252,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crmm"
                                            },
                                            peak2: {
                                                flat: "crmm"
                                            },
                                            peak3: {
                                                flat: "crmm"
                                            }
                                        },
                                        brdm: {
                                            disabled: {
                                                colors: ["bialy"],
                                                material: "brsm"
                                            },
                                            label: "BRDM",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crdm"
                                            },
                                            peak2: {
                                                flat: "crdm"
                                            },
                                            peak3: {
                                                flat: "crdm"
                                            }
                                        },
                                        "c2-brsm": {
                                            label: "".concat(W("Naro\u017cnik"), " BRSM"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-brdm",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "crsm"
                                            },
                                            peak2: {
                                                flat: "crsm"
                                            },
                                            peak3: {
                                                flat: "crsm"
                                            }
                                        },
                                        "c1-brdm": {
                                            disabled: {
                                                colors: ["bialy"],
                                                material: "c2-brsm"
                                            },
                                            label: "BRDM",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-brdm",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crdm"
                                            },
                                            peak2: {
                                                flat: "crdm"
                                            },
                                            peak3: {
                                                flat: "crdm"
                                            }
                                        },
                                        "c2-brdm": {
                                            disabled: {
                                                colors: ["bialy"],
                                                material: "c2-brsm"
                                            },
                                            label: "".concat(W("Naro\u017cnik"), " BRDM"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-brdm",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .2,
                                                coupler: .36
                                            },
                                            peak1: {
                                                flat: "crdm"
                                            },
                                            peak2: {
                                                flat: "crdm"
                                            },
                                            peak3: {
                                                flat: "crdm"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "brsm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        brsm: {
                                            label: "BRSM",
                                            support: ["brsm", "brmm", "brdm", "c2-brsm", "c1-brdm", "c2-brdm"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crsm"
                                            },
                                            peak3: {
                                                flat: "crsm"
                                            }
                                        },
                                        brdm: {
                                            disabled: {
                                                colors: ["bialy"],
                                                material: "brsm"
                                            },
                                            label: "BRDM",
                                            support: ["brdm", "c1-brdm", "c2-brdm"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width36.jpg",
                                                        x: 1.08,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crdm"
                                            },
                                            peak3: {
                                                flat: "crdm"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    gagat: {
                                        label: W("Gagat")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    }
                                },
                                materials: {
                                    crsm: {
                                        label: "CRSM ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width50.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top50.jpg",
                                                x: 1.512,
                                                y: .2
                                            }
                                        },
                                        width: .504,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    crmm: {
                                        label: "CRMM ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width25.jpg",
                                                x: .756,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top25.jpg",
                                                x: .756,
                                                y: .2
                                            }
                                        },
                                        width: .252,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    crdm: {
                                        disabled: {
                                            colors: ["bialy"],
                                            material: "crsm",
                                            target: !0
                                        },
                                        label: "CRSM ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width36.jpg",
                                                x: 1.08,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "width36.jpg",
                                                x: 1.08,
                                                y: .05
                                            },
                                            top: {
                                                src: "top36.jpg",
                                                x: 1.08,
                                                y: .36
                                            }
                                        },
                                        width: .36,
                                        depth: .36,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_horizon": {
                        label: "ROMA Horizon",
                        migration: "roma",
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rh: {
                                visible: !0,
                                label: "-",
                                path: "rh",
                                options: {},
                                colors: {
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    amber: {
                                        label: W("Amber")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    },
                                    magnetyt: {
                                        label: W("Magnetyt")
                                    }
                                },
                                default: {
                                    blocksColor: "onyx",
                                    peaksFamily: "flat",
                                    peaksColor: "onyx"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 5
                                    },
                                    autocorner: "c2-bh20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bh20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bh20: {
                                            label: "BH20",
                                            modifiable: ["line"],
                                            supportReplacement: "bh28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "ch20"
                                            },
                                            peak2: {
                                                flat: "ch20"
                                            },
                                            peak3: {
                                                flat: "ch20"
                                            }
                                        },
                                        bh28: {
                                            label: "BH28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "ch28"
                                            },
                                            peak2: {
                                                flat: "ch28"
                                            },
                                            peak3: {
                                                flat: "ch28"
                                            }
                                        },
                                        "c2-bh20": {
                                            label: "".concat(W("Naro\u017cnik"), " BH20"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-bh28",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "ch20"
                                            },
                                            peak2: {
                                                flat: "ch20"
                                            },
                                            peak3: {
                                                flat: "ch20"
                                            }
                                        },
                                        "c2-bh28": {
                                            label: "".concat(W("Naro\u017cnik"), " BH28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "ch28"
                                            },
                                            peak2: {
                                                flat: "ch28"
                                            },
                                            peak3: {
                                                flat: "ch28"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bh20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bh20: {
                                            label: "BH20",
                                            support: ["bh20", "bh28", "c2-bh20", "c2-bh28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "ch20"
                                            },
                                            peak3: {
                                                flat: "ch20"
                                            }
                                        },
                                        bh28: {
                                            label: "BH28",
                                            support: ["bh28", "c2-bh28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "ch28"
                                            },
                                            peak3: {
                                                flat: "ch28"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    amber: {
                                        label: W("Amber")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    },
                                    magnetyt: {
                                        label: W("Magnetyt")
                                    }
                                },
                                materials: {
                                    ch20: {
                                        label: "CH20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.512,
                                                y: .2
                                            }
                                        },
                                        width: .504,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    ch28: {
                                        label: "CH28 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth28.jpg",
                                                x: .28,
                                                y: .05
                                            },
                                            top: {
                                                src: "top28.jpg",
                                                x: 1.512,
                                                y: .28
                                            }
                                        },
                                        width: .504,
                                        depth: .28,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_mega": {
                        label: "ROMA Mega",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma_mega"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rm: {
                                visible: !0,
                                label: "-",
                                path: "rm",
                                options: {},
                                colors: {
                                    aragon: {
                                        label: W("Aragon")
                                    },
                                    gabro: {
                                        label: W("Gabro")
                                    },
                                    galena: {
                                        label: W("Galena")
                                    },
                                    lidyt: {
                                        label: W("Lidyt")
                                    },
                                    snow: {
                                        label: W("Snow")
                                    },
                                    turmalin: {
                                        label: W("Turmalin")
                                    }
                                },
                                default: {
                                    blocksColor: "gabro",
                                    peaksFamily: "flat",
                                    peaksColor: "gabro"
                                },
                                settings: {
                                    distance: {
                                        min: .756,
                                        default: 4
                                    },
                                    autocorner: "c2-rm19",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rm19",
                                        width: 1,
                                        depth: 1,
                                        height: 6
                                    },
                                    materials: {
                                        rm19: {
                                            label: "RM19",
                                            modifiable: ["line"],
                                            supportReplacement: "rm28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .864
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .288
                                            },
                                            peak1: {
                                                flat: "crm19"
                                            },
                                            peak2: {
                                                flat: "crm19"
                                            },
                                            peak3: {
                                                flat: "crm19"
                                            }
                                        },
                                        rm28: {
                                            label: "RM28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .864
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .28,
                                                height: .288
                                            },
                                            peak1: {
                                                flat: "crm28"
                                            },
                                            peak2: {
                                                flat: "crm28"
                                            },
                                            peak3: {
                                                flat: "crm28"
                                            }
                                        },
                                        "c2-rm19": {
                                            label: "".concat(W("Naro\u017cnik"), " RM19"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-rm28",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .864
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .288,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "crm19"
                                            },
                                            peak2: {
                                                flat: "crm19"
                                            },
                                            peak3: {
                                                flat: "crm19"
                                            }
                                        },
                                        "c2-rm28": {
                                            label: "".concat(W("Naro\u017cnik"), " RM28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    coupler1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .864
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .288,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "crm28"
                                            },
                                            peak2: {
                                                flat: "crm28"
                                            },
                                            peak3: {
                                                flat: "crm28"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rm19",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        rm19: {
                                            label: "RM19",
                                            support: ["rm19", "rm28", "c2-rm19", "c2-rm28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .864
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .288
                                            },
                                            peak2: {
                                                flat: "crm19"
                                            },
                                            peak3: {
                                                flat: "crm19"
                                            }
                                        },
                                        rm28: {
                                            label: "RM28",
                                            support: ["rm28", "c2-rm28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .864
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .864
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .28,
                                                height: .288
                                            },
                                            peak2: {
                                                flat: "crm28"
                                            },
                                            peak3: {
                                                flat: "crm28"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    aragon: {
                                        label: W("Aragon")
                                    },
                                    gabro: {
                                        label: W("Gabro")
                                    },
                                    galena: {
                                        label: W("Galena")
                                    },
                                    lidyt: {
                                        label: W("Lidyt")
                                    },
                                    snow: {
                                        label: W("Snow")
                                    },
                                    turmalin: {
                                        label: W("Turmalin")
                                    }
                                },
                                materials: {
                                    crm19: {
                                        label: "CRM19 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth19.jpg",
                                                x: .195,
                                                y: .072
                                            },
                                            top: {
                                                src: "top19.jpg",
                                                x: 2.268,
                                                y: .195
                                            }
                                        },
                                        width: .756,
                                        depth: .195,
                                        height: .072,
                                        protrude: 0
                                    },
                                    crm28: {
                                        label: "CRM28 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth28.jpg",
                                                x: .28,
                                                y: .072
                                            },
                                            top: {
                                                src: "top28.jpg",
                                                x: 2.268,
                                                y: .28
                                            }
                                        },
                                        width: .756,
                                        depth: .28,
                                        height: .072,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_vital_eco": {
                        label: "ROMA Vital Eco",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !1
                        },
                        blocks: {
                            rv: {
                                visible: !0,
                                label: "-",
                                path: "rv",
                                options: {},
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    iryd: {
                                        label: W("Iryd")
                                    },
                                    kalcyt: {
                                        label: W("Kalcyt")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    }
                                },
                                default: {
                                    blocksColor: "iryd",
                                    peaksFamily: "flat",
                                    peaksColor: "iryd"
                                },
                                settings: {
                                    distance: {
                                        min: .57,
                                        default: 5
                                    },
                                    autocorner: "c2-rve19",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rve19",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        rve19: {
                                            label: "RVE19",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .57,
                                                depth: .195,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crve19"
                                            },
                                            peak2: {
                                                flat: "crve19"
                                            },
                                            peak3: {
                                                flat: "crve19"
                                            }
                                        },
                                        "c2-rve19": {
                                            label: "".concat(W("Naro\u017cnik"), " RVE19"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .57,
                                                depth: .57,
                                                height: .2,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "crve19"
                                            },
                                            peak2: {
                                                flat: "crve19"
                                            },
                                            peak3: {
                                                flat: "crve19"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rve19",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        rve19: {
                                            label: "RVE19",
                                            support: ["rve19", "c2-rve19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .57,
                                                depth: .195,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crve19"
                                            },
                                            peak3: {
                                                flat: "crve19"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    iryd: {
                                        label: W("Iryd")
                                    },
                                    kalcyt: {
                                        label: W("Kalcyt")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    }
                                },
                                materials: {
                                    crve19: {
                                        label: "CRVE19 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.71,
                                                y: .06
                                            },
                                            depth1: {
                                                src: "depth19.jpg",
                                                x: .195,
                                                y: .06
                                            },
                                            top: {
                                                src: "top19.jpg",
                                                x: 1.71,
                                                y: .195
                                            }
                                        },
                                        width: .57,
                                        depth: .195,
                                        height: .06,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_vital_eco_multigrain": {
                        label: "ROMA Vital Eco Multigrain",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !1
                        },
                        blocks: {
                            rvm: {
                                visible: !0,
                                label: "-",
                                path: "rvm",
                                options: {},
                                colors: {
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    }
                                },
                                default: {
                                    blocksColor: "popiel",
                                    peaksFamily: "flat",
                                    peaksColor: "popiel"
                                },
                                settings: {
                                    distance: {
                                        min: .57,
                                        default: 5
                                    },
                                    autocorner: "c2-rvem19",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rvem19",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        rvem19: {
                                            label: "RVEM19",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .57,
                                                depth: .195,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crvem19"
                                            },
                                            peak2: {
                                                flat: "crvem19"
                                            },
                                            peak3: {
                                                flat: "crvem19"
                                            }
                                        },
                                        "c2-rvem19": {
                                            label: "".concat(W("Naro\u017cnik"), " RVEM19"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .57,
                                                depth: .57,
                                                height: .2,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "crvem19"
                                            },
                                            peak2: {
                                                flat: "crvem19"
                                            },
                                            peak3: {
                                                flat: "crvem19"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rvem19",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        rvem19: {
                                            label: "RVEM19",
                                            support: ["rvem19", "c2-rvem19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.71,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .57,
                                                depth: .195,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crvem19"
                                            },
                                            peak3: {
                                                flat: "crvem19"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    }
                                },
                                materials: {
                                    crvem19: {
                                        label: "CRVEM19 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.71,
                                                y: .06
                                            },
                                            depth1: {
                                                src: "depth19.jpg",
                                                x: .195,
                                                y: .06
                                            },
                                            top: {
                                                src: "top19.jpg",
                                                x: 1.71,
                                                y: .195
                                            }
                                        },
                                        width: .57,
                                        depth: .195,
                                        height: .06,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_integra_eco": {
                        label: "ROMA Integra Eco",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma_mega"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            ri: {
                                visible: !0,
                                label: "-",
                                path: "ri",
                                options: {},
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    iryd: {
                                        label: W("Iryd")
                                    }
                                },
                                default: {
                                    blocksColor: "iryd",
                                    peaksFamily: "flat",
                                    peaksColor: "iryd"
                                },
                                settings: {
                                    distance: {
                                        min: .756,
                                        default: 4
                                    },
                                    autocorner: "c2-rie20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rie20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        rie20: {
                                            label: "RIE20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .198,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .198,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crie20"
                                            },
                                            peak2: {
                                                flat: "crie20"
                                            },
                                            peak3: {
                                                flat: "crie20"
                                            }
                                        },
                                        "c2-rie20": {
                                            label: "".concat(W("Naro\u017cnik"), " RIE20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .198,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .2,
                                                coupler: .198
                                            },
                                            peak1: {
                                                flat: "crie20"
                                            },
                                            peak2: {
                                                flat: "crie20"
                                            },
                                            peak3: {
                                                flat: "crie20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rie20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        rie20: {
                                            label: "RIE20",
                                            support: ["rie20", "c2-rie20"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .198,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .198,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crie20"
                                            },
                                            peak3: {
                                                flat: "crie20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    iryd: {
                                        label: W("Iryd")
                                    }
                                },
                                materials: {
                                    crie20: {
                                        label: "CRIE20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .198,
                                                y: .072
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 2.268,
                                                y: .198
                                            }
                                        },
                                        width: .756,
                                        depth: .198,
                                        height: .072,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_giga": {
                        label: "ROMA Giga",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rg: {
                                visible: !0,
                                label: "-",
                                path: "rg",
                                options: {},
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    iryd: {
                                        label: W("Iryd")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    },
                                    sandy: {
                                        label: W("Sandy")
                                    }
                                },
                                default: {
                                    blocksColor: "iryd",
                                    peaksFamily: "flat",
                                    peaksColor: "iryd"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 5
                                    },
                                    autocorner: "c2-rgm20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rgm20",
                                        width: 1,
                                        depth: 1,
                                        height: 4
                                    },
                                    materials: {
                                        rgm20: {
                                            label: "RGM20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: 1.2
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .198,
                                                        y: 1.2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .198,
                                                height: .4
                                            },
                                            peak1: {
                                                flat: "crgm20"
                                            },
                                            peak2: {
                                                flat: "crgm20"
                                            },
                                            peak3: {
                                                flat: "crgm20"
                                            }
                                        },
                                        "c2-rgm20": {
                                            label: "".concat(W("Naro\u017cnik"), " RGM20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: 1.2
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: 1.2
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .198,
                                                        y: 1.2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .4,
                                                coupler: .198
                                            },
                                            peak1: {
                                                flat: "crgm20"
                                            },
                                            peak2: {
                                                flat: "crgm20"
                                            },
                                            peak3: {
                                                flat: "crgm20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rgm20",
                                        depth: 1,
                                        height: 1
                                    },
                                    materials: {
                                        rgm20: {
                                            label: "RGM20",
                                            support: ["rgm20", "c2-rgm20"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: 1.2
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .198,
                                                        y: 1.2
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .198,
                                                height: .4
                                            },
                                            peak2: {
                                                flat: "crgm20"
                                            },
                                            peak3: {
                                                flat: "crgm20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    iryd: {
                                        label: W("Iryd")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    },
                                    sandy: {
                                        label: W("Sandy")
                                    }
                                },
                                materials: {
                                    crgm20: {
                                        label: "CRGM20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.512,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .198,
                                                y: .072
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.512,
                                                y: .198
                                            }
                                        },
                                        width: .504,
                                        depth: .198,
                                        height: .072,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_lite": {
                        label: "ROMA Lite",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma_mega"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rl: {
                                visible: !0,
                                label: "-",
                                path: "rl",
                                options: {},
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    }
                                },
                                default: {
                                    blocksColor: "popiel",
                                    peaksFamily: "flat",
                                    peaksColor: "popiel"
                                },
                                settings: {
                                    distance: {
                                        min: .756,
                                        default: 4
                                    },
                                    autocorner: "c2-rl19",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rl19",
                                        width: 1,
                                        depth: 1,
                                        height: 12
                                    },
                                    materials: {
                                        rl19: {
                                            label: "RL19",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .144
                                            },
                                            peak1: {
                                                flat: "crl19"
                                            },
                                            peak2: {
                                                flat: "crl19"
                                            },
                                            peak3: {
                                                flat: "crl19"
                                            }
                                        },
                                        "c2-rl19": {
                                            label: "".concat(W("Naro\u017cnik"), " RL19"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .144,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "crl19"
                                            },
                                            peak2: {
                                                flat: "crl19"
                                            },
                                            peak3: {
                                                flat: "crl19"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rl19",
                                        depth: 1,
                                        height: 4
                                    },
                                    materials: {
                                        rl19: {
                                            label: "RL19",
                                            support: ["rl19", "c2-rl19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .144
                                            },
                                            peak2: {
                                                flat: "crl19"
                                            },
                                            peak3: {
                                                flat: "crl19"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    bialy: {
                                        label: W("Bia\u0142y")
                                    },
                                    grafit: {
                                        label: W("Grafit")
                                    },
                                    popiel: {
                                        label: W("Popiel")
                                    }
                                },
                                materials: {
                                    crl19: {
                                        label: "CRL19 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth19.jpg",
                                                x: .195,
                                                y: .072
                                            },
                                            top: {
                                                src: "top19.jpg",
                                                x: 2.268,
                                                y: .195
                                            }
                                        },
                                        width: .756,
                                        depth: .195,
                                        height: .072,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_nova": {
                        label: "ROMA Nova",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma_mega"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rn: {
                                visible: !0,
                                label: "-",
                                path: "rn",
                                options: {},
                                colors: {
                                    szerlit: {
                                        label: W("Szerlit")
                                    },
                                    uran: {
                                        label: W("Uran")
                                    }
                                },
                                default: {
                                    blocksColor: "szerlit",
                                    peaksFamily: "flat",
                                    peaksColor: "szerlit"
                                },
                                settings: {
                                    distance: {
                                        min: .756,
                                        default: 4
                                    },
                                    autocorner: "c2-rn19",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rn19",
                                        width: 1,
                                        depth: 1,
                                        height: 12
                                    },
                                    materials: {
                                        rn19: {
                                            label: "RN19",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .144
                                            },
                                            peak1: {
                                                flat: "crn19"
                                            },
                                            peak2: {
                                                flat: "crn19"
                                            },
                                            peak3: {
                                                flat: "crn19"
                                            }
                                        },
                                        "c2-rn19": {
                                            label: "".concat(W("Naro\u017cnik"), " RN19"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "width_1.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth2: {
                                                        src: "width_2.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .144,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "crn19"
                                            },
                                            peak2: {
                                                flat: "crn19"
                                            },
                                            peak3: {
                                                flat: "crn19"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rn19",
                                        depth: 1,
                                        height: 4
                                    },
                                    materials: {
                                        rn19: {
                                            label: "RN19",
                                            support: ["rn19", "c2-rn19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .144
                                            },
                                            peak2: {
                                                flat: "crn19"
                                            },
                                            peak3: {
                                                flat: "crn19"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    szerlit: {
                                        label: W("Szerlit")
                                    },
                                    uran: {
                                        label: W("Uran")
                                    }
                                },
                                materials: {
                                    crn19: {
                                        label: "CRN19 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width_1.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            width2: {
                                                src: "width_2.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth19_1.jpg",
                                                x: .195,
                                                y: .072
                                            },
                                            depth2: {
                                                src: "depth19_2.jpg",
                                                x: .195,
                                                y: .072
                                            },
                                            top: {
                                                src: "top19.jpg",
                                                x: 2.268,
                                                y: .195
                                            }
                                        },
                                        width: .756,
                                        depth: .195,
                                        height: .072,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_perfect": {
                        label: "ROMA Perfect",
                        migration: "roma",
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rp: {
                                visible: !0,
                                label: "-",
                                path: "rp",
                                options: {},
                                colors: {
                                    dioryt: {
                                        label: W("Dioryt")
                                    },
                                    milos: {
                                        label: W("Milos")
                                    },
                                    morion: {
                                        label: W("Morion")
                                    },
                                    alba: {
                                        label: W("Alba")
                                    }
                                },
                                default: {
                                    blocksColor: "dioryt",
                                    peaksFamily: "flat",
                                    peaksColor: "dioryt"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 5
                                    },
                                    autocorner: "c2-rp20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rp20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        rp20: {
                                            label: "RP20",
                                            modifiable: ["line"],
                                            supportReplacement: "rp28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20_1.jpg",
                                                        x: .2,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "depth20_2.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crp20"
                                            },
                                            peak2: {
                                                flat: "crp20"
                                            },
                                            peak3: {
                                                flat: "crp20"
                                            }
                                        },
                                        rp28: {
                                            disabled: {
                                                material: "rp20"
                                            },
                                            label: "RP28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28_1.jpg",
                                                        x: .28,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "depth28_2.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crp28"
                                            },
                                            peak2: {
                                                flat: "crp28"
                                            },
                                            peak3: {
                                                flat: "crp28"
                                            }
                                        },
                                        "c2-rp20": {
                                            label: "".concat(W("Naro\u017cnik"), " RP20"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-rp28",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20_1.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "crp20"
                                            },
                                            peak2: {
                                                flat: "crp20"
                                            },
                                            peak3: {
                                                flat: "crp20"
                                            }
                                        },
                                        "c2-rp28": {
                                            disabled: {
                                                material: "c2-rp20"
                                            },
                                            label: "".concat(W("Naro\u017cnik"), " RP28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth28_1.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "crp28"
                                            },
                                            peak2: {
                                                flat: "crp28"
                                            },
                                            peak3: {
                                                flat: "crp28"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rp20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        rp20: {
                                            label: "RP20",
                                            support: ["rp20", "rp28", "c2-rp20", "c2-rp28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20_1.jpg",
                                                        x: .2,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "depth20_2.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crp20"
                                            },
                                            peak3: {
                                                flat: "crp20"
                                            }
                                        },
                                        rp28: {
                                            disabled: {
                                                material: "rp20"
                                            },
                                            label: "RP28",
                                            support: ["rp28", "c2-rp28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28_1.jpg",
                                                        x: .28,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "depth28_2.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crp28"
                                            },
                                            peak3: {
                                                flat: "crp28"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    dioryt: {
                                        label: W("Dioryt")
                                    },
                                    milos: {
                                        label: W("Milos")
                                    },
                                    morion: {
                                        label: W("Morion")
                                    },
                                    alba: {
                                        label: W("Alba")
                                    }
                                },
                                materials: {
                                    crp20: {
                                        label: "CRP20 ".concat(W("daszek scratch czterostronnie")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width_1.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            width2: {
                                                src: "width_2.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20_1.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            depth2: {
                                                src: "depth20_2.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.512,
                                                y: .2
                                            }
                                        },
                                        width: .504,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    crp28: {
                                        label: "CRP28 ".concat(W("daszek scratch czterostronnie")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width_1.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            width2: {
                                                src: "width_2.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth28_1.jpg",
                                                x: .28,
                                                y: .05
                                            },
                                            depth2: {
                                                src: "depth28_2.jpg",
                                                x: .28,
                                                y: .05
                                            },
                                            top: {
                                                src: "top28.jpg",
                                                x: 1.512,
                                                y: .28
                                            }
                                        },
                                        width: .504,
                                        depth: .28,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-roma_diamond": {
                        label: "ROMA Diamond",
                        migration: "roma",
                        technical: !1,
                        adds: {
                            combo: {
                                sea_tide: "roma"
                            },
                            fencings: {
                                space: {
                                    top: 0,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: 0
                                }
                            },
                            gates: {
                                space: {
                                    top: 0
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !0
                        },
                        blocks: {
                            rd: {
                                visible: !0,
                                label: "-",
                                path: "rd",
                                options: {},
                                colors: {
                                    halit: {
                                        label: W("Halit")
                                    }
                                },
                                default: {
                                    blocksColor: "halit",
                                    peaksFamily: "flat",
                                    peaksColor: "halit"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 5
                                    },
                                    autocorner: "c2-rd20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "rd20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        rd20: {
                                            label: "RD20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20_1.jpg",
                                                        x: .2,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "depth20_2.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "crd20"
                                            },
                                            peak2: {
                                                flat: "crd20"
                                            },
                                            peak3: {
                                                flat: "crd20"
                                            }
                                        },
                                        "c2-rd20": {
                                            label: "".concat(W("Naro\u017cnik"), " RD20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20_1.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "crd20"
                                            },
                                            peak2: {
                                                flat: "crd20"
                                            },
                                            peak3: {
                                                flat: "crd20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "rd20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        rd20: {
                                            label: "RD20",
                                            support: ["rd20", "c2-rd20"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20_1.jpg",
                                                        x: .2,
                                                        y: .6
                                                    },
                                                    depth2: {
                                                        src: "depth20_2.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "crd20"
                                            },
                                            peak3: {
                                                flat: "crd20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    halit: {
                                        label: W("Halit")
                                    }
                                },
                                materials: {
                                    crd20: {
                                        label: "CRD20 ".concat(W("daszek scratch czterostronnie")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width_1.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            width2: {
                                                src: "width_2.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20_1.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            depth2: {
                                                src: "depth20_2.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.512,
                                                y: .2
                                            }
                                        },
                                        width: .504,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "joniec-modyn": {
                        label: "MODY\u0143",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: {
                                space: {
                                    top: .02,
                                    bottom: .03
                                }
                            },
                            wickets: {
                                space: {
                                    top: .02
                                }
                            },
                            gates: {
                                space: {
                                    top: .02
                                }
                            },
                            panels: !0,
                            mailboxes: !0,
                            lamps: !0,
                            ledblocks: !1
                        },
                        blocks: {
                            m: {
                                visible: !0,
                                label: "-",
                                path: "m",
                                options: {},
                                colors: {
                                    czarny: {
                                        label: W("Czarny")
                                    }
                                },
                                default: {
                                    blocksColor: "czarny",
                                    peaksFamily: "peak",
                                    peaksColor: "czarny"
                                },
                                settings: {
                                    distance: {
                                        min: .36,
                                        default: 5
                                    },
                                    autocorner: "c2-bl",
                                    offsets: !1,
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "bl",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bl: {
                                            label: "B\u0141",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                peak: "cpb"
                                            },
                                            peak2: {
                                                peak: "cpb"
                                            },
                                            peak3: {
                                                peak: "cpb"
                                            }
                                        },
                                        "c2-bl": {
                                            label: "".concat(W("Naro\u017cnik"), " B\u0141"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .2
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                peak: "cpb"
                                            },
                                            peak2: {
                                                peak: "cpb"
                                            },
                                            peak3: {
                                                peak: "cpb"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bl",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bl: {
                                            label: "B\u0141",
                                            support: ["bl", "c2-bl"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .36,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                peak: "cpb"
                                            },
                                            peak3: {
                                                peak: "cpb"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            peak: {
                                label: W("Daszki spadowe"),
                                path: "peak",
                                colors: {
                                    czarny: {
                                        label: W("Czarny")
                                    }
                                },
                                materials: {
                                    cpb: {
                                        label: "CPB ".concat(W("daszek dwuspadowy g\u0142adki")),
                                        type: "peak2",
                                        texture: {
                                            universal: {
                                                src: "universal.jpg",
                                                x: .2,
                                                y: .2
                                            }
                                        },
                                        width: .417,
                                        depth: .25,
                                        height: .04,
                                        tip: {
                                            depth: 0,
                                            height: .01
                                        },
                                        protrude: .025
                                    }
                                }
                            }
                        }
                    },
                    "castorama-tora": {
                        label: "CASTORAMA - TORA",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            t: {
                                visible: !0,
                                label: "-",
                                path: "../../merkury-beno/blocks/b",
                                options: {},
                                colors: {
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    }
                                },
                                default: {
                                    blocksColor: "marengo",
                                    peaksFamily: "flat",
                                    peaksColor: "marengo"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-btr20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "btr20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        btr20: {
                                            label: "BTR20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dtr20"
                                            },
                                            peak2: {
                                                flat: "dtr20"
                                            },
                                            peak3: {
                                                flat: "dtr20"
                                            }
                                        },
                                        btr40: {
                                            label: "BTR40",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dtr40"
                                            },
                                            peak2: {
                                                flat: "dtr40"
                                            },
                                            peak3: {
                                                flat: "dtr40"
                                            }
                                        },
                                        "c2-btr20": {
                                            label: "".concat(W("Naro\u017cnik"), " BTR20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "dtr20"
                                            },
                                            peak2: {
                                                flat: "dtr20"
                                            },
                                            peak3: {
                                                flat: "dtr20"
                                            }
                                        },
                                        "c1-btr40": {
                                            label: "BTR40",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-btr40",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dtr40"
                                            },
                                            peak2: {
                                                flat: "dtr40"
                                            },
                                            peak3: {
                                                flat: "dtr40"
                                            }
                                        },
                                        "c2-btr40": {
                                            label: "".concat(W("Naro\u017cnik"), " BTR40"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-btr40",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .403
                                            },
                                            peak1: {
                                                flat: "dtr40"
                                            },
                                            peak2: {
                                                flat: "dtr40"
                                            },
                                            peak3: {
                                                flat: "dtr40"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "btr20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        btr20: {
                                            label: "BTR20",
                                            support: ["btr20", "btr40", "c2-btr20", "c1-btr40", "c2-btr40"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "dtr20"
                                            },
                                            peak3: {
                                                flat: "dtr20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../merkury-beno/peaks/flat",
                                colors: {
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    }
                                },
                                materials: {
                                    dtr20: {
                                        label: "DTR20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.209,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    dtr40: {
                                        label: "DTR40 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .06
                                            },
                                            depth1: {
                                                src: "depth40.jpg",
                                                x: .403,
                                                y: .06
                                            },
                                            top: {
                                                src: "top40.jpg",
                                                x: 1.209,
                                                y: .403
                                            }
                                        },
                                        width: .403,
                                        depth: .403,
                                        height: .06,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "castorama-gorc": {
                        label: "CASTORAMA - GORC",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            gl: {
                                visible: !0,
                                label: "-",
                                path: "../../joniec-gorc/blocks/gl",
                                options: {},
                                colors: {
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgc"
                                            },
                                            peak2: {
                                                flat: "cpgc"
                                            },
                                            peak3: {
                                                flat: "cpgc"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgcd"
                                            },
                                            peak2: {
                                                flat: "cpgcd"
                                            },
                                            peak3: {
                                                flat: "cpgcd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .22
                                            },
                                            peak1: {
                                                flat: "cpgc"
                                            },
                                            peak2: {
                                                flat: "cpgc"
                                            },
                                            peak3: {
                                                flat: "cpgc"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl22",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgcd"
                                            },
                                            peak2: {
                                                flat: "cpgcd"
                                            },
                                            peak3: {
                                                flat: "cpgcd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gm: {
                                            label: "GP",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak2: {
                                                flat: "cpgc"
                                            },
                                            peak3: {
                                                flat: "cpgc"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../joniec-gorc/peaks/flat",
                                colors: {
                                    "onyx-lupany": {
                                        label: "".concat(W("Onyx"), " ").concat(W("\u0142upany"))
                                    },
                                    "piryt-lupany": {
                                        label: "".concat(W("Piryt"), " ").concat(W("\u0142upany"))
                                    }
                                },
                                materials: {
                                    cpgc: {
                                        label: "CPGC ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .42,
                                        depth: .27,
                                        height: .06,
                                        protrude: .02
                                    },
                                    cpgcd: {
                                        label: "CPGCD ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .42,
                                        depth: .42,
                                        height: .06,
                                        protrude: .02
                                    }
                                }
                            }
                        }
                    },
                    "merkury-roda": {
                        label: "MERKURY MARKET - RODA",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            p: {
                                visible: !0,
                                label: "-",
                                path: "../../psb-piro/blocks/p",
                                options: {},
                                colors: {
                                    cyrkon: {
                                        label: W("Cyrkon")
                                    },
                                    kasyt: {
                                        label: W("Kasyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                default: {
                                    blocksColor: "onyx",
                                    peaksFamily: "flat",
                                    peaksColor: "onyx"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bp28",
                                    offsets: !1,
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "bp28",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bp28: {
                                            label: "RODA28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cp33"
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        bp16: {
                                            label: "RODA16",
                                            modifiable: ["line"],
                                            supportReplacement: "bp28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .16,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cp20"
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        },
                                        "c2-bp28": {
                                            label: "".concat(W("Naro\u017cnik"), " RODA28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "cp33"
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        "c2-bp16": {
                                            label: "".concat(W("Naro\u017cnik"), " RODA16"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .16
                                            },
                                            peak1: {
                                                flat: "cp20"
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bp16",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bp28: {
                                            label: "RODA28",
                                            support: ["bp28", "c2-bp28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        bp16: {
                                            label: "RODA16",
                                            support: ["bp28", "bp16", "c2-bp28", "c2-bp16"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .16,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../psb-piro/peaks/flat",
                                colors: {
                                    cyrkon: {
                                        label: W("Cyrkon")
                                    },
                                    kasyt: {
                                        label: W("Kasyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                materials: {
                                    cp33: {
                                        label: "DRD33 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "universal.jpg",
                                                x: .45,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "universal.jpg",
                                                x: .33,
                                                y: .05
                                            },
                                            top: {
                                                src: "universal.jpg",
                                                x: .45,
                                                y: .33
                                            }
                                        },
                                        width: .45,
                                        depth: .33,
                                        height: .05,
                                        protrude: .0235
                                    },
                                    cp20: {
                                        label: "DRD20 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "universal.jpg",
                                                x: .403,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "universal.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "universal.jpg",
                                                x: .403,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "merkury-beno": {
                        label: "MERKURY MARKET - BENO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            b: {
                                visible: !0,
                                label: "-",
                                path: "b",
                                options: {},
                                colors: {
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    }
                                },
                                default: {
                                    blocksColor: "marengo",
                                    peaksFamily: "flat",
                                    peaksColor: "marengo"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-beno20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "beno20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        beno20: {
                                            label: "BENO20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbn20"
                                            },
                                            peak2: {
                                                flat: "dbn20"
                                            },
                                            peak3: {
                                                flat: "dbn20"
                                            }
                                        },
                                        beno40: {
                                            label: "BENO40",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbn40"
                                            },
                                            peak2: {
                                                flat: "dbn40"
                                            },
                                            peak3: {
                                                flat: "dbn40"
                                            }
                                        },
                                        "c2-beno20": {
                                            label: "".concat(W("Naro\u017cnik"), " BENO20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "dbn20"
                                            },
                                            peak2: {
                                                flat: "dbn20"
                                            },
                                            peak3: {
                                                flat: "dbn20"
                                            }
                                        },
                                        "c1-beno40": {
                                            label: "BENO40",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-beno40",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbn40"
                                            },
                                            peak2: {
                                                flat: "dbn40"
                                            },
                                            peak3: {
                                                flat: "dbn40"
                                            }
                                        },
                                        "c2-beno40": {
                                            label: "".concat(W("Naro\u017cnik"), " BENO40"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-beno40",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .403
                                            },
                                            peak1: {
                                                flat: "dbn40"
                                            },
                                            peak2: {
                                                flat: "dbn40"
                                            },
                                            peak3: {
                                                flat: "dbn40"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "beno20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        beno20: {
                                            label: "BENO20",
                                            support: ["beno20", "beno40", "c2-beno20", "c1-beno40", "c2-beno40"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "dbn20"
                                            },
                                            peak3: {
                                                flat: "dbn20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    }
                                },
                                materials: {
                                    dbn20: {
                                        label: "DBN20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.209,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    dbn40: {
                                        label: "DBN40 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .06
                                            },
                                            depth1: {
                                                src: "depth40.jpg",
                                                x: .403,
                                                y: .06
                                            },
                                            top: {
                                                src: "top40.jpg",
                                                x: 1.209,
                                                y: .403
                                            }
                                        },
                                        width: .403,
                                        depth: .403,
                                        height: .06,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "merkury-gorc": {
                        label: "MERKURY MARKET - GORC<sup>&reg;</sup> de Luxe",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            gl: {
                                visible: !0,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL22 / GL22+GL38",
                                path: "../../joniec-gorc/blocks/gl",
                                options: {},
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .22
                                            },
                                            peak1: {
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gl38",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gm: {
                                            label: "GM",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        }
                                    }
                                }
                            },
                            gl38: {
                                visible: !0,
                                label: "GORC<sup>&reg;</sup> de Luxe <br /> GL38",
                                path: "../../joniec-gorc/blocks/gl",
                                options: {},
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl38",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl38",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 1,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gmd",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gmd: {
                                            label: "GMD",
                                            support: ["gl38", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../joniec-gorc/peaks/flat",
                                colors: {
                                    "bronzyt-lupany": {
                                        label: "".concat(W("Bronzyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "czarny-lupany": {
                                        label: "".concat(W("Czarny"), " ").concat(W("\u0142upany"))
                                    },
                                    "getyt-lupany": {
                                        label: "".concat(W("Getyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "onyx-lupany": {
                                        label: "".concat(W("Onyx"), " ").concat(W("\u0142upany"))
                                    },
                                    "piryt-lupany": {
                                        label: "".concat(W("Piryt"), " ").concat(W("\u0142upany"))
                                    },
                                    "silver-lupany": {
                                        label: "".concat(W("Silver"), " ").concat(W("\u0142upany"))
                                    },
                                    "vera-lupany": {
                                        label: "".concat(W("Vera"), " ").concat(W("\u0142upany"))
                                    }
                                },
                                materials: {
                                    cpgs: {
                                        label: "CPGS ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgm: {
                                        label: "CPGM ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgsd: {
                                        label: "CPGSD ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgmd: {
                                        label: "CPGMD ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    }
                                }
                            }
                        }
                    },
                    "obi-tobi": {
                        label: "OBI - TOBI",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            p: {
                                visible: !0,
                                label: "-",
                                path: "../../psb-piro/blocks/p",
                                options: {},
                                colors: {
                                    kasyt: {
                                        label: W("Kasyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                default: {
                                    blocksColor: "onyx",
                                    peaksFamily: "flat",
                                    peaksColor: "onyx"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bp28",
                                    offsets: !1,
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "bp28",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bp28: {
                                            label: "BT28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cp33"
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        bp16: {
                                            label: "BT16",
                                            modifiable: ["line"],
                                            supportReplacement: "bp28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .16,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cp20"
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        },
                                        "c2-bp28": {
                                            label: "".concat(W("Naro\u017cnik"), " BT28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "cp33"
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        "c2-bp16": {
                                            label: "".concat(W("Naro\u017cnik"), " BT16"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .16
                                            },
                                            peak1: {
                                                flat: "cp20"
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bp16",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bp28: {
                                            label: "BT28",
                                            support: ["bp28", "c2-bp28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        bp16: {
                                            label: "BT16",
                                            support: ["bp28", "bp16", "c2-bp28", "c2-bp16"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .16,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../psb-piro/peaks/flat",
                                colors: {
                                    kasyt: {
                                        label: W("Kasyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                materials: {
                                    cp33: {
                                        label: "CT33 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "universal.jpg",
                                                x: .45,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "universal.jpg",
                                                x: .33,
                                                y: .05
                                            },
                                            top: {
                                                src: "universal.jpg",
                                                x: .45,
                                                y: .33
                                            }
                                        },
                                        width: .45,
                                        depth: .33,
                                        height: .05,
                                        protrude: .0235
                                    },
                                    cp20: {
                                        label: "CT20 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "universal.jpg",
                                                x: .403,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "universal.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "universal.jpg",
                                                x: .403,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "psb-piro": {
                        label: "PSB - PIRO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                bone: "roma"
                            },
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            p: {
                                visible: !0,
                                label: "-",
                                path: "p",
                                options: {},
                                colors: {
                                    cyrkon: {
                                        label: W("Cyrkon")
                                    },
                                    kasyt: {
                                        label: W("Kasyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                default: {
                                    blocksColor: "onyx",
                                    peaksFamily: "flat",
                                    peaksColor: "onyx"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bp28",
                                    offsets: !1,
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "bp28",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bp28: {
                                            label: "BP28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cp33"
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        bp16: {
                                            label: "BP16",
                                            modifiable: ["line"],
                                            supportReplacement: "bp28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .16,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cp20"
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        },
                                        "c2-bp28": {
                                            label: "".concat(W("Naro\u017cnik"), " BP28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "cp33"
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        "c2-bp16": {
                                            label: "".concat(W("Naro\u017cnik"), " BP16"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .16
                                            },
                                            peak1: {
                                                flat: "cp20"
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bp16",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bp28: {
                                            label: "BP28",
                                            support: ["bp28", "c2-bp28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cp33"
                                            },
                                            peak3: {
                                                flat: "cp33"
                                            }
                                        },
                                        bp16: {
                                            label: "BP16",
                                            support: ["bp28", "bp16", "c2-bp28", "c2-bp16"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth16.jpg",
                                                        x: .16,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .16,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cp20"
                                            },
                                            peak3: {
                                                flat: "cp20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    cyrkon: {
                                        label: W("Cyrkon")
                                    },
                                    kasyt: {
                                        label: W("Kasyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                materials: {
                                    cp33: {
                                        label: "CP33 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "universal.jpg",
                                                x: .45,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "universal.jpg",
                                                x: .33,
                                                y: .05
                                            },
                                            top: {
                                                src: "universal.jpg",
                                                x: .45,
                                                y: .33
                                            }
                                        },
                                        width: .45,
                                        depth: .33,
                                        height: .05,
                                        protrude: .0235
                                    },
                                    cp20: {
                                        label: "CP20 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "universal.jpg",
                                                x: .403,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "universal.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "universal.jpg",
                                                x: .403,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "psb-atol": {
                        label: "PSB - ATOL",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            a: {
                                visible: !0,
                                label: "-",
                                path: "../../joniec-gorc_top/blocks/gt",
                                options: {},
                                colors: {
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gts38",
                                    offsets: !1,
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gts38",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gts38: {
                                            label: "GAS38",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159
                                            },
                                            peak1: {
                                                flat: "cpgts43"
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        },
                                        "c1-gts38": {
                                            label: "GAS38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gts38",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159
                                            },
                                            peak1: {
                                                flat: "cpgts43"
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        },
                                        "c2-gts38": {
                                            label: "".concat(W("Naro\u017cnik"), " GAS38"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gts38",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159,
                                                coupler: .38
                                            },
                                            peak1: {
                                                flat: "cpgts43"
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        },
                                        gtm38: {
                                            label: "GAM38",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "depth_m.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159
                                            },
                                            peak1: {
                                                flat: "cpgts43"
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        },
                                        "c1-gtm38": {
                                            label: "GAM38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gtm38",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "depth_m.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159
                                            },
                                            peak1: {
                                                flat: "cpgts43"
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        },
                                        "c2-gtm38": {
                                            label: "".concat(W("Naro\u017cnik"), " GAM38"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gtm38",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    coupler1: {
                                                        src: "depth_m.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159,
                                                coupler: .38
                                            },
                                            peak1: {
                                                flat: "cpgts43"
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gtp",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gtp: {
                                            label: "GAP",
                                            support: ["gts38", "c1-gts38", "c2-gts38", "gtm38", "c1-gtm38", "c2-gtm38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .159
                                            },
                                            peak2: {
                                                flat: "cpgtm27"
                                            },
                                            peak3: {
                                                flat: "cpgtm27"
                                            }
                                        },
                                        gtm: {
                                            label: "GAM38",
                                            support: ["gts38", "c1-gts38", "c2-gts38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .159
                                                    },
                                                    depth1: {
                                                        src: "depth_m.jpg",
                                                        x: .38,
                                                        y: .159
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .159
                                            },
                                            peak2: {
                                                flat: "cpgts43"
                                            },
                                            peak3: {
                                                flat: "cpgtm43"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../joniec-gorc_top/peaks/flat",
                                colors: {
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    }
                                },
                                materials: {
                                    cpgts43: {
                                        label: "CPGAS43 ".concat(W("daszek czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: 1,
                                                y: .18
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: 1,
                                                y: .18
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .4,
                                                y: .4
                                            }
                                        },
                                        width: .43,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgtm43: {
                                        label: "CPGAM43 ".concat(W("daszek dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: 1,
                                                y: .18
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: 1,
                                                y: .18
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .4,
                                                y: .4
                                            }
                                        },
                                        width: .5,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgtm27: {
                                        label: "CPGAM27 ".concat(W("daszek dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: 1,
                                                y: .18
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: 1,
                                                y: .18
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .4,
                                                y: .4
                                            }
                                        },
                                        width: .5,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    }
                                }
                            }
                        }
                    },
                    "psb-paso": {
                        label: "PSB - PASO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                bone: "roma"
                            },
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            p: {
                                visible: !0,
                                label: "-",
                                path: "p",
                                options: {},
                                colors: {
                                    czarny: {
                                        label: W("Czarny")
                                    }
                                },
                                default: {
                                    blocksColor: "czarny",
                                    peaksFamily: "flat",
                                    peaksColor: "czarny"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 4
                                    },
                                    autocorner: "c2-bps50",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bps50",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bps50: {
                                            label: "BPS50",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "cps50"
                                            },
                                            peak2: {
                                                flat: "cps50"
                                            },
                                            peak3: {
                                                flat: "cps50"
                                            }
                                        },
                                        "c2-bps50": {
                                            label: "".concat(W("Naro\u017cnik"), " BPS50"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "cps50"
                                            },
                                            peak2: {
                                                flat: "cps50"
                                            },
                                            peak3: {
                                                flat: "cps50"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bps50",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bps50: {
                                            label: "BPS50",
                                            support: ["bps50", "c2-bps50"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width50.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "cps50"
                                            },
                                            peak3: {
                                                flat: "cps50"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    czarny: {
                                        label: W("Czarny")
                                    }
                                },
                                materials: {
                                    cps50: {
                                        label: "CPS50 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width50.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top50.jpg",
                                                x: 1.512,
                                                y: .2
                                            }
                                        },
                                        width: .504,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "psb-promo": {
                        label: "PSB - PROMO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                bone: "roma_mega"
                            },
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            p: {
                                visible: !0,
                                label: "-",
                                path: "p",
                                options: {},
                                colors: {
                                    black: {
                                        label: W("Black")
                                    },
                                    grey: {
                                        label: W("Grey")
                                    }
                                },
                                default: {
                                    blocksColor: "grey",
                                    peaksFamily: "flat",
                                    peaksColor: "grey"
                                },
                                settings: {
                                    distance: {
                                        min: .756,
                                        default: 4
                                    },
                                    autocorner: "c2-bpr19",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bpr19",
                                        width: 1,
                                        depth: 1,
                                        height: 12
                                    },
                                    materials: {
                                        bpr19: {
                                            label: "BPR19",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .144
                                            },
                                            peak1: {
                                                flat: "cpr19"
                                            },
                                            peak2: {
                                                flat: "cpr19"
                                            },
                                            peak3: {
                                                flat: "cpr19"
                                            }
                                        },
                                        "c2-bpr19": {
                                            label: "".concat(W("Naro\u017cnik"), " BPR19"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    coupler1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .756,
                                                depth: .756,
                                                height: .144,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "cpr19"
                                            },
                                            peak2: {
                                                flat: "cpr19"
                                            },
                                            peak3: {
                                                flat: "cpr19"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bpr19",
                                        depth: 1,
                                        height: 4
                                    },
                                    materials: {
                                        bpr19: {
                                            label: "BPR19",
                                            support: ["bpr19", "c2-bpr19"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 2.268,
                                                        y: .432
                                                    },
                                                    depth1: {
                                                        src: "depth19.jpg",
                                                        x: .195,
                                                        y: .432
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .756,
                                                depth: .195,
                                                height: .144
                                            },
                                            peak2: {
                                                flat: "cpr19"
                                            },
                                            peak3: {
                                                flat: "cpr19"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    black: {
                                        label: W("Black")
                                    },
                                    grey: {
                                        label: W("Grey")
                                    }
                                },
                                materials: {
                                    cpr19: {
                                        label: "CPR19 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 2.268,
                                                y: .072
                                            },
                                            depth1: {
                                                src: "depth19.jpg",
                                                x: .195,
                                                y: .072
                                            },
                                            top: {
                                                src: "top19.jpg",
                                                x: 2.268,
                                                y: .195
                                            }
                                        },
                                        width: .756,
                                        depth: .195,
                                        height: .072,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "psb-drago": {
                        label: "PSB - DRAGO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: {
                                bone: "roma"
                            },
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            d15: {
                                visible: !0,
                                label: "BDR15",
                                path: "d15",
                                options: {},
                                colors: {
                                    nero: {
                                        label: W("Nero")
                                    },
                                    amber: {
                                        label: W("Amber")
                                    },
                                    galena: {
                                        label: W("Galena")
                                    }
                                },
                                default: {
                                    blocksColor: "galena",
                                    peaksFamily: "flat",
                                    peaksColor: "galena"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bdr15",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bdr15",
                                        width: 1,
                                        depth: 1,
                                        height: 10
                                    },
                                    materials: {
                                        bdr15: {
                                            label: "BDR15",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .155
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .155
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .155
                                            },
                                            peak1: {
                                                flat: "cdr20"
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        },
                                        "c2-bdr15": {
                                            label: "BDR15",
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .155
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .155
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .155
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .155,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "cdr20"
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bdr15",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bdr15: {
                                            label: "BDR15",
                                            support: ["bdr15", "c2-bdr15"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .155
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .155
                                                    },
                                                    depth3: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .155
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .155
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        }
                                    }
                                }
                            },
                            d31: {
                                visible: !0,
                                label: "BDR31",
                                path: "d31",
                                options: {},
                                colors: {
                                    nero: {
                                        label: W("Nero")
                                    },
                                    amber: {
                                        label: W("Amber")
                                    },
                                    galena: {
                                        label: W("Galena")
                                    }
                                },
                                default: {
                                    blocksColor: "galena",
                                    peaksFamily: "flat",
                                    peaksColor: "galena"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bdr31",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bdr31",
                                        width: 1,
                                        depth: 1,
                                        height: 5
                                    },
                                    materials: {
                                        bdr31: {
                                            label: "BDR31",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .31
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .31
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .31
                                            },
                                            peak1: {
                                                flat: "cdr20"
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        },
                                        "c2-bdr31": {
                                            label: "BDR31",
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .31
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .31
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .31
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .31,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "cdr20"
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bdr31",
                                        depth: 1,
                                        height: 1
                                    },
                                    materials: {
                                        bdr31: {
                                            label: "BDR31",
                                            support: ["bdr31", "c2-bdr31"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .31
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .31
                                                    },
                                                    depth3: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .31
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .31
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        }
                                    }
                                }
                            },
                            d15_31: {
                                visible: !0,
                                label: "BDR15/31",
                                path: "d15_31",
                                options: {},
                                colors: {
                                    nero: {
                                        label: W("Nero")
                                    },
                                    amber: {
                                        label: W("Amber")
                                    },
                                    galena: {
                                        label: W("Galena")
                                    }
                                },
                                default: {
                                    blocksColor: "galena",
                                    peaksFamily: "flat",
                                    peaksColor: "galena"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bdr15",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bdr15",
                                        width: 1,
                                        depth: 1,
                                        height: 7
                                    },
                                    materials: {
                                        bdr15: {
                                            label: "BDR15/31",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .465
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .465
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: [.155, .31]
                                            },
                                            peak1: {
                                                flat: "cdr20"
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        },
                                        "c2-bdr15": {
                                            label: "BDR15/31",
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .465
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .465
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .465
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: [.155, .31],
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "cdr20"
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bdr15",
                                        depth: 1,
                                        height: 1
                                    },
                                    materials: {
                                        bdr15: {
                                            label: "BDR15/31",
                                            support: ["bdr15", "c2-bdr15"],
                                            block: {
                                                schedule: [.403],
                                                texture: {
                                                    width1: {
                                                        src: "wall_width.jpg",
                                                        x: .806,
                                                        y: .31
                                                    },
                                                    depth1: {
                                                        src: "wall_depth1.jpg",
                                                        x: .2,
                                                        y: .31
                                                    },
                                                    depth3: {
                                                        src: "wall_depth3.jpg",
                                                        x: .2,
                                                        y: .31
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .31
                                            },
                                            peak2: {
                                                flat: "cdr20"
                                            },
                                            peak3: {
                                                flat: "cdr20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    nero: {
                                        label: W("Nero")
                                    },
                                    amber: {
                                        label: W("Amber")
                                    },
                                    galena: {
                                        label: W("Galena")
                                    }
                                },
                                materials: {
                                    cdr20: {
                                        label: "CDR20 ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: .403,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .403,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "brico-ico": {
                        label: "BRICO MARCHE - ICO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            i: {
                                visible: !0,
                                label: "-",
                                path: "i",
                                options: {},
                                colors: {
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .39,
                                        default: 5
                                    },
                                    autocorner: "c2-ico",
                                    offsets: "modular-alternately",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "ico",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        ico: {
                                            label: "ICO",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .195,
                                                        y: .19
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .39,
                                                depth: .195,
                                                height: .19
                                            },
                                            peak1: {
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        },
                                        "c2-ico": {
                                            label: "".concat(W("Naro\u017cnik"), " ICO"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    depth1: {
                                                        src: "width_1.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    depth2: {
                                                        src: "width_2.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .195,
                                                        y: .19
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .39,
                                                depth: .39,
                                                height: .19,
                                                coupler: .195
                                            },
                                            peak1: {
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "ico",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        ico: {
                                            label: "ICO",
                                            support: ["ico", "c2-ico"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width_1.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    width2: {
                                                        src: "width_2.jpg",
                                                        x: .78,
                                                        y: .38
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .195,
                                                        y: .19
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .39,
                                                depth: .195,
                                                height: .19
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    "piryt-lupany": {
                                        label: W("Piryt")
                                    },
                                    "onyx-lupany": {
                                        label: W("Onyx")
                                    }
                                },
                                materials: {
                                    cpgs: {
                                        label: "CPGS ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .27,
                                        height: .06,
                                        protrude: .02
                                    },
                                    cpgm: {
                                        label: "CPGM ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .27,
                                        height: .06,
                                        protrude: .02
                                    }
                                }
                            }
                        }
                    },
                    "brico-bico": {
                        label: "BRICO MARCHE - BICO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            b: {
                                visible: !0,
                                label: "-",
                                path: "../../merkury-beno/blocks/b",
                                options: {},
                                colors: {
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    }
                                },
                                default: {
                                    blocksColor: "marengo",
                                    peaksFamily: "flat",
                                    peaksColor: "marengo"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bico20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bico20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bico20: {
                                            label: "BICO20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbc20"
                                            },
                                            peak2: {
                                                flat: "dbc20"
                                            },
                                            peak3: {
                                                flat: "dbc20"
                                            }
                                        },
                                        bico40: {
                                            label: "BICO40",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbc40"
                                            },
                                            peak2: {
                                                flat: "dbc40"
                                            },
                                            peak3: {
                                                flat: "dbc40"
                                            }
                                        },
                                        "c2-bico20": {
                                            label: "".concat(W("Naro\u017cnik"), " BICO20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "dbc20"
                                            },
                                            peak2: {
                                                flat: "dbc20"
                                            },
                                            peak3: {
                                                flat: "dbc20"
                                            }
                                        },
                                        "c1-bico40": {
                                            label: "BICO40",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-bico40",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbc40"
                                            },
                                            peak2: {
                                                flat: "dbc40"
                                            },
                                            peak3: {
                                                flat: "dbc40"
                                            }
                                        },
                                        "c2-bico40": {
                                            label: "".concat(W("Naro\u017cnik"), " BICO40"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-bico40",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth40.jpg",
                                                        x: .403,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .403
                                            },
                                            peak1: {
                                                flat: "dbc40"
                                            },
                                            peak2: {
                                                flat: "dbc40"
                                            },
                                            peak3: {
                                                flat: "dbc40"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bico20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bico20: {
                                            label: "BICO20",
                                            support: ["bico20", "bico40", "c2-bico20", "c1-bico40", "c2-bico40"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "dbc20"
                                            },
                                            peak3: {
                                                flat: "dbc20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../merkury-beno/peaks/flat",
                                colors: {
                                    marengo: {
                                        label: W("Marengo")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    }
                                },
                                materials: {
                                    dbc20: {
                                        label: "DBC20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.209,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    dbc40: {
                                        label: "DBC40 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .06
                                            },
                                            depth1: {
                                                src: "depth40.jpg",
                                                x: .403,
                                                y: .06
                                            },
                                            top: {
                                                src: "top40.jpg",
                                                x: 1.209,
                                                y: .403
                                            }
                                        },
                                        width: .403,
                                        depth: .403,
                                        height: .06,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "brico-gorc": {
                        label: "BRICO MARCHE - GORC<sup>&reg;</sup>",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            gl: {
                                visible: !0,
                                label: "GORC<sup>&reg;</sup> <br /> GL22 / GL22+GL38",
                                path: "../../joniec-gorc/blocks/gl",
                                options: {},
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl22",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl22",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl22: {
                                            label: "GL22",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        },
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl22": {
                                            label: "".concat(W("Naro\u017cnik"), " GL22"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .22
                                            },
                                            peak1: {
                                                flat: "cpgs"
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-gl38",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gm",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gm: {
                                            label: "GM",
                                            support: ["gl22", "gl38", "c2-gl22", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .22,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .22,
                                                height: .16
                                            },
                                            peak2: {
                                                flat: "cpgs"
                                            },
                                            peak3: {
                                                flat: "cpgm"
                                            }
                                        }
                                    }
                                }
                            },
                            gl38: {
                                visible: !0,
                                label: "GORC<sup>&reg;</sup> <br /> GL38",
                                path: "../../joniec-gorc/blocks/gl",
                                options: {},
                                colors: {
                                    alaska: {
                                        label: W("Alaska")
                                    },
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    },
                                    getyt: {
                                        label: W("Getyt")
                                    },
                                    onyx: {
                                        label: W("Onyx")
                                    },
                                    piaskowy: {
                                        label: W("Piaskowy")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    },
                                    silver: {
                                        label: W("Silver")
                                    },
                                    vera: {
                                        label: W("Vera")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .38,
                                        default: 5
                                    },
                                    autocorner: "c2-gl38",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gl38",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gl38: {
                                            label: "GL38",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c1-gl38": {
                                            label: "GL38",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gl38",
                                            seating: 1,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        },
                                        "c2-gl38": {
                                            label: "".concat(W("Naro\u017cnik"), " GL38"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16,
                                                coupler: .38
                                            },
                                            peak1: {
                                                flat: "cpgsd"
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gmd",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gmd: {
                                            label: "GMD",
                                            support: ["gl38", "c1-gl38", "c2-gl38"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .38,
                                                        y: .32
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .38,
                                                        y: .16
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .38,
                                                depth: .38,
                                                height: .16
                                            },
                                            peak2: {
                                                flat: "cpgsd"
                                            },
                                            peak3: {
                                                flat: "cpgmd"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../joniec-gorc/peaks/flat",
                                colors: {
                                    "bronzyt-lupany": {
                                        label: "".concat(W("Bronzyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "czarny-lupany": {
                                        label: "".concat(W("Czarny"), " ").concat(W("\u0142upany"))
                                    },
                                    "getyt-lupany": {
                                        label: "".concat(W("Getyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "onyx-lupany": {
                                        label: "".concat(W("Onyx"), " ").concat(W("\u0142upany"))
                                    },
                                    "piryt-lupany": {
                                        label: "".concat(W("Piryt"), " ").concat(W("\u0142upany"))
                                    },
                                    "silver-lupany": {
                                        label: "".concat(W("Silver"), " ").concat(W("\u0142upany"))
                                    },
                                    "vera-lupany": {
                                        label: "".concat(W("Vera"), " ").concat(W("\u0142upany"))
                                    }
                                },
                                materials: {
                                    cpgs: {
                                        label: "CPGS ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgm: {
                                        label: "CPGM ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .27,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgsd: {
                                        label: "CPGSD ".concat(W("daszek p\u0142aski czterostronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .43,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    },
                                    cpgmd: {
                                        label: "CPGMD ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .5,
                                        depth: .43,
                                        height: .06,
                                        protrude: .025
                                    }
                                }
                            }
                        }
                    },
                    "leroy-kimo": {
                        label: "LEROY MERLIN - KIMO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            k: {
                                visible: !0,
                                label: "-",
                                path: "k",
                                options: {},
                                colors: {
                                    amber: {
                                        label: W("Amber")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    }
                                },
                                default: {
                                    blocksColor: "amber",
                                    peaksFamily: "flat",
                                    peaksColor: "amber"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bkm15",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bkm15",
                                        width: 1,
                                        depth: 1,
                                        height: 10
                                    },
                                    materials: {
                                        bkm15: {
                                            label: "BKM15",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .465
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .465
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .155
                                            },
                                            peak1: {
                                                flat: "dkm20"
                                            },
                                            peak2: {
                                                flat: "dkm20"
                                            },
                                            peak3: {
                                                flat: "dkm20"
                                            }
                                        },
                                        "c2-bkm15": {
                                            label: "".concat(W("Naro\u017cnik"), " BKM15"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .465
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .465
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .465
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .155,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "dkm20"
                                            },
                                            peak2: {
                                                flat: "dkm20"
                                            },
                                            peak3: {
                                                flat: "dkm20"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bkm15",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bkm15: {
                                            label: "BKM15",
                                            support: ["bkm15", "c2-bkm15"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.209,
                                                        y: .465
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .465
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .155
                                            },
                                            peak2: {
                                                flat: "dkm20"
                                            },
                                            peak3: {
                                                flat: "dkm20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    amber: {
                                        label: W("Amber")
                                    },
                                    nero: {
                                        label: W("Nero")
                                    }
                                },
                                materials: {
                                    dkm20: {
                                        label: "DKM20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.209,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.209,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "leroy-beskid": {
                        label: "LEROY MERLIN - BESKID",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            b: {
                                visible: !0,
                                label: "-",
                                path: "../../castorama-casto/blocks/c",
                                options: {},
                                colors: {
                                    kremowy: {
                                        label: W("Kremowy")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    }
                                },
                                default: {
                                    blocksColor: "kremowy",
                                    peaksFamily: "flat",
                                    peaksColor: "kremowy"
                                },
                                settings: {
                                    distance: {
                                        min: .403,
                                        default: 5
                                    },
                                    autocorner: "c2-bmm20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bmm20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bmm20: {
                                            label: "BMM20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbmm"
                                            },
                                            peak2: {
                                                flat: "dbmm"
                                            },
                                            peak3: {
                                                flat: "dbmm"
                                            }
                                        },
                                        bsm40: {
                                            label: "BSM40",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbsm"
                                            },
                                            peak2: {
                                                flat: "dbsm"
                                            },
                                            peak3: {
                                                flat: "dbsm"
                                            }
                                        },
                                        bbpm20: {
                                            label: "BBPM20",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width25.jpg",
                                                        x: .252,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .252,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbpm"
                                            },
                                            peak2: {
                                                flat: "dbpm"
                                            },
                                            peak3: {
                                                flat: "dbpm"
                                            }
                                        },
                                        "c2-bmm20": {
                                            label: "".concat(W("Naro\u017cnik"), " BMM20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "dbmm"
                                            },
                                            peak2: {
                                                flat: "dbmm"
                                            },
                                            peak3: {
                                                flat: "dbmm"
                                            }
                                        },
                                        "c1-bsm40": {
                                            label: "BSM40",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-bsm40",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dbsm"
                                            },
                                            peak2: {
                                                flat: "dbsm"
                                            },
                                            peak3: {
                                                flat: "dbsm"
                                            }
                                        },
                                        "c2-bsm40": {
                                            label: "".concat(W("Naro\u017cnik"), " BSM40"),
                                            modifiable: ["corner2"],
                                            modifiableReplacement: "c1-bsm40",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    coupler1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 2,
                                                    depth: 2
                                                },
                                                width: .403,
                                                depth: .403,
                                                height: .2,
                                                coupler: .403
                                            },
                                            peak1: {
                                                flat: "dbsm"
                                            },
                                            peak2: {
                                                flat: "dbsm"
                                            },
                                            peak3: {
                                                flat: "dbsm"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bmm20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bmm20: {
                                            label: "BMM20",
                                            support: ["bmm20", "bsm40", "bbpm20", "c2-bmm20", "c1-bsm40", "c2-bsm40"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .403,
                                                        y: .2
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .2
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .403,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "dbmm"
                                            },
                                            peak3: {
                                                flat: "dbmm"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../castorama-casto/peaks/flat",
                                colors: {
                                    kremowy: {
                                        label: W("Kremowy")
                                    },
                                    czarny: {
                                        label: W("Czarny")
                                    }
                                },
                                materials: {
                                    dbmm: {
                                        label: "DBMM ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width40.jpg",
                                                x: .403,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: .403,
                                                y: .2
                                            }
                                        },
                                        width: .403,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    dbsm: {
                                        label: "DBSM ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width40.jpg",
                                                x: .403,
                                                y: .06
                                            },
                                            depth1: {
                                                src: "width40.jpg",
                                                x: .403,
                                                y: .06
                                            },
                                            top: {
                                                src: "top40.jpg",
                                                x: .403,
                                                y: .403
                                            }
                                        },
                                        width: .403,
                                        depth: .403,
                                        height: .06,
                                        protrude: 0
                                    },
                                    dbpm: {
                                        label: "DBPM ".concat(W("daszek p\u0142aski")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width25.jpg",
                                                x: .252,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top25.jpg",
                                                x: .252,
                                                y: .2
                                            }
                                        },
                                        width: .252,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "leroy-merlo": {
                        label: "LEROY MERLIN - MERLO",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            m: {
                                visible: !0,
                                label: "-",
                                path: "m",
                                options: {},
                                colors: {
                                    peryd: {
                                        label: W("Peryd")
                                    },
                                    selen: {
                                        label: W("Selen")
                                    },
                                    grafit: {
                                        label: W("Czarny")
                                    }
                                },
                                default: {
                                    blocksColor: "peryd",
                                    peaksFamily: "flat",
                                    peaksColor: "peryd"
                                },
                                settings: {
                                    distance: {
                                        min: .504,
                                        default: 4
                                    },
                                    autocorner: "c2-bml20",
                                    offsets: !1,
                                    sameAlignment: !0
                                },
                                pole: {
                                    default: {
                                        material: "bml20",
                                        width: 1,
                                        depth: 1,
                                        height: 8
                                    },
                                    materials: {
                                        bml20: {
                                            label: "BML20",
                                            modifiable: ["line"],
                                            supportReplacement: "bml28",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dml20"
                                            },
                                            peak2: {
                                                flat: "dml20"
                                            },
                                            peak3: {
                                                flat: "dml20"
                                            }
                                        },
                                        bml28: {
                                            disabled: {
                                                colors: ["peryd", "selen"],
                                                material: "bml20",
                                                peaks: !0
                                            },
                                            label: "BML28",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak1: {
                                                flat: "dml28"
                                            },
                                            peak2: {
                                                flat: "dml28"
                                            },
                                            peak3: {
                                                flat: "dml28"
                                            }
                                        },
                                        "c2-bml20": {
                                            label: "".concat(W("Naro\u017cnik"), " BML20"),
                                            modifiable: ["corner1", "corner2"],
                                            supportReplacement: "c2-bml28",
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "dml20"
                                            },
                                            peak2: {
                                                flat: "dml20"
                                            },
                                            peak3: {
                                                flat: "dml20"
                                            }
                                        },
                                        "c2-bml28": {
                                            disabled: {
                                                colors: ["peryd", "selen"],
                                                material: "c2-bml20",
                                                peaks: !0
                                            },
                                            label: "".concat(W("Naro\u017cnik"), " BML28"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 0,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    coupler1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .504,
                                                depth: .504,
                                                height: .2,
                                                coupler: .28
                                            },
                                            peak1: {
                                                flat: "dml28"
                                            },
                                            peak2: {
                                                flat: "dml28"
                                            },
                                            peak3: {
                                                flat: "dml28"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "bml20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        bml20: {
                                            label: "BML20",
                                            support: ["bml20", "bml28", "c2-bml20", "c2-bml28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth20.jpg",
                                                        x: .2,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .2,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "dml20"
                                            },
                                            peak3: {
                                                flat: "dml20"
                                            }
                                        },
                                        bml28: {
                                            disabled: {
                                                colors: ["peryd", "selen"],
                                                material: "bml20",
                                                peaks: !0
                                            },
                                            label: "BML28",
                                            support: ["bml28", "c2-bml28"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: 1.512,
                                                        y: .6
                                                    },
                                                    depth1: {
                                                        src: "depth28.jpg",
                                                        x: .28,
                                                        y: .6
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .504,
                                                depth: .28,
                                                height: .2
                                            },
                                            peak2: {
                                                flat: "dml28"
                                            },
                                            peak3: {
                                                flat: "dml28"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "flat",
                                colors: {
                                    peryd: {
                                        label: W("Peryd")
                                    },
                                    selen: {
                                        label: W("Selen")
                                    },
                                    grafit: {
                                        label: W("Czarny")
                                    }
                                },
                                materials: {
                                    dml20: {
                                        label: "DML20 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth20.jpg",
                                                x: .2,
                                                y: .05
                                            },
                                            top: {
                                                src: "top20.jpg",
                                                x: 1.512,
                                                y: .2
                                            }
                                        },
                                        width: .504,
                                        depth: .2,
                                        height: .05,
                                        protrude: 0
                                    },
                                    dml28: {
                                        disabled: {
                                            colors: ["peryd", "selen"],
                                            material: "dml20",
                                            target: !0
                                        },
                                        label: "DML28 ".concat(W("daszek g\u0142adki")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "width.jpg",
                                                x: 1.512,
                                                y: .05
                                            },
                                            depth1: {
                                                src: "depth28.jpg",
                                                x: .28,
                                                y: .05
                                            },
                                            top: {
                                                src: "top28.jpg",
                                                x: 1.512,
                                                y: .28
                                            }
                                        },
                                        width: .504,
                                        depth: .28,
                                        height: .05,
                                        protrude: 0
                                    }
                                }
                            }
                        }
                    },
                    "leroy-gorc": {
                        label: "LEROY MERLIN - GORC GLL",
                        migration: !1,
                        technical: !1,
                        adds: {
                            combo: !1,
                            fencings: !1,
                            wickets: !1,
                            gates: !1,
                            panels: !1,
                            mailboxes: !1,
                            lamps: !1,
                            ledblocks: !1
                        },
                        blocks: {
                            gll: {
                                visible: !0,
                                label: "-",
                                path: "gll",
                                options: {},
                                colors: {
                                    bronzyt: {
                                        label: W("Bronzyt")
                                    },
                                    piryt: {
                                        label: W("Piryt")
                                    }
                                },
                                default: {
                                    blocksColor: "piryt",
                                    peaksFamily: "flat",
                                    peaksColor: "piryt-lupany"
                                },
                                settings: {
                                    distance: {
                                        min: .36,
                                        default: 6
                                    },
                                    autocorner: "c2-gll20",
                                    offsets: "continuous",
                                    sameAlignment: !1
                                },
                                pole: {
                                    default: {
                                        material: "gll20",
                                        width: 1,
                                        depth: 1,
                                        height: 9
                                    },
                                    materials: {
                                        gll20: {
                                            label: "GLL20",
                                            modifiable: ["line"],
                                            seating: 2,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .288
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .144
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .2,
                                                height: .144
                                            },
                                            peak1: {
                                                flat: "cpgc"
                                            },
                                            peak2: {
                                                flat: "cpgc"
                                            },
                                            peak3: {
                                                flat: "cpgc"
                                            }
                                        },
                                        gld36: {
                                            label: "GLD36",
                                            modifiable: ["line"],
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .288
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .36,
                                                        y: .144
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .144
                                            },
                                            peak1: {
                                                flat: "cpgcd"
                                            },
                                            peak2: {
                                                flat: "cpgcd"
                                            },
                                            peak3: {
                                                flat: "cpgcd"
                                            }
                                        },
                                        "c2-gll20": {
                                            label: "".concat(W("Naro\u017cnik"), " GLL20"),
                                            modifiable: ["corner1", "corner2"],
                                            seating: 2,
                                            block: {
                                                type: "corner",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .288
                                                    },
                                                    depth1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .288
                                                    },
                                                    coupler1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .144
                                                    }
                                                },
                                                resizeable: {
                                                    width: !0,
                                                    depth: !0,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .144,
                                                coupler: .2
                                            },
                                            peak1: {
                                                flat: "cpgc"
                                            },
                                            peak2: {
                                                flat: "cpgc"
                                            },
                                            peak3: {
                                                flat: "cpgc"
                                            }
                                        },
                                        "c1-gld36": {
                                            label: "GLD36",
                                            modifiable: ["corner1"],
                                            modifiableReplacement: "c2-gll20",
                                            seating: 0,
                                            block: {
                                                type: "cuboid",
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .288
                                                    },
                                                    depth1: {
                                                        src: "block.jpg",
                                                        x: .36,
                                                        y: .144
                                                    }
                                                },
                                                resizeable: {
                                                    width: !1,
                                                    depth: !1,
                                                    height: !0
                                                },
                                                minimum: {
                                                    width: 1,
                                                    depth: 1
                                                },
                                                width: .36,
                                                depth: .36,
                                                height: .144
                                            },
                                            peak1: {
                                                flat: "cpgcd"
                                            },
                                            peak2: {
                                                flat: "cpgcd"
                                            },
                                            peak3: {
                                                flat: "cpgcd"
                                            }
                                        }
                                    }
                                },
                                wall: {
                                    default: {
                                        material: "gml20",
                                        depth: 1,
                                        height: 2
                                    },
                                    materials: {
                                        gml20: {
                                            label: "GML20",
                                            support: ["gll20", "gld36", "c2-gll20", "c1-gld36"],
                                            block: {
                                                texture: {
                                                    width1: {
                                                        src: "width.jpg",
                                                        x: .36,
                                                        y: .288
                                                    },
                                                    depth1: {
                                                        src: "depth.jpg",
                                                        x: .2,
                                                        y: .144
                                                    }
                                                },
                                                resizeable: {
                                                    depth: !1,
                                                    height: !0
                                                },
                                                width: .36,
                                                depth: .2,
                                                height: .144
                                            },
                                            peak2: {
                                                flat: "cpgc"
                                            },
                                            peak3: {
                                                flat: "cpgc"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        peaks: {
                            flat: {
                                label: W("Daszki p\u0142askie"),
                                path: "../../joniec-gorc/peaks/flat",
                                colors: {
                                    "bronzyt-lupany": {
                                        label: "".concat(W("Bronzyt"), " ").concat(W("\u0142upany"))
                                    },
                                    "piryt-lupany": {
                                        label: "".concat(W("Piryt"), " ").concat(W("\u0142upany"))
                                    }
                                },
                                materials: {
                                    cpgc: {
                                        label: "CPGC ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat2",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .42,
                                        depth: .27,
                                        height: .06,
                                        protrude: .03
                                    },
                                    cpgcd: {
                                        label: "CPGCD ".concat(W("daszek p\u0142aski dwustronnie \u0142upany")),
                                        type: "flat4",
                                        texture: {
                                            width1: {
                                                src: "side.jpg",
                                                x: .45,
                                                y: .15
                                            },
                                            depth1: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            },
                                            top: {
                                                src: "top.jpg",
                                                x: .6,
                                                y: .6
                                            }
                                        },
                                        width: .42,
                                        depth: .42,
                                        height: .06,
                                        protrude: .03
                                    }
                                }
                            }
                        }
                    }
                },
                migrations: {
                    roma: {
                        pole: {
                            _504_20: {
                                "joniec-roma_classic": ["brsm", "brmm"],
                                "joniec-roma_diamond": ["rd20"],
                                "joniec-roma_horizon": ["bh20"],
                                "joniec-roma_perfect": ["rp20"]
                            },
                            _504_28: {
                                "joniec-roma_classic": ["brdm"],
                                "joniec-roma_diamond": ["rd20"],
                                "joniec-roma_horizon": ["bh28"],
                                "joniec-roma_perfect": ["rp28"]
                            },
                            C2_504_20: {
                                "joniec-roma_classic": ["c2-brsm"],
                                "joniec-roma_diamond": ["c2-rd20"],
                                "joniec-roma_horizon": ["c2-bh20"],
                                "joniec-roma_perfect": ["c2-rp20"]
                            },
                            C2_504_28: {
                                "joniec-roma_classic": ["c2-brdm", "c1-brdm"],
                                "joniec-roma_diamond": ["c2-rd20"],
                                "joniec-roma_horizon": ["c2-bh28"],
                                "joniec-roma_perfect": ["c2-rp28"]
                            }
                        },
                        wall: {
                            _504_20: {
                                "joniec-roma_classic": ["brsm"],
                                "joniec-roma_diamond": ["rd20"],
                                "joniec-roma_horizon": ["bh20"],
                                "joniec-roma_perfect": ["rp20"]
                            },
                            _504_28: {
                                "joniec-roma_classic": ["brdm"],
                                "joniec-roma_diamond": ["rd20"],
                                "joniec-roma_horizon": ["bh28"],
                                "joniec-roma_perfect": ["rp28"]
                            }
                        }
                    }
                },
                combo: {
                    sea_tide: {
                        label: "Sea & Tide",
                        colors: Je().default,
                        elements: {
                            sea_down: {
                                material: "sea",
                                width: 1.008,
                                depth: .1,
                                height: .1
                            },
                            sea_up: {
                                material: "sea",
                                width: 1.008,
                                depth: .1,
                                height: .1
                            },
                            sea_left: {
                                material: "sea",
                                width: .1,
                                depth: .1,
                                height: 1.008
                            },
                            sea_right: {
                                material: "sea",
                                width: .1,
                                depth: .1,
                                height: 1.008
                            },
                            tide_down: {
                                material: "tide",
                                width: .504,
                                depth: .1,
                                height: .1
                            },
                            tide_up: {
                                material: "tide",
                                width: .504,
                                depth: .1,
                                height: .1
                            },
                            tide_left: {
                                material: "tide",
                                width: .1,
                                depth: .1,
                                height: .504
                            },
                            tide_right: {
                                material: "tide",
                                width: .1,
                                depth: .1,
                                height: .504
                            },
                            roof: {
                                material: "roof",
                                width: .504,
                                depth: .14,
                                height: .05
                            }
                        },
                        default: {
                            color: "grafit"
                        },
                        variants: {
                            "roma/sea_tide_horizontal_roof": {
                                label: "Sea & Tide - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["tide_up", "sea_up", "sea_up", "tide_up"]],
                                        roof: ["roof"]
                                    },
                                    _252: {
                                        destination: 2.52,
                                        offset: [0, 0],
                                        structure: [["sea_down", "sea_down", "tide_down"], ["tide_up", "sea_up", "sea_up"]],
                                        roof: ["roof"]
                                    },
                                    _201: {
                                        destination: 2.016,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["tide_up", "sea_up", "tide_up"]],
                                        roof: ["roof"]
                                    },
                                    _151: {
                                        destination: 1.512,
                                        offset: [0, 0],
                                        structure: [["sea_down", "tide_down"], ["tide_up", "sea_up"]],
                                        roof: ["roof"]
                                    },
                                    _100: {
                                        destination: 1.008,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["tide_up"]],
                                        roof: ["roof"]
                                    },
                                    _50: {
                                        destination: .504,
                                        offset: [0, 0],
                                        structure: [["tide_down"], ["tide_up"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma/sea_tide_horizontal": {
                                label: "Sea & Tide - ".concat(W("Poziomo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["tide_up", "sea_up", "sea_up", "tide_up"]]
                                    },
                                    _252: {
                                        destination: 2.52,
                                        offset: [0, 0],
                                        structure: [["sea_down", "sea_down", "tide_down"], ["tide_up", "sea_up", "sea_up"]]
                                    },
                                    _201: {
                                        destination: 2.016,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["tide_up", "sea_up", "tide_up"]]
                                    },
                                    _151: {
                                        destination: 1.512,
                                        offset: [0, 0],
                                        structure: [["sea_down", "tide_down"], ["tide_up", "sea_up"]]
                                    },
                                    _100: {
                                        destination: 1.008,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["tide_up"]]
                                    },
                                    _50: {
                                        destination: .504,
                                        offset: [0, 0],
                                        structure: [["tide_down"], ["tide_up"]]
                                    }
                                }
                            },
                            "roma/sea_horizontal_roof": {
                                label: "Sea - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _100: {
                                        destination: 1.008,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["sea_up"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma/sea_horizontal": {
                                label: "Sea - ".concat(W("Poziomo")),
                                destinations: {
                                    _100: {
                                        destination: 1.008,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["sea_up"]]
                                    }
                                }
                            },
                            "roma/tide_horizontal_roof": {
                                label: "Tide - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _50: {
                                        destination: .504,
                                        offset: [0, 0],
                                        structure: [["tide_down"], ["tide_up"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma/tide_horizontal": {
                                label: "Tide - ".concat(W("Poziomo")),
                                destinations: {
                                    _50: {
                                        destination: .504,
                                        offset: [0, 0],
                                        structure: [["tide_down"], ["tide_up"]]
                                    }
                                }
                            },
                            "roma/sea_vertical_roof": {
                                label: "Sea - ".concat(W("Pionowo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["sea_left", "sea_right"]],
                                        roof: ["roof"]
                                    },
                                    _201: {
                                        destination: 2.016,
                                        offset: [.008],
                                        structure: [["sea_left", "sea_right"]],
                                        roof: ["roof"]
                                    },
                                    _100: {
                                        destination: 1.008,
                                        offset: [.004],
                                        structure: [["sea_left", "sea_right"]],
                                        roof: ["roof"]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["sea_left", "sea_right"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma/sea_vertical": {
                                label: "Sea - ".concat(W("Pionowo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["sea_left", "sea_right"]]
                                    },
                                    _201: {
                                        destination: 2.016,
                                        offset: [.008],
                                        structure: [["sea_left", "sea_right"]]
                                    },
                                    _100: {
                                        destination: 1.008,
                                        offset: [.004],
                                        structure: [["sea_left", "sea_right"]]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["sea_left", "sea_right"]]
                                    }
                                }
                            },
                            "roma/tide_vertical_roof": {
                                label: "Tide - ".concat(W("Pionowo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["tide_left", "tide_right"]],
                                        roof: ["roof"]
                                    },
                                    _201: {
                                        destination: 2.016,
                                        offset: [.008],
                                        structure: [["tide_left", "tide_right"]],
                                        roof: ["roof"]
                                    },
                                    _100: {
                                        destination: 1.008,
                                        offset: [.004],
                                        structure: [["tide_left", "tide_right"]],
                                        roof: ["roof"]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["tide_left", "tide_right"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma/tide_vertical": {
                                label: "Tide - ".concat(W("Pionowo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["tide_left", "tide_right"]]
                                    },
                                    _201: {
                                        destination: 2.016,
                                        offset: [.008],
                                        structure: [["tide_left", "tide_right"]]
                                    },
                                    _100: {
                                        destination: 1.008,
                                        offset: [.004],
                                        structure: [["tide_left", "tide_right"]]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["tide_left", "tide_right"]]
                                    }
                                }
                            },
                            "roma_mega/sea_tide_horizontal_roof": {
                                label: "Sea & Tide - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [0, 0],
                                        structure: [["tide_down", "sea_down", "sea_down", "tide_down"], ["sea_up", "sea_up", "sea_up"]],
                                        roof: ["roof"]
                                    },
                                    _151: {
                                        destination: 1.512,
                                        offset: [0, 0],
                                        structure: [["sea_down", "tide_down"], ["tide_up", "sea_up"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma_mega/sea_tide_horizontal": {
                                label: "Sea & Tide - ".concat(W("Poziomo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [0, 0],
                                        structure: [["tide_down", "sea_down", "sea_down", "tide_down"], ["sea_up", "sea_up", "sea_up"]]
                                    },
                                    _151: {
                                        destination: 1.512,
                                        offset: [0, 0],
                                        structure: [["sea_down", "tide_down"], ["tide_up", "sea_up"]]
                                    }
                                }
                            },
                            "roma_mega/sea_horizontal_roof": {
                                label: "Sea - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["sea_up"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma_mega/sea_horizontal": {
                                label: "Sea - ".concat(W("Poziomo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [0, 0],
                                        structure: [["sea_down"], ["sea_up"]]
                                    }
                                }
                            },
                            "roma_mega/tide_horizontal_roof": {
                                label: "Tide - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _151: {
                                        destination: 1.512,
                                        offset: [0, 0],
                                        structure: [["tide_down"], ["tide_up"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma_mega/tide_horizontal": {
                                label: "Tide - ".concat(W("Poziomo")),
                                destinations: {
                                    _151: {
                                        destination: 1.512,
                                        offset: [0, 0],
                                        structure: [["tide_down"], ["tide_up"]]
                                    }
                                }
                            },
                            "roma_mega/sea_vertical_roof": {
                                label: "Sea - ".concat(W("Pionowo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["sea_left", "sea_right"]],
                                        roof: ["roof"]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["sea_left", "sea_right"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma_mega/sea_vertical": {
                                label: "Sea - ".concat(W("Pionowo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["sea_left", "sea_right"]]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["sea_left", "sea_right"]]
                                    }
                                }
                            },
                            "roma_mega/tide_vertical_roof": {
                                label: "Tide - ".concat(W("Pionowo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["tide_left", "tide_right"]],
                                        roof: ["roof"]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["tide_left", "tide_right"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma_mega/tide_vertical": {
                                label: "Tide - ".concat(W("Pionowo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012],
                                        structure: [["tide_left", "tide_right"]]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0],
                                        structure: [["tide_left", "tide_right"]]
                                    }
                                }
                            },
                            "roma_mega/tide_roof_vertical": {
                                label: "Tide & ".concat(W("Daszek"), " - ").concat(W("Pionowo")),
                                destinations: {
                                    _302: {
                                        destination: 3.024,
                                        offset: [.012, 0],
                                        structure: [["tide_left", "tide_right"], ["roof"]]
                                    },
                                    _10: {
                                        destination: .1,
                                        offset: [0, 0],
                                        structure: [["tide_left", "tide_right"], ["roof"]]
                                    }
                                }
                            }
                        }
                    },
                    bone: {
                        label: "Bone",
                        colors: Je().default,
                        elements: {
                            bone_down: {
                                material: "bone",
                                width: .504,
                                depth: .1,
                                height: .144
                            },
                            roof: {
                                material: "roof",
                                width: .504,
                                depth: .14,
                                height: .05
                            }
                        },
                        default: {
                            color: "grafit"
                        },
                        variants: {
                            "roma/bone_horizontal_roof": {
                                label: "Bone - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _201: {
                                        destination: 2.016,
                                        offset: [0],
                                        structure: [["bone_down"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma/bone_horizontal": {
                                label: "Bone - ".concat(W("Poziomo")),
                                destinations: {
                                    _201: {
                                        destination: 2.016,
                                        offset: [0],
                                        structure: [["bone_down"]]
                                    }
                                }
                            },
                            "roma_mega/bone_horizontal_roof": {
                                label: "Bone - ".concat(W("Poziomo"), " + ").concat(W("Daszek")),
                                destinations: {
                                    _151: {
                                        destination: 1.512,
                                        offset: [0],
                                        structure: [["bone_down"]],
                                        roof: ["roof"]
                                    }
                                }
                            },
                            "roma_mega/bone_horizontal": {
                                label: "Bone - ".concat(W("Poziomo")),
                                destinations: {
                                    _151: {
                                        destination: 1.512,
                                        offset: [0],
                                        structure: [["bone_down"]]
                                    }
                                }
                            }
                        }
                    }
                },
                fencings: {
                    metal: {
                        label: W("Stalowe"),
                        systems: {
                            vero: {
                                label: "VERO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "translucent",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .02,
                                        depth: .075,
                                        space: [.0148, .0329]
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .08,
                                            depth: .02,
                                            structure: {
                                                size: .0793,
                                                space: null,
                                                angle: 30
                                            }
                                        }
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    translucent: {
                                        label: W("Przezierny"),
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .0597
                                                }
                                            }
                                        }
                                    },
                                    opaque: {
                                        label: W("Nieprzezierny"),
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: -.0098
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            optima: {
                                label: "OPTIMA",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "optima20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .02,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .08,
                                            depth: .02,
                                            structure: {
                                                size: .08,
                                                space: null,
                                                angle: 0
                                            }
                                        }
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    optima20: {
                                        label: "Optima 20",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .02
                                                }
                                            }
                                        }
                                    },
                                    optima30: {
                                        label: "Optima 30",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .03
                                                }
                                            }
                                        }
                                    },
                                    optima40: {
                                        label: "Optima 40",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .04
                                                }
                                            }
                                        }
                                    },
                                    optima50: {
                                        label: "Optima 50",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .05
                                                }
                                            }
                                        }
                                    },
                                    optima60: {
                                        label: "Optima 60",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .06
                                                }
                                            }
                                        }
                                    },
                                    optima70: {
                                        label: "Optima 70",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .07
                                                }
                                            }
                                        }
                                    },
                                    optima80: {
                                        label: "Optima 80",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .08
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            medio: {
                                label: "MEDIO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "medio20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .02,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .16,
                                            depth: .02,
                                            structure: {
                                                size: .16,
                                                space: null,
                                                angle: 0
                                            }
                                        }
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    medio20: {
                                        label: "Medio 20",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .02
                                                }
                                            }
                                        }
                                    },
                                    medio30: {
                                        label: "Medio 30",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .03
                                                }
                                            }
                                        }
                                    },
                                    medio40: {
                                        label: "Medio 40",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .04
                                                }
                                            }
                                        }
                                    },
                                    medio50: {
                                        label: "Medio 50",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .05
                                                }
                                            }
                                        }
                                    },
                                    medio60: {
                                        label: "Medio 60",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .06
                                                }
                                            }
                                        }
                                    },
                                    medio70: {
                                        label: "Medio 70",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .07
                                                }
                                            }
                                        }
                                    },
                                    medio80: {
                                        label: "Medio 80",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .08
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            largo: {
                                label: "LARGO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "largo20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .02,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .2,
                                            depth: .02,
                                            structure: {
                                                size: .2,
                                                space: null,
                                                angle: 0
                                            }
                                        }
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    largo20: {
                                        label: "Largo 20",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .02
                                                }
                                            }
                                        }
                                    },
                                    largo30: {
                                        label: "Largo 30",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .03
                                                }
                                            }
                                        }
                                    },
                                    largo40: {
                                        label: "Largo 40",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .04
                                                }
                                            }
                                        }
                                    },
                                    largo50: {
                                        label: "Largo 50",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .05
                                                }
                                            }
                                        }
                                    },
                                    largo60: {
                                        label: "Largo 60",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .06
                                                }
                                            }
                                        }
                                    },
                                    largo70: {
                                        label: "Largo 70",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .07
                                                }
                                            }
                                        }
                                    },
                                    largo80: {
                                        label: "Largo 80",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .08
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            gradio: {
                                label: "GRADIO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "gradio20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .02,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    panels: {
                                        mode: "last",
                                        count: 3,
                                        variant: {
                                            0: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: null,
                                                    angle: 0
                                                }
                                            },
                                            1: {
                                                size: .16,
                                                depth: .02,
                                                structure: {
                                                    size: .16,
                                                    space: null,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    gradio20: {
                                        label: "Gradio 20",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio30: {
                                        label: "Gradio 30",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio40: {
                                        label: "Gradio 40",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio50: {
                                        label: "Gradio 50",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio60: {
                                        label: "Gradio 60",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio70: {
                                        label: "Gradio 70",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio80: {
                                        label: "Gradio 80",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            tesso: {
                                label: "TESSO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "tesso20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .02,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    panels: {
                                        mode: "continuous",
                                        end: !1,
                                        variant: {
                                            0: {
                                                size: .16,
                                                depth: .02,
                                                structure: {
                                                    size: .16,
                                                    space: null,
                                                    angle: 0
                                                }
                                            },
                                            1: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: null,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    tesso20: {
                                        label: "Tesso 20",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso30: {
                                        label: "Tesso 30",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso40: {
                                        label: "Tesso 40",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso50: {
                                        label: "Tesso 50",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso60: {
                                        label: "Tesso 60",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso70: {
                                        label: "Tesso 70",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso80: {
                                        label: "Tesso 80",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            palisade: {
                                label: "PALISADA",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "straight",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    spaceable: !1,
                                    customizable: !1,
                                    type: "vertical",
                                    bracket1: {
                                        size: .04,
                                        depth: .08
                                    },
                                    joiners: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    straight: {
                                        label: "Prosta",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .06,
                                                depth: .04,
                                                structure: {
                                                    size: .06,
                                                    space: .06,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    aluminium: {
                        label: W("Aluminiowe"),
                        systems: {
                            vertical: {
                                label: "VERTICAL",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "vertical",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "vertical",
                                    slats: {
                                        size: .04,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    vertical: {
                                        label: "Vertical",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            horizontal: {
                                label: "HORIZONTAL",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "horizontal150d",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: Qe().customizables.default,
                                    type: "horizontal",
                                    slats: {
                                        size: .04,
                                        depth: .024,
                                        space: [0, 0]
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    horizontal80: {
                                        label: "Horizontal 80",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: .08,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal100: {
                                        label: "Horizontal 100",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .1,
                                                depth: .02,
                                                structure: {
                                                    size: .1,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal120: {
                                        label: "Horizontal 120",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .12,
                                                depth: .02,
                                                structure: {
                                                    size: .12,
                                                    space: .06,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal150: {
                                        label: "Horizontal 150",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .15,
                                                depth: .02,
                                                structure: {
                                                    size: .15,
                                                    space: .02,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal150d: {
                                        label: "Horizontal 150D",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .15,
                                                depth: .02,
                                                structure: {
                                                    size: .15,
                                                    space: .02,
                                                    angle: 0
                                                }
                                            },
                                            material: Qe().materials.second
                                        }
                                    },
                                    horizontal200: {
                                        label: "Horizontal 200",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .2,
                                                depth: .02,
                                                structure: {
                                                    size: .2,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal200d: {
                                        label: "Horizontal 200D",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .2,
                                                depth: .02,
                                                structure: {
                                                    size: .2,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            },
                                            material: Qe().materials.second
                                        }
                                    },
                                    horizontal200_20: {
                                        label: "Horizontal 200/20",
                                        panels: {
                                            mode: "continuous",
                                            end: 0,
                                            variant: {
                                                0: {
                                                    size: .2,
                                                    depth: .02,
                                                    structure: {
                                                        size: .2,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                1: {
                                                    size: .02,
                                                    depth: .02,
                                                    structure: {
                                                        size: .02,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    horizontal150_40: {
                                        label: "Horizontal 150/40",
                                        panels: {
                                            mode: "continuous",
                                            end: 0,
                                            variant: {
                                                0: {
                                                    size: .15,
                                                    depth: .02,
                                                    structure: {
                                                        size: .15,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                1: {
                                                    size: .04,
                                                    depth: .02,
                                                    structure: {
                                                        size: .04,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    horizontal100_40_20: {
                                        label: "Horizontal 100/40/20",
                                        panels: {
                                            mode: "continuous",
                                            end: 0,
                                            variant: {
                                                0: {
                                                    size: .1,
                                                    depth: .02,
                                                    structure: {
                                                        size: .1,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                1: {
                                                    size: .02,
                                                    depth: .02,
                                                    structure: {
                                                        size: .02,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                2: {
                                                    size: .04,
                                                    depth: .02,
                                                    structure: {
                                                        size: .04,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            secret: {
                                label: "SECRET",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "secret",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    slats: {
                                        size: .04,
                                        depth: .04,
                                        space: [0, 0]
                                    },
                                    joiners: {
                                        interval: 2.8,
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    secret: {
                                        label: "Secret",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .1,
                                                depth: .02,
                                                structure: {
                                                    size: .09,
                                                    space: -.01,
                                                    angle: 10
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            palisade: {
                                label: "PALISADA",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "straight",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        maxHeight: 2.2
                                    },
                                    spaceable: !1,
                                    customizable: !1,
                                    type: "vertical",
                                    bracket1: {
                                        size: .04,
                                        depth: .08
                                    },
                                    joiners: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    straight: {
                                        label: "Prosta",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .06,
                                                depth: .06,
                                                structure: {
                                                    size: .06,
                                                    space: .06,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    slant: {
                                        label: "Sko\u015bna",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .08,
                                                depth: .03,
                                                structure: {
                                                    size: .08,
                                                    space: .06,
                                                    angle: 45
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                wickets: {
                    metal: {
                        label: W("Stalowe"),
                        systems: {
                            vero: {
                                label: "VERO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "translucent",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .06,
                                            depth: .06
                                        },
                                        right: {
                                            size: .06,
                                            depth: .06
                                        },
                                        top: {
                                            space: .005
                                        },
                                        bottom: {
                                            space: .005
                                        }
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .08,
                                            depth: .02,
                                            structure: {
                                                size: .0793,
                                                space: null,
                                                angle: 30
                                            }
                                        }
                                    },
                                    handle: "standard",
                                    thread: {
                                        width: .035,
                                        height: .285,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    translucent: {
                                        label: W("Przezierny"),
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .0597
                                                }
                                            }
                                        }
                                    },
                                    opaque: {
                                        label: W("Nieprzezierny"),
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: -.0098
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            optima: {
                                label: "OPTIMA",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "optima20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .06,
                                            depth: .06
                                        },
                                        right: {
                                            size: .06,
                                            depth: .06
                                        }
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .08,
                                            depth: .02,
                                            structure: {
                                                size: .08,
                                                space: null,
                                                angle: 0
                                            }
                                        }
                                    },
                                    handle: "standard",
                                    thread: {
                                        width: .035,
                                        height: .285,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    optima20: {
                                        label: "Optima 20",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .02
                                                }
                                            }
                                        }
                                    },
                                    optima30: {
                                        label: "Optima 30",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .03
                                                }
                                            }
                                        }
                                    },
                                    optima40: {
                                        label: "Optima 40",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .04
                                                }
                                            }
                                        }
                                    },
                                    optima50: {
                                        label: "Optima 50",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .05
                                                }
                                            }
                                        }
                                    },
                                    optima60: {
                                        label: "Optima 60",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .06
                                                }
                                            }
                                        }
                                    },
                                    optima70: {
                                        label: "Optima 70",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .07
                                                }
                                            }
                                        }
                                    },
                                    optima80: {
                                        label: "Optima 80",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .08
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            medio: {
                                label: "MEDIO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "medio20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .06,
                                            depth: .06
                                        },
                                        right: {
                                            size: .06,
                                            depth: .06
                                        }
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .16,
                                            depth: .02,
                                            structure: {
                                                size: .16,
                                                space: null,
                                                angle: 0
                                            }
                                        }
                                    },
                                    handle: "standard",
                                    thread: {
                                        width: .035,
                                        height: .285,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    medio20: {
                                        label: "Medio 20",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .02
                                                }
                                            }
                                        }
                                    },
                                    medio30: {
                                        label: "Medio 30",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .03
                                                }
                                            }
                                        }
                                    },
                                    medio40: {
                                        label: "Medio 40",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .04
                                                }
                                            }
                                        }
                                    },
                                    medio50: {
                                        label: "Medio 50",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .05
                                                }
                                            }
                                        }
                                    },
                                    medio60: {
                                        label: "Medio 60",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .06
                                                }
                                            }
                                        }
                                    },
                                    medio70: {
                                        label: "Medio 70",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .07
                                                }
                                            }
                                        }
                                    },
                                    medio80: {
                                        label: "Medio 80",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .08
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            largo: {
                                label: "LARGO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "largo20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .06,
                                            depth: .06
                                        },
                                        right: {
                                            size: .06,
                                            depth: .06
                                        }
                                    },
                                    panels: {
                                        mode: "simple",
                                        variant: {
                                            size: .2,
                                            depth: .02,
                                            structure: {
                                                size: .2,
                                                space: null,
                                                angle: 0
                                            }
                                        }
                                    },
                                    handle: "standard",
                                    thread: {
                                        width: .035,
                                        height: .285,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    largo20: {
                                        label: "Largo 20",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .02
                                                }
                                            }
                                        }
                                    },
                                    largo30: {
                                        label: "Largo 30",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .03
                                                }
                                            }
                                        }
                                    },
                                    largo40: {
                                        label: "Largo 40",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .04
                                                }
                                            }
                                        }
                                    },
                                    largo50: {
                                        label: "Largo 50",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .05
                                                }
                                            }
                                        }
                                    },
                                    largo60: {
                                        label: "Largo 60",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .06
                                                }
                                            }
                                        }
                                    },
                                    largo70: {
                                        label: "Largo 70",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .07
                                                }
                                            }
                                        }
                                    },
                                    largo80: {
                                        label: "Largo 80",
                                        panels: {
                                            variant: {
                                                structure: {
                                                    space: .08
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            gradio: {
                                label: "GRADIO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "gradio20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .06,
                                            depth: .06
                                        },
                                        right: {
                                            size: .06,
                                            depth: .06
                                        }
                                    },
                                    panels: {
                                        mode: "last",
                                        count: 4,
                                        variant: {
                                            0: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: null,
                                                    angle: 0
                                                }
                                            },
                                            1: {
                                                size: .16,
                                                depth: .02,
                                                structure: {
                                                    size: .16,
                                                    space: null,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    handle: "standard",
                                    thread: {
                                        width: .035,
                                        height: .285,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    gradio20: {
                                        label: "Gradio 20",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio30: {
                                        label: "Gradio 30",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio40: {
                                        label: "Gradio 40",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio50: {
                                        label: "Gradio 50",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio60: {
                                        label: "Gradio 60",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio70: {
                                        label: "Gradio 70",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    gradio80: {
                                        label: "Gradio 80",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            tesso: {
                                label: "TESSO",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "tesso20",
                                    color: "ral7016"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .06,
                                            depth: .06
                                        },
                                        right: {
                                            size: .06,
                                            depth: .06
                                        }
                                    },
                                    panels: {
                                        mode: "continuous",
                                        end: !1,
                                        variant: {
                                            0: {
                                                size: .16,
                                                depth: .02,
                                                structure: {
                                                    size: .16,
                                                    space: null,
                                                    angle: 0
                                                }
                                            },
                                            1: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: null,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    handle: "standard",
                                    thread: {
                                        width: .035,
                                        height: .285,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    tesso20: {
                                        label: "Tesso 20",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .02
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso30: {
                                        label: "Tesso 30",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .03
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso40: {
                                        label: "Tesso 40",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .04
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso50: {
                                        label: "Tesso 50",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .05
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso60: {
                                        label: "Tesso 60",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .06
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso70: {
                                        label: "Tesso 70",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .07
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    tesso80: {
                                        label: "Tesso 80",
                                        panels: {
                                            variant: {
                                                0: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                },
                                                1: {
                                                    structure: {
                                                        space: .08
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            palisade: {
                                label: "PALISADA",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "straight",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "vertical",
                                    frame: {
                                        left: {
                                            size: .075,
                                            depth: .075
                                        },
                                        right: {
                                            size: .075,
                                            depth: .075
                                        }
                                    },
                                    bracket1: {
                                        size: .04,
                                        depth: .02,
                                        position: {
                                            x: 0,
                                            y: 0,
                                            z: .02
                                        }
                                    },
                                    bracket2: {
                                        size: .04,
                                        depth: .02,
                                        position: {
                                            x: 0,
                                            y: .2,
                                            z: .02
                                        }
                                    },
                                    handle: "alu",
                                    thread: {
                                        width: .035,
                                        height: !1,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    straight: {
                                        label: "Prosta",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .06,
                                                depth: .04,
                                                structure: {
                                                    size: .06,
                                                    space: .06,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    aluminium: {
                        label: W("Aluminiowe"),
                        systems: {
                            vertical: {
                                label: "VERTICAL",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "vertical",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "vertical",
                                    frame: {
                                        left: {
                                            size: .075,
                                            depth: .075
                                        },
                                        right: {
                                            size: .075,
                                            depth: .075
                                        },
                                        top: {
                                            size: .075,
                                            depth: .075
                                        },
                                        bottom: {
                                            size: .075,
                                            depth: .075
                                        }
                                    },
                                    slats: {
                                        top: {
                                            size: .02,
                                            depth: .02
                                        },
                                        bottom: {
                                            size: .02,
                                            depth: .02
                                        }
                                    },
                                    handle: "alu",
                                    thread: {
                                        width: .035,
                                        height: !1,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    vertical: {
                                        label: "Vertical",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            horizontal: {
                                label: "HORIZONTAL",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "horizontal150d",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: Qe().customizables.default,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .075,
                                            depth: .075
                                        },
                                        right: {
                                            size: .075,
                                            depth: .075
                                        },
                                        top: {
                                            size: .075,
                                            depth: .075
                                        },
                                        bottom: {
                                            size: .075,
                                            depth: .075
                                        }
                                    },
                                    slats: {
                                        top: {
                                            size: .02,
                                            depth: .02,
                                            space: .02
                                        },
                                        bottom: {
                                            size: .02,
                                            depth: .02,
                                            space: .02
                                        }
                                    },
                                    handle: "alu",
                                    thread: {
                                        width: .035,
                                        height: !1,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    horizontal80: {
                                        label: "Horizontal 80",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .08,
                                                depth: .02,
                                                structure: {
                                                    size: .08,
                                                    space: .08,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal100: {
                                        label: "Horizontal 100",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .1,
                                                depth: .02,
                                                structure: {
                                                    size: .1,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal120: {
                                        label: "Horizontal 120",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .12,
                                                depth: .02,
                                                structure: {
                                                    size: .12,
                                                    space: .06,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal150: {
                                        label: "Horizontal 150",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .15,
                                                depth: .02,
                                                structure: {
                                                    size: .15,
                                                    space: .02,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal150d: {
                                        label: "Horizontal 150D",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .15,
                                                depth: .02,
                                                structure: {
                                                    size: .15,
                                                    space: .02,
                                                    angle: 0
                                                }
                                            },
                                            material: Qe().materials.second
                                        }
                                    },
                                    horizontal200: {
                                        label: "Horizontal 200",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .2,
                                                depth: .02,
                                                structure: {
                                                    size: .2,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    horizontal200d: {
                                        label: "Horizontal 200D",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .2,
                                                depth: .02,
                                                structure: {
                                                    size: .2,
                                                    space: .04,
                                                    angle: 0
                                                }
                                            },
                                            material: Qe().materials.second
                                        }
                                    },
                                    horizontal200_20: {
                                        label: "Horizontal 200/20",
                                        panels: {
                                            mode: "continuous",
                                            end: 0,
                                            variant: {
                                                0: {
                                                    size: .2,
                                                    depth: .02,
                                                    structure: {
                                                        size: .2,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                1: {
                                                    size: .02,
                                                    depth: .02,
                                                    structure: {
                                                        size: .02,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    horizontal150_40: {
                                        label: "Horizontal 150/40",
                                        panels: {
                                            mode: "continuous",
                                            end: 0,
                                            variant: {
                                                0: {
                                                    size: .15,
                                                    depth: .02,
                                                    structure: {
                                                        size: .15,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                1: {
                                                    size: .04,
                                                    depth: .02,
                                                    structure: {
                                                        size: .04,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    horizontal100_40_20: {
                                        label: "Horizontal 100/40/20",
                                        panels: {
                                            mode: "continuous",
                                            end: 0,
                                            variant: {
                                                0: {
                                                    size: .1,
                                                    depth: .02,
                                                    structure: {
                                                        size: .1,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                1: {
                                                    size: .02,
                                                    depth: .02,
                                                    structure: {
                                                        size: .02,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                },
                                                2: {
                                                    size: .04,
                                                    depth: .02,
                                                    structure: {
                                                        size: .04,
                                                        space: .04,
                                                        angle: 0
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            secret: {
                                label: "SECRET",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "secret",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "horizontal",
                                    frame: {
                                        left: {
                                            size: .075,
                                            depth: .075
                                        },
                                        right: {
                                            size: .075,
                                            depth: .075
                                        },
                                        top: {
                                            size: .075,
                                            depth: .075
                                        },
                                        bottom: {
                                            size: .075,
                                            depth: .075
                                        }
                                    },
                                    slats: {
                                        top: {
                                            size: .02,
                                            depth: .02
                                        },
                                        bottom: {
                                            size: .02,
                                            depth: .02
                                        }
                                    },
                                    handle: "alu",
                                    thread: {
                                        width: .035,
                                        height: !1,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    secret: {
                                        label: "Secret",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .1,
                                                depth: .02,
                                                structure: {
                                                    size: .09,
                                                    space: -.01,
                                                    angle: 10
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            palisade: {
                                label: "PALISADA",
                                colors: Qe().colors.default,
                                default: {
                                    variant: "straight",
                                    color: "ral9005"
                                },
                                pattern: {
                                    size: {
                                        minWidth: .6,
                                        maxWidth: 2,
                                        minHeight: 1,
                                        maxHeight: 2.2
                                    },
                                    customizable: !1,
                                    type: "vertical",
                                    frame: {
                                        left: {
                                            size: .075,
                                            depth: .075
                                        },
                                        right: {
                                            size: .075,
                                            depth: .075
                                        }
                                    },
                                    bracket1: {
                                        size: .04,
                                        depth: .02,
                                        position: {
                                            x: 0,
                                            y: 0,
                                            z: .02
                                        }
                                    },
                                    bracket2: {
                                        size: .04,
                                        depth: .02,
                                        position: {
                                            x: 0,
                                            y: .2,
                                            z: .02
                                        }
                                    },
                                    handle: "alu",
                                    thread: {
                                        width: .035,
                                        height: !1,
                                        depth: .035
                                    },
                                    hinge: {
                                        width: .035,
                                        space: .1
                                    },
                                    poles: {
                                        width: .08,
                                        depth: .08
                                    }
                                },
                                variants: {
                                    straight: {
                                        label: "Prosta",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .06,
                                                depth: .06,
                                                structure: {
                                                    size: .06,
                                                    space: .06,
                                                    angle: 0
                                                }
                                            }
                                        }
                                    },
                                    slant: {
                                        label: "Sko\u015bna",
                                        panels: {
                                            mode: "simple",
                                            variant: {
                                                size: .08,
                                                depth: .03,
                                                structure: {
                                                    size: .08,
                                                    space: .06,
                                                    angle: 45
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                gates: {
                    metal: {
                        label: W("Stalowe"),
                        systems: {
                            vero: {
                                label: "VERO",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "translucent",
                                    color: "ral7016"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: 0,
                                                    height: .04,
                                                    depth: .08
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                center: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            slats: {
                                                top: {
                                                    space: null
                                                },
                                                bottom: {
                                                    space: null
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .08,
                                                    depth: .02,
                                                    structure: {
                                                        size: .0793,
                                                        space: null,
                                                        angle: 30
                                                    }
                                                }
                                            },
                                            extra: {
                                                type: "square",
                                                width: 1.5,
                                                size: .04,
                                                depth: .04
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            translucent: {
                                                label: W("Przezierny"),
                                                slats: {
                                                    top: {
                                                        space: .03
                                                    },
                                                    bottom: {
                                                        space: .03
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .0597
                                                        }
                                                    }
                                                }
                                            },
                                            opaque: {
                                                label: W("Nieprzezierny"),
                                                slats: {
                                                    top: {
                                                        space: 0
                                                    },
                                                    bottom: {
                                                        space: 0
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: -.0098
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                right: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                top: {
                                                    space: .005
                                                },
                                                bottom: {
                                                    space: .005
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .08,
                                                    depth: .02,
                                                    structure: {
                                                        size: .0793,
                                                        space: null,
                                                        angle: 30
                                                    }
                                                }
                                            },
                                            handle: "standard",
                                            thread: {
                                                width: .015,
                                                height: .285,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            translucent: {
                                                label: W("Przezierny"),
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .0597
                                                        }
                                                    }
                                                }
                                            },
                                            opaque: {
                                                label: W("Nieprzezierny"),
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: -.0098
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            optima: {
                                label: "OPTIMA",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "optima20",
                                    color: "ral7016"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: 0,
                                                    height: .04,
                                                    depth: .08
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                center: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            slats: {
                                                top: {
                                                    space: null
                                                },
                                                bottom: {
                                                    space: null
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .08,
                                                    depth: .02,
                                                    structure: {
                                                        size: .08,
                                                        space: null,
                                                        angle: 0
                                                    }
                                                }
                                            },
                                            extra: {
                                                type: "square",
                                                width: 1.5,
                                                size: .04,
                                                depth: .04
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            optima20: {
                                                label: "Optima 20",
                                                slats: {
                                                    top: {
                                                        space: .01
                                                    },
                                                    bottom: {
                                                        space: .01
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .02
                                                        }
                                                    }
                                                }
                                            },
                                            optima30: {
                                                label: "Optima 30",
                                                slats: {
                                                    top: {
                                                        space: .015
                                                    },
                                                    bottom: {
                                                        space: .015
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .03
                                                        }
                                                    }
                                                }
                                            },
                                            optima40: {
                                                label: "Optima 40",
                                                slats: {
                                                    top: {
                                                        space: .02
                                                    },
                                                    bottom: {
                                                        space: .02
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .04
                                                        }
                                                    }
                                                }
                                            },
                                            optima50: {
                                                label: "Optima 50",
                                                slats: {
                                                    top: {
                                                        space: .025
                                                    },
                                                    bottom: {
                                                        space: .025
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .05
                                                        }
                                                    }
                                                }
                                            },
                                            optima60: {
                                                label: "Optima 60",
                                                slats: {
                                                    top: {
                                                        space: .03
                                                    },
                                                    bottom: {
                                                        space: .03
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .06
                                                        }
                                                    }
                                                }
                                            },
                                            optima70: {
                                                label: "Optima 70",
                                                slats: {
                                                    top: {
                                                        space: .035
                                                    },
                                                    bottom: {
                                                        space: .035
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .07
                                                        }
                                                    }
                                                }
                                            },
                                            optima80: {
                                                label: "Optima 80",
                                                slats: {
                                                    top: {
                                                        space: .04
                                                    },
                                                    bottom: {
                                                        space: .04
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .08
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                right: {
                                                    size: .06,
                                                    depth: .06
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .08,
                                                    depth: .02,
                                                    structure: {
                                                        size: .08,
                                                        space: null,
                                                        angle: 0
                                                    }
                                                }
                                            },
                                            handle: "standard",
                                            thread: {
                                                width: .015,
                                                height: .285,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            optima20: {
                                                label: "Optima 20",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .02
                                                        }
                                                    }
                                                }
                                            },
                                            optima30: {
                                                label: "Optima 30",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .03
                                                        }
                                                    }
                                                }
                                            },
                                            optima40: {
                                                label: "Optima 40",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .04
                                                        }
                                                    }
                                                }
                                            },
                                            optima50: {
                                                label: "Optima 50",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .05
                                                        }
                                                    }
                                                }
                                            },
                                            optima60: {
                                                label: "Optima 60",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .06
                                                        }
                                                    }
                                                }
                                            },
                                            optima70: {
                                                label: "Optima 70",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .07
                                                        }
                                                    }
                                                }
                                            },
                                            optima80: {
                                                label: "Optima 80",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .08
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            medio: {
                                label: "MEDIO",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "medio20",
                                    color: "ral7016"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: 0,
                                                    height: .04,
                                                    depth: .08
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                center: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            slats: {
                                                top: {
                                                    space: null
                                                },
                                                bottom: {
                                                    space: null
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .16,
                                                    depth: .02,
                                                    structure: {
                                                        size: .16,
                                                        space: null,
                                                        angle: 0
                                                    }
                                                }
                                            },
                                            extra: {
                                                type: "square",
                                                width: 1.5,
                                                size: .04,
                                                depth: .04
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            medio20: {
                                                label: "Medio 20",
                                                slats: {
                                                    top: {
                                                        space: .01
                                                    },
                                                    bottom: {
                                                        space: .01
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .02
                                                        }
                                                    }
                                                }
                                            },
                                            medio30: {
                                                label: "Medio 30",
                                                slats: {
                                                    top: {
                                                        space: .015
                                                    },
                                                    bottom: {
                                                        space: .015
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .03
                                                        }
                                                    }
                                                }
                                            },
                                            medio40: {
                                                label: "Medio 40",
                                                slats: {
                                                    top: {
                                                        space: .02
                                                    },
                                                    bottom: {
                                                        space: .02
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .04
                                                        }
                                                    }
                                                }
                                            },
                                            medio50: {
                                                label: "Medio 50",
                                                slats: {
                                                    top: {
                                                        space: .025
                                                    },
                                                    bottom: {
                                                        space: .025
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .05
                                                        }
                                                    }
                                                }
                                            },
                                            medio60: {
                                                label: "Medio 60",
                                                slats: {
                                                    top: {
                                                        space: .03
                                                    },
                                                    bottom: {
                                                        space: .03
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .06
                                                        }
                                                    }
                                                }
                                            },
                                            medio70: {
                                                label: "Medio 70",
                                                slats: {
                                                    top: {
                                                        space: .035
                                                    },
                                                    bottom: {
                                                        space: .035
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .07
                                                        }
                                                    }
                                                }
                                            },
                                            medio80: {
                                                label: "Medio 80",
                                                slats: {
                                                    top: {
                                                        space: .04
                                                    },
                                                    bottom: {
                                                        space: .04
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .08
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                right: {
                                                    size: .06,
                                                    depth: .06
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .16,
                                                    depth: .02,
                                                    structure: {
                                                        size: .16,
                                                        space: null,
                                                        angle: 0
                                                    }
                                                }
                                            },
                                            handle: "standard",
                                            thread: {
                                                width: .015,
                                                height: .285,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            medio20: {
                                                label: "Medio 20",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .02
                                                        }
                                                    }
                                                }
                                            },
                                            medio30: {
                                                label: "Medio 30",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .03
                                                        }
                                                    }
                                                }
                                            },
                                            medio40: {
                                                label: "Medio 40",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .04
                                                        }
                                                    }
                                                }
                                            },
                                            medio50: {
                                                label: "Medio 50",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .05
                                                        }
                                                    }
                                                }
                                            },
                                            medio60: {
                                                label: "Medio 60",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .06
                                                        }
                                                    }
                                                }
                                            },
                                            medio70: {
                                                label: "Medio 70",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .07
                                                        }
                                                    }
                                                }
                                            },
                                            medio80: {
                                                label: "Medio 80",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .08
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            largo: {
                                label: "LARGO",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "largo20",
                                    color: "ral7016"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: 0,
                                                    height: .04,
                                                    depth: .08
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                center: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            slats: {
                                                top: {
                                                    space: null
                                                },
                                                bottom: {
                                                    space: null
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .2,
                                                    depth: .02,
                                                    structure: {
                                                        size: .2,
                                                        space: null,
                                                        angle: 0
                                                    }
                                                }
                                            },
                                            extra: {
                                                type: "square",
                                                width: 1.5,
                                                size: .04,
                                                depth: .04
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            largo20: {
                                                label: "Largo 20",
                                                slats: {
                                                    top: {
                                                        space: .01
                                                    },
                                                    bottom: {
                                                        space: .01
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .02
                                                        }
                                                    }
                                                }
                                            },
                                            largo30: {
                                                label: "Largo 30",
                                                slats: {
                                                    top: {
                                                        space: .015
                                                    },
                                                    bottom: {
                                                        space: .015
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .03
                                                        }
                                                    }
                                                }
                                            },
                                            largo40: {
                                                label: "Largo 40",
                                                slats: {
                                                    top: {
                                                        space: .02
                                                    },
                                                    bottom: {
                                                        space: .02
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .04
                                                        }
                                                    }
                                                }
                                            },
                                            largo50: {
                                                label: "Largo 50",
                                                slats: {
                                                    top: {
                                                        space: .025
                                                    },
                                                    bottom: {
                                                        space: .025
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .05
                                                        }
                                                    }
                                                }
                                            },
                                            largo60: {
                                                label: "Largo 60",
                                                slats: {
                                                    top: {
                                                        space: .03
                                                    },
                                                    bottom: {
                                                        space: .03
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .06
                                                        }
                                                    }
                                                }
                                            },
                                            largo70: {
                                                label: "Largo 70",
                                                slats: {
                                                    top: {
                                                        space: .035
                                                    },
                                                    bottom: {
                                                        space: .035
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .07
                                                        }
                                                    }
                                                }
                                            },
                                            largo80: {
                                                label: "Largo 80",
                                                slats: {
                                                    top: {
                                                        space: .04
                                                    },
                                                    bottom: {
                                                        space: .04
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .08
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                right: {
                                                    size: .06,
                                                    depth: .06
                                                }
                                            },
                                            panels: {
                                                mode: "simple",
                                                variant: {
                                                    size: .2,
                                                    depth: .02,
                                                    structure: {
                                                        size: .2,
                                                        space: null,
                                                        angle: 0
                                                    }
                                                }
                                            },
                                            handle: "standard",
                                            thread: {
                                                width: .015,
                                                height: .285,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            largo20: {
                                                label: "Largo 20",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .02
                                                        }
                                                    }
                                                }
                                            },
                                            largo30: {
                                                label: "Largo 30",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .03
                                                        }
                                                    }
                                                }
                                            },
                                            largo40: {
                                                label: "Largo 40",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .04
                                                        }
                                                    }
                                                }
                                            },
                                            largo50: {
                                                label: "Largo 50",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .05
                                                        }
                                                    }
                                                }
                                            },
                                            largo60: {
                                                label: "Largo 60",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .06
                                                        }
                                                    }
                                                }
                                            },
                                            largo70: {
                                                label: "Largo 70",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .07
                                                        }
                                                    }
                                                }
                                            },
                                            largo80: {
                                                label: "Largo 80",
                                                panels: {
                                                    variant: {
                                                        structure: {
                                                            space: .08
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            gradio: {
                                label: "GRADIO",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "gradio20",
                                    color: "ral7016"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: 0,
                                                    height: .04,
                                                    depth: .08
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                center: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            slats: {
                                                top: {
                                                    space: null
                                                },
                                                bottom: {
                                                    space: null
                                                }
                                            },
                                            panels: {
                                                mode: "last",
                                                count: 4,
                                                variant: {
                                                    0: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    },
                                                    1: {
                                                        size: .16,
                                                        depth: .02,
                                                        structure: {
                                                            size: .16,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            extra: {
                                                type: "square",
                                                width: 1.5,
                                                size: .04,
                                                depth: .04
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            gradio20: {
                                                label: "Gradio 20",
                                                slats: {
                                                    top: {
                                                        space: .02
                                                    },
                                                    bottom: {
                                                        space: .02
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio30: {
                                                label: "Gradio 30",
                                                slats: {
                                                    top: {
                                                        space: .03
                                                    },
                                                    bottom: {
                                                        space: .03
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio40: {
                                                label: "Gradio 40",
                                                slats: {
                                                    top: {
                                                        space: .04
                                                    },
                                                    bottom: {
                                                        space: .04
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio50: {
                                                label: "Gradio 50",
                                                slats: {
                                                    top: {
                                                        space: .05
                                                    },
                                                    bottom: {
                                                        space: .05
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio60: {
                                                label: "Gradio 60",
                                                slats: {
                                                    top: {
                                                        space: .06
                                                    },
                                                    bottom: {
                                                        space: .06
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio70: {
                                                label: "Gradio 70",
                                                slats: {
                                                    top: {
                                                        space: .07
                                                    },
                                                    bottom: {
                                                        space: .07
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio80: {
                                                label: "Gradio 80",
                                                slats: {
                                                    top: {
                                                        space: .08
                                                    },
                                                    bottom: {
                                                        space: .08
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                right: {
                                                    size: .06,
                                                    depth: .06
                                                }
                                            },
                                            panels: {
                                                mode: "last",
                                                count: 4,
                                                variant: {
                                                    0: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    },
                                                    1: {
                                                        size: .16,
                                                        depth: .02,
                                                        structure: {
                                                            size: .16,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            handle: "standard",
                                            thread: {
                                                width: .015,
                                                height: .285,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            gradio20: {
                                                label: "Gradio 20",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio30: {
                                                label: "Gradio 30",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio40: {
                                                label: "Gradio 40",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio50: {
                                                label: "Gradio 50",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio60: {
                                                label: "Gradio 60",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio70: {
                                                label: "Gradio 70",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            gradio80: {
                                                label: "Gradio 80",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            tesso: {
                                label: "TESSO",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "tesso20",
                                    color: "ral7016"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: 0,
                                                    height: .04,
                                                    depth: .08
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                center: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            slats: {
                                                top: {
                                                    space: null
                                                },
                                                bottom: {
                                                    space: null
                                                }
                                            },
                                            panels: {
                                                mode: "continuous",
                                                end: !1,
                                                variant: {
                                                    0: {
                                                        size: .16,
                                                        depth: .02,
                                                        structure: {
                                                            size: .16,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    },
                                                    1: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            extra: {
                                                type: "square",
                                                width: 1.5,
                                                size: .04,
                                                depth: .04
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            tesso20: {
                                                label: "Tesso 20",
                                                slats: {
                                                    top: {
                                                        space: .01
                                                    },
                                                    bottom: {
                                                        space: .01
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso30: {
                                                label: "Tesso 30",
                                                slats: {
                                                    top: {
                                                        space: .015
                                                    },
                                                    bottom: {
                                                        space: .015
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso40: {
                                                label: "Tesso 40",
                                                slats: {
                                                    top: {
                                                        space: .02
                                                    },
                                                    bottom: {
                                                        space: .02
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso50: {
                                                label: "Tesso 50",
                                                slats: {
                                                    top: {
                                                        space: .025
                                                    },
                                                    bottom: {
                                                        space: .025
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso60: {
                                                label: "Tesso 60",
                                                slats: {
                                                    top: {
                                                        space: .03
                                                    },
                                                    bottom: {
                                                        space: .03
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso70: {
                                                label: "Tesso 70",
                                                slats: {
                                                    top: {
                                                        space: .035
                                                    },
                                                    bottom: {
                                                        space: .035
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso80: {
                                                label: "Tesso 80",
                                                slats: {
                                                    top: {
                                                        space: .04
                                                    },
                                                    bottom: {
                                                        space: .04
                                                    }
                                                },
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .06,
                                                    depth: .06
                                                },
                                                right: {
                                                    size: .06,
                                                    depth: .06
                                                }
                                            },
                                            panels: {
                                                mode: "continuous",
                                                end: !1,
                                                variant: {
                                                    0: {
                                                        size: .16,
                                                        depth: .02,
                                                        structure: {
                                                            size: .16,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    },
                                                    1: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: null,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            handle: "standard",
                                            thread: {
                                                width: .015,
                                                height: .285,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            tesso20: {
                                                label: "Tesso 20",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .02
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso30: {
                                                label: "Tesso 30",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .03
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso40: {
                                                label: "Tesso 40",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .04
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso50: {
                                                label: "Tesso 50",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .05
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso60: {
                                                label: "Tesso 60",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .06
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso70: {
                                                label: "Tesso 70",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .07
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            tesso80: {
                                                label: "Tesso 80",
                                                panels: {
                                                    variant: {
                                                        0: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        },
                                                        1: {
                                                            structure: {
                                                                space: .08
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            palisade: {
                                label: "PALISADA",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "straight",
                                    color: "ral9005"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "vertical",
                                            basement: {
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .16,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .08,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .08,
                                                    depth: .08
                                                }
                                            },
                                            bracket2: {
                                                size: .04,
                                                depth: .02,
                                                position: {
                                                    x: 0,
                                                    y: .2,
                                                    z: .02
                                                }
                                            },
                                            extra: {
                                                type: "triangle",
                                                width: 2,
                                                size: .08,
                                                depth: .08
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            straight: {
                                                label: "Prosta",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .06,
                                                        depth: .04,
                                                        structure: {
                                                            size: .06,
                                                            space: .06,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "vertical",
                                            frame: {
                                                left: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                right: {
                                                    size: .075,
                                                    depth: .075
                                                }
                                            },
                                            bracket1: {
                                                size: .04,
                                                depth: .02,
                                                position: {
                                                    x: 0,
                                                    y: 0,
                                                    z: .02
                                                }
                                            },
                                            bracket2: {
                                                size: .04,
                                                depth: .02,
                                                position: {
                                                    x: 0,
                                                    y: .2,
                                                    z: .02
                                                }
                                            },
                                            handle: "alu",
                                            thread: {
                                                width: .015,
                                                height: !1,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            straight: {
                                                label: "Prosta",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .06,
                                                        depth: .04,
                                                        structure: {
                                                            size: .06,
                                                            space: .06,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    aluminium: {
                        label: W("Aluminiowe"),
                        systems: {
                            vertical: {
                                label: "VERTICAL",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "vertical",
                                    color: "ral9005"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "vertical",
                                            basement: {
                                                top: {
                                                    width: .5,
                                                    height: .04,
                                                    depth: .08,
                                                    inside: .04
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            extra: {
                                                type: "triangle",
                                                width: 2,
                                                size: .08,
                                                depth: .08
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            vertical: {
                                                label: "Vertical",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "vertical",
                                            frame: {
                                                left: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                right: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                top: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                bottom: {
                                                    size: .075,
                                                    depth: .075
                                                }
                                            },
                                            handle: "alu",
                                            thread: {
                                                width: .015,
                                                height: !1,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            vertical: {
                                                label: "Vertical",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            horizontal: {
                                label: "HORIZONTAL",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "horizontal150d",
                                    color: "ral9005"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: Qe().customizables.default,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: .5,
                                                    height: .04,
                                                    depth: .08,
                                                    inside: .04
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            extra: {
                                                type: "triangle",
                                                width: 2,
                                                size: .08,
                                                depth: .08
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            horizontal80: {
                                                label: "Horizontal 80",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: .08,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal100: {
                                                label: "Horizontal 100",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .1,
                                                        depth: .02,
                                                        structure: {
                                                            size: .1,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal120: {
                                                label: "Horizontal 120",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .12,
                                                        depth: .02,
                                                        structure: {
                                                            size: .12,
                                                            space: .06,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal150: {
                                                label: "Horizontal 150",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .15,
                                                        depth: .02,
                                                        structure: {
                                                            size: .15,
                                                            space: .02,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal150d: {
                                                label: "Horizontal 150D",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .15,
                                                        depth: .02,
                                                        structure: {
                                                            size: .15,
                                                            space: .02,
                                                            angle: 0
                                                        }
                                                    },
                                                    material: Qe().materials.second
                                                }
                                            },
                                            horizontal200: {
                                                label: "Horizontal 200",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .2,
                                                        depth: .02,
                                                        structure: {
                                                            size: .2,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal200d: {
                                                label: "Horizontal 200D",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .2,
                                                        depth: .02,
                                                        structure: {
                                                            size: .2,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    },
                                                    material: Qe().materials.second
                                                }
                                            },
                                            horizontal200_20: {
                                                label: "Horizontal 200/20",
                                                panels: {
                                                    mode: "continuous",
                                                    end: 0,
                                                    variant: {
                                                        0: {
                                                            size: .2,
                                                            depth: .02,
                                                            structure: {
                                                                size: .2,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        1: {
                                                            size: .02,
                                                            depth: .02,
                                                            structure: {
                                                                size: .02,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal150_40: {
                                                label: "Horizontal 150/40",
                                                panels: {
                                                    mode: "continuous",
                                                    end: 0,
                                                    variant: {
                                                        0: {
                                                            size: .15,
                                                            depth: .02,
                                                            structure: {
                                                                size: .15,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        1: {
                                                            size: .04,
                                                            depth: .02,
                                                            structure: {
                                                                size: .04,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal100_40_20: {
                                                label: "Horizontal 100/40/20",
                                                panels: {
                                                    mode: "continuous",
                                                    end: 0,
                                                    variant: {
                                                        0: {
                                                            size: .1,
                                                            depth: .02,
                                                            structure: {
                                                                size: .1,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        1: {
                                                            size: .02,
                                                            depth: .02,
                                                            structure: {
                                                                size: .02,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        2: {
                                                            size: .04,
                                                            depth: .02,
                                                            structure: {
                                                                size: .04,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: Qe().customizables.default,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                right: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                top: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                bottom: {
                                                    size: .075,
                                                    depth: .075
                                                }
                                            },
                                            handle: "alu",
                                            thread: {
                                                width: .015,
                                                height: !1,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            horizontal80: {
                                                label: "Horizontal 80",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .08,
                                                        depth: .02,
                                                        structure: {
                                                            size: .08,
                                                            space: .08,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal100: {
                                                label: "Horizontal 100",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .1,
                                                        depth: .02,
                                                        structure: {
                                                            size: .1,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal120: {
                                                label: "Horizontal 120",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .12,
                                                        depth: .02,
                                                        structure: {
                                                            size: .12,
                                                            space: .06,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal150: {
                                                label: "Horizontal 150",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .15,
                                                        depth: .02,
                                                        structure: {
                                                            size: .15,
                                                            space: .02,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal150d: {
                                                label: "Horizontal 150D",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .15,
                                                        depth: .02,
                                                        structure: {
                                                            size: .15,
                                                            space: .02,
                                                            angle: 0
                                                        }
                                                    },
                                                    material: Qe().materials.second
                                                }
                                            },
                                            horizontal200: {
                                                label: "Horizontal 200",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .2,
                                                        depth: .02,
                                                        structure: {
                                                            size: .2,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal200d: {
                                                label: "Horizontal 200D",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .2,
                                                        depth: .02,
                                                        structure: {
                                                            size: .2,
                                                            space: .04,
                                                            angle: 0
                                                        }
                                                    },
                                                    material: Qe().materials.second
                                                }
                                            },
                                            horizontal200_20: {
                                                label: "Horizontal 200/20",
                                                panels: {
                                                    mode: "continuous",
                                                    end: 0,
                                                    variant: {
                                                        0: {
                                                            size: .2,
                                                            depth: .02,
                                                            structure: {
                                                                size: .2,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        1: {
                                                            size: .02,
                                                            depth: .02,
                                                            structure: {
                                                                size: .02,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal150_40: {
                                                label: "Horizontal 150/40",
                                                panels: {
                                                    mode: "continuous",
                                                    end: 0,
                                                    variant: {
                                                        0: {
                                                            size: .15,
                                                            depth: .02,
                                                            structure: {
                                                                size: .15,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        1: {
                                                            size: .04,
                                                            depth: .02,
                                                            structure: {
                                                                size: .04,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            horizontal100_40_20: {
                                                label: "Horizontal 100/40/20",
                                                panels: {
                                                    mode: "continuous",
                                                    end: 0,
                                                    variant: {
                                                        0: {
                                                            size: .1,
                                                            depth: .02,
                                                            structure: {
                                                                size: .1,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        1: {
                                                            size: .02,
                                                            depth: .02,
                                                            structure: {
                                                                size: .02,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        },
                                                        2: {
                                                            size: .04,
                                                            depth: .02,
                                                            structure: {
                                                                size: .04,
                                                                space: .04,
                                                                angle: 0
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            secret: {
                                label: "SECRET",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "secret",
                                    color: "ral9005"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "horizontal",
                                            basement: {
                                                top: {
                                                    width: .5,
                                                    height: .04,
                                                    depth: .08,
                                                    inside: .04
                                                },
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .08,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .04,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .04,
                                                    depth: .08
                                                }
                                            },
                                            extra: {
                                                type: "triangle",
                                                width: 2,
                                                size: .08,
                                                depth: .08
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            secret: {
                                                label: "Secret",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .1,
                                                        depth: .02,
                                                        structure: {
                                                            size: .09,
                                                            space: -.01,
                                                            angle: 10
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "horizontal",
                                            frame: {
                                                left: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                right: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                top: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                bottom: {
                                                    size: .075,
                                                    depth: .075
                                                }
                                            },
                                            handle: "alu",
                                            thread: {
                                                width: .015,
                                                height: !1,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            secret: {
                                                label: "Secret",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .1,
                                                        depth: .02,
                                                        structure: {
                                                            size: .09,
                                                            space: -.01,
                                                            angle: 10
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            palisade: {
                                label: "PALISADA",
                                colors: Qe().colors.default,
                                default: {
                                    type: "sliding",
                                    variant: "straight",
                                    color: "ral9005"
                                },
                                types: {
                                    sliding: {
                                        label: W("Przesuwne"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2,
                                                bottomSpace: .09
                                            },
                                            customizable: !1,
                                            opentime: 20,
                                            type: "vertical",
                                            basement: {
                                                bottom: {
                                                    width: !1,
                                                    height: .06,
                                                    depth: .04
                                                },
                                                base: {
                                                    width: !1,
                                                    height: .16,
                                                    depth: .08
                                                }
                                            },
                                            frame: {
                                                left: {
                                                    size: .08,
                                                    depth: .08
                                                },
                                                right: {
                                                    size: .08,
                                                    depth: .08
                                                }
                                            },
                                            bracket2: {
                                                size: .04,
                                                depth: .02,
                                                position: {
                                                    x: 0,
                                                    y: .2,
                                                    z: .02
                                                }
                                            },
                                            extra: {
                                                type: "triangle",
                                                width: 2,
                                                size: .08,
                                                depth: .08
                                            },
                                            support: {
                                                depth: .3,
                                                space: .05,
                                                top: {
                                                    height: .05
                                                },
                                                pole: {
                                                    width: .1,
                                                    depth: .1
                                                },
                                                bottom: {
                                                    width: .3,
                                                    height: .01
                                                }
                                            }
                                        },
                                        variants: {
                                            straight: {
                                                label: "Prosta",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .06,
                                                        depth: .06,
                                                        structure: {
                                                            size: .06,
                                                            space: .06,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            slant: {
                                                label: "Sko\u015bna",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .08,
                                                        depth: .03,
                                                        structure: {
                                                            size: .08,
                                                            space: .06,
                                                            angle: 45
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    swing: {
                                        label: W("Dwuskrzyd\u0142owe"),
                                        pattern: {
                                            size: {
                                                minWidth: 2.6,
                                                maxWidth: 6,
                                                minHeight: 1,
                                                maxHeight: 2.2
                                            },
                                            customizable: !1,
                                            opentime: 10,
                                            type: "vertical",
                                            frame: {
                                                left: {
                                                    size: .075,
                                                    depth: .075
                                                },
                                                right: {
                                                    size: .075,
                                                    depth: .075
                                                }
                                            },
                                            bracket1: {
                                                size: .04,
                                                depth: .02,
                                                position: {
                                                    x: 0,
                                                    y: 0,
                                                    z: .02
                                                }
                                            },
                                            bracket2: {
                                                size: .04,
                                                depth: .02,
                                                position: {
                                                    x: 0,
                                                    y: .2,
                                                    z: .02
                                                }
                                            },
                                            handle: "alu",
                                            thread: {
                                                width: .015,
                                                height: !1,
                                                depth: .035
                                            },
                                            hinge: {
                                                width: .035,
                                                space: .1
                                            },
                                            poles: {
                                                width: .08,
                                                depth: .08
                                            }
                                        },
                                        variants: {
                                            straight: {
                                                label: "Prosta",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .06,
                                                        depth: .06,
                                                        structure: {
                                                            size: .06,
                                                            space: .06,
                                                            angle: 0
                                                        }
                                                    }
                                                }
                                            },
                                            slant: {
                                                label: "Sko\u015bna",
                                                panels: {
                                                    mode: "simple",
                                                    variant: {
                                                        size: .08,
                                                        depth: .03,
                                                        structure: {
                                                            size: .08,
                                                            space: .06,
                                                            angle: 45
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                panels: {
                    default: {
                        label: "-",
                        models: {
                            full: {
                                label: W("Pe\u0142ne"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27
                            },
                            grid: {
                                label: W("Kratka"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            slant: {
                                label: "".concat(W("Kratka skos")),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            kumiko: {
                                label: W("Kumiko"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            tribal: {
                                label: W("Tribal"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            circles: {
                                label: W("Ko\u0142a"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            flower: {
                                label: W("Kwiat"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            inside: {
                                label: W("Z jedn\u0105 wstawk\u0105"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .27,
                                pattern: .27
                            },
                            insides: {
                                label: W("Z wieloma wstawkami"),
                                variant: {
                                    width: 1.5,
                                    pole: .07,
                                    adapter: .025,
                                    slip: .0225,
                                    bottom: .055
                                },
                                heights: $e().default,
                                panel: .22,
                                inside: .035
                            }
                        }
                    }
                },
                mailboxes: {
                    default: {
                        label: "-",
                        models: {
                            sdz: {
                                label: "SDZM",
                                description: W("Skrzynka du\u017ca z maskownic\u0105"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smz", !1],
                                front: {
                                    model: "smz",
                                    width: .285,
                                    height: .145,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.1
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdzp: {
                                label: "SDZMP",
                                description: W("Skrzynka du\u017ca personalizowana z maskownic\u0105"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: ["smzp", !1],
                                front: {
                                    model: "sdzp",
                                    width: .285,
                                    height: .332,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.29
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smz: {
                                label: "SMZM",
                                description: W("Skrzynka ma\u0142a z maskownic\u0105"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdz"],
                                front: {
                                    model: "smz",
                                    width: .285,
                                    height: .145,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smzp: {
                                label: "SMZMP",
                                description: W("Skrzynka ma\u0142a personalizowana z maskownic\u0105"),
                                colors: et().inox,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdzp"],
                                front: {
                                    model: "smzp",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smz_ra: {
                                label: "SMZM RA",
                                description: W("Skrzynka ma\u0142a z ram\u0105 dekoracyjn\u0105 i maskownic\u0105"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdz"],
                                front: {
                                    model: "smz_ra",
                                    width: .347,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdz_2sz: {
                                label: "SDZM-2SZ",
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i dwoma wrzutami"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: [!1, !1],
                                front: {
                                    model: "sdz_2sz",
                                    width: .285,
                                    height: .244,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz_2sz",
                                    width: .26,
                                    height: .22,
                                    depth: .004,
                                    position: {
                                        y: 0
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big_2sz",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdz_3sz: {
                                label: "SDZM-3SZ",
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i trzema wrzutami"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: [!1, !1],
                                front: {
                                    model: "sdz_3sz",
                                    width: .285,
                                    height: .356,
                                    depth: .003,
                                    position: {
                                        y: -.056
                                    }
                                },
                                back: {
                                    model: "sdz_3sz",
                                    width: .26,
                                    height: .33,
                                    depth: .004,
                                    position: {
                                        y: -.056
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big_3sz",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdz_4sz: {
                                label: "SDZM-4SZ",
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i czterema wrzutami"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: [!1, !1],
                                front: {
                                    model: "sdz_4sz",
                                    width: .285,
                                    height: .468,
                                    depth: .003,
                                    position: {
                                        y: -.112
                                    }
                                },
                                back: {
                                    model: "sdz_4sz",
                                    width: .26,
                                    height: .44,
                                    depth: .004,
                                    position: {
                                        y: -.112
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big_4sz",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdz_5sz: {
                                label: "SDZM-5SZ",
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i pi\u0119cioma wrzutami"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: [!1, !1],
                                front: {
                                    model: "sdz_5sz",
                                    width: .285,
                                    height: .58,
                                    depth: .003,
                                    position: {
                                        y: -.168
                                    }
                                },
                                back: {
                                    model: "sdz_5sz",
                                    width: .26,
                                    height: .55,
                                    depth: .004,
                                    position: {
                                        y: -.168
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big_5sz",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdz_6sz: {
                                label: "SDZM-6SZ",
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i sze\u015bcioma wrzutami"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: [!1, !1],
                                front: {
                                    model: "sdz_6sz",
                                    width: .285,
                                    height: .692,
                                    depth: .003,
                                    position: {
                                        y: -.224
                                    }
                                },
                                back: {
                                    model: "sdz_6sz",
                                    width: .26,
                                    height: .66,
                                    depth: .004,
                                    position: {
                                        y: -.224
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big_6sz",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdg: {
                                label: "SDGM",
                                description: W("Skrzynka du\u017ca z maskownic\u0105"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smg", !1],
                                front: {
                                    model: "smg",
                                    width: .285,
                                    height: .158,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.1
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdgp: {
                                label: "SDGMP",
                                description: W("Skrzynka du\u017ca personalizowana z maskownic\u0105"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: ["smgp", !1],
                                front: {
                                    model: "sdgp",
                                    width: .285,
                                    height: .332,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.29
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smg: {
                                label: "SMGM",
                                description: W("Skrzynka ma\u0142a z maskownic\u0105"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdg"],
                                front: {
                                    model: "smg",
                                    width: .285,
                                    height: .158,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smgp: {
                                label: "SMGMP",
                                description: W("Skrzynka ma\u0142a personalizowana z maskownic\u0105"),
                                colors: et().inox,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdgp"],
                                front: {
                                    model: "smgp",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdda: {
                                label: "SDDAM",
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i unifonem"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smda", !1],
                                front: {
                                    model: "smda",
                                    width: .285,
                                    height: .205,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.1
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdda_2p: {
                                label: "SDDAM 2P",
                                description: W("Skrzynka du\u017ca z maskownic\u0105, dwoma przyciskami i dwoma unifonami"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smda_2p", !1],
                                front: {
                                    model: "smda_2p",
                                    width: .285,
                                    height: .205,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.1
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sddap: {
                                label: "SDDAMP",
                                description: W("Skrzynka du\u017ca personalizowana z maskownic\u0105 i unifonem"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: ["smdap", !1],
                                front: {
                                    model: "sddap",
                                    width: .285,
                                    height: .332,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.29
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smda: {
                                label: "SMDAM",
                                description: W("Skrzynka ma\u0142a z maskownic\u0105 i unifonem"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdda"],
                                front: {
                                    model: "smda",
                                    width: .285,
                                    height: .205,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smda_2p: {
                                label: "SMDAM 2P",
                                description: W("Skrzynka ma\u0142a z maskownic\u0105, dwoma przyciskami i dwoma unifonami"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdda_2p"],
                                front: {
                                    model: "smda_2p",
                                    width: .285,
                                    height: .205,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smdap: {
                                label: "SMDAMP",
                                description: W("Skrzynka ma\u0142a personalizowana z maskownic\u0105 i unifonem"),
                                colors: et().inox,
                                target: [.19, .255],
                                targetReplacement: [!1, "sddap"],
                                front: {
                                    model: "smdap",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvd_r: {
                                label: "SDVM DUO (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i monitorem"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smvd_r", !1],
                                front: {
                                    model: "sdvd_r",
                                    width: .285,
                                    height: .332,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvd_r_2p: {
                                label: "SDVM DUO 2P (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105, dwoma przyciskami i dwoma monitorami"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smvd_r_2p", !1],
                                front: {
                                    model: "sdvd_r_2p",
                                    width: .285,
                                    height: .332,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvd_r_2sz_2p: {
                                label: "SDVM DUO 2SZ 2P (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105, dwoma szufladami, dwoma przyciskami i dwoma monitorami"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smvd_r_2p", !1],
                                front: {
                                    model: "sdvd_r_2sz_2p",
                                    width: .285,
                                    height: .444,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvd_r: {
                                label: "SMVM DUO (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105 i monitorem"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvd_r"],
                                front: {
                                    model: "smvd_r",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvd_r_2p: {
                                label: "SMVM DUO 2P (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105, dwoma przyciskami i dwoma monitorami"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvd_r_2p"],
                                front: {
                                    model: "smvd_r_2p",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvd_k: {
                                label: "SDVM DUO (".concat(W("klawiatura"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i monitorem"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smvd_k", !1],
                                front: {
                                    model: "sdvd_k",
                                    width: .285,
                                    height: .332,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvd_k: {
                                label: "SMVM DUO (".concat(W("klawiatura"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105 i monitorem"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvd_k"],
                                front: {
                                    model: "smvd_k",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvd_k_ra: {
                                label: "SMVM DUO RA (".concat(W("klawiatura"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105, monitorem i ram\u0105 dekoracyjn\u0105"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvd_k"],
                                front: {
                                    model: "smvd_k_ra",
                                    width: .347,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvm_ip_r: {
                                label: "SDVM IP (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i monitorem"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: ["smvm_ip_r", !1],
                                front: {
                                    model: "sdvm_ip_r",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvm_ip_r: {
                                label: "SMVM IP (".concat(W("czytnik"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105 i monitorem"),
                                colors: et().inox,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvm_ip_r"],
                                front: {
                                    model: "smvm_ip_r",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvm_ip_k: {
                                label: "SDVM IP (".concat(W("klawiatura"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i monitorem"),
                                colors: et().inox,
                                target: [.26, .41],
                                targetReplacement: ["smvm_ip_k", !1],
                                front: {
                                    model: "sdvm_ip_k",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvm_ip_k: {
                                label: "SMVM IP (".concat(W("klawiatura"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105 i monitorem"),
                                colors: et().inox,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvm_ip_k"],
                                front: {
                                    model: "smvm_ip_k",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            sdvm_ip_x: {
                                label: "SDVM X (".concat(W("AHD/WIFI"), ")"),
                                description: W("Skrzynka du\u017ca z maskownic\u0105 i monitorem"),
                                colors: et().default,
                                target: [.26, .41],
                                targetReplacement: ["smvm_ip_x", !1],
                                front: {
                                    model: "sdvm_ip_x",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "sdz",
                                    width: .26,
                                    height: .11,
                                    depth: .004,
                                    position: {
                                        y: -.31
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "big",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvm_ip_x: {
                                label: "SMVM X (".concat(W("AHD/WIFI"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105 i monitorem"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvm_ip_x"],
                                front: {
                                    model: "smvm_ip_x",
                                    width: .285,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            },
                            smvm_ip_x_ra: {
                                label: "SMVM X RA (".concat(W("AHD/WIFI"), ")"),
                                description: W("Skrzynka ma\u0142a z maskownic\u0105, monitorem, i ram\u0105 dekoracyjn\u0105"),
                                colors: et().default,
                                target: [.19, .255],
                                targetReplacement: [!1, "sdvm_ip_x"],
                                front: {
                                    model: "smvm_ip_x_ra",
                                    width: .347,
                                    height: .385,
                                    depth: .003,
                                    position: {
                                        y: 0
                                    }
                                },
                                back: {
                                    model: "smz",
                                    width: .26,
                                    height: .36,
                                    depth: .004,
                                    position: {
                                        y: -.02
                                    }
                                },
                                additionals: {
                                    frame: {
                                        model: "small",
                                        auto: !0
                                    },
                                    roof: {
                                        model: "universal",
                                        auto: !1
                                    }
                                }
                            }
                        }
                    }
                },
                lamps: {
                    default: {
                        label: "-",
                        models: {
                            id_94398: {
                                label: "94398 - ".concat(W("Lampa elewacyjna")),
                                position: "default",
                                flash1: {
                                    type: "center",
                                    width: .4,
                                    height: .5,
                                    position: {
                                        y: .147
                                    }
                                }
                            },
                            id_94396: {
                                label: "94396 - ".concat(W("Lampa elewacyjna z czujnikiem")),
                                position: "default",
                                flash1: {
                                    type: "center",
                                    width: .4,
                                    height: .5,
                                    position: {
                                        y: .147
                                    }
                                }
                            },
                            id_94331: {
                                label: "94331 - ".concat(W("Lampa elewacyjna")),
                                position: "default",
                                flash1: {
                                    type: "top",
                                    width: .4,
                                    height: .4,
                                    position: {
                                        y: .28
                                    }
                                },
                                flash2: {
                                    type: "bottom",
                                    width: .4,
                                    height: .4,
                                    position: {
                                        y: -.28
                                    }
                                }
                            },
                            id_94328: {
                                label: "94328 - ".concat(W("Lampa elewacyjna")),
                                position: "default",
                                flash1: {
                                    type: "top",
                                    width: .4,
                                    height: .4,
                                    position: {
                                        y: .27
                                    }
                                },
                                flash2: {
                                    type: "bottom",
                                    width: .4,
                                    height: .4,
                                    position: {
                                        y: -.27
                                    }
                                }
                            },
                            id_94327: {
                                label: "94327 - ".concat(W("Lampa elewacyjna")),
                                position: "default",
                                flash1: {
                                    type: "bottom",
                                    width: .4,
                                    height: .4,
                                    position: {
                                        y: -.26
                                    }
                                }
                            },
                            id_94383: {
                                label: "94383 - ".concat(W("Lampa elewacyjna")),
                                position: "bottom"
                            },
                            id_94382: {
                                label: "94382 - ".concat(W("Lampa elewacyjna")),
                                position: "bottom"
                            },
                            solar: {
                                label: "95388 - ".concat(W("Lampa solarna")),
                                position: "default",
                                flash1: {
                                    type: "center",
                                    width: .5,
                                    height: .35,
                                    position: {
                                        y: -.03
                                    }
                                },
                                text: !0
                            }
                        }
                    }
                },
                ledblocks: {
                    default: {
                        label: "-",
                        models: {
                            lb_l_h20: {
                                model: "lb_l_h20",
                                label: "LB_L_H20",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lb_l_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                light: !0,
                                blink: !1
                            },
                            lb_m_h20: {
                                model: "lb_l_h20",
                                label: "LB_M_H20",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lb_m_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                light: !0,
                                blink: !0
                            },
                            lba_l_h20: {
                                model: "lba_l_h20",
                                label: "LBA_L_H20",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lba_l_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                light: !0,
                                blink: !1
                            },
                            lba_m_h20: {
                                model: "lba_l_h20",
                                label: "LBA_M_H20",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lba_m_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                light: !0,
                                blink: !0
                            },
                            slb_l_h20: {
                                model: "slb_l_h20",
                                label: "SLB_L_H20",
                                description: "".concat(W("Lampa LED BLOCK smart"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["slb_l_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                light: !0,
                                blink: !1
                            },
                            slb_m_h20: {
                                model: "slb_l_h20",
                                label: "SLB_M_H20",
                                description: "".concat(W("Lampa LED BLOCK smart"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["slb_m_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                light: !0,
                                blink: !0
                            },
                            lb_l_h28: {
                                model: "lb_l_h28",
                                label: "LB_L_H28",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lb_l_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                light: !0,
                                blink: !1
                            },
                            lb_m_h28: {
                                model: "lb_l_h28",
                                label: "LB_M_H28",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lb_m_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                light: !0,
                                blink: !0
                            },
                            lba_l_h28: {
                                model: "lba_l_h28",
                                label: "LBA_L_H28",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lba_l_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                light: !0,
                                blink: !1
                            },
                            lba_m_h28: {
                                model: "lba_l_h28",
                                label: "LBA_M_H28",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lba_m_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                light: !0,
                                blink: !0
                            },
                            slb_l_h28: {
                                model: "slb_l_h28",
                                label: "SLB_L_H28",
                                description: "".concat(W("Lampa LED BLOCK smart"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["slb_l_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                light: !0,
                                blink: !1
                            },
                            slb_m_h28: {
                                model: "slb_l_h28",
                                label: "SLB_M_H28",
                                description: "".concat(W("Lampa LED BLOCK smart"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["slb_m_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                light: !0,
                                blink: !0
                            },
                            lb_l_rm19: {
                                model: "lb_l_rm19",
                                label: "LB_L_RM19",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lb_l_rm28"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .195
                                },
                                light: !0,
                                blink: !1
                            },
                            lb_m_rm19: {
                                model: "lb_l_rm19",
                                label: "LB_M_RM19",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lb_m_rm28"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .195
                                },
                                light: !0,
                                blink: !0
                            },
                            lba_l_rm19: {
                                model: "lba_l_rm19",
                                label: "LBA_L_RM19",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lba_l_rm28"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .195
                                },
                                light: !0,
                                blink: !1
                            },
                            lba_m_rm19: {
                                model: "lba_l_rm19",
                                label: "LBA_M_RM19",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lba_m_rm28"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .195
                                },
                                light: !0,
                                blink: !0
                            },
                            slb_l_rm19: {
                                model: "slb_l_rm19",
                                label: "SLB_L_RM19",
                                description: "".concat(W("Lampa LED BLOCK smart"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["slb_l_rm28"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .195
                                },
                                light: !0,
                                blink: !1
                            },
                            slb_m_rm19: {
                                model: "slb_l_rm19",
                                label: "SLB_M_RM19",
                                description: "".concat(W("Lampa LED BLOCK smart"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["slb_m_rm28"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .195
                                },
                                light: !0,
                                blink: !0
                            },
                            lb_l_rm28: {
                                model: "lb_l_rm28",
                                label: "LB_L_RM28",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lb_l_rm19"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .28
                                },
                                light: !0,
                                blink: !1
                            },
                            lb_m_rm28: {
                                model: "lb_l_rm28",
                                label: "LB_M_RM28",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lb_m_rm19"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .28
                                },
                                light: !0,
                                blink: !0
                            },
                            lba_l_rm28: {
                                model: "lba_l_rm28",
                                label: "LBA_L_RM28",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["lba_l_rm19"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .28
                                },
                                light: !0,
                                blink: !1
                            },
                            lba_m_rm28: {
                                model: "lba_l_rm28",
                                label: "LBA_M_RM28",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["lba_m_rm19"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .28
                                },
                                light: !0,
                                blink: !0
                            },
                            slb_l_rm28: {
                                model: "slb_l_rm28",
                                label: "SLB_L_RM28",
                                description: "".concat(W("Lampa LED BLOCK smart"), " LIGHT"),
                                colors: tt().default,
                                targetReplacement: ["slb_l_rm19"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .28
                                },
                                light: !0,
                                blink: !1
                            },
                            slb_m_rm28: {
                                model: "slb_l_rm28",
                                label: "SLB_M_RM28",
                                description: "".concat(W("Lampa LED BLOCK smart"), " MULTI"),
                                colors: tt().default,
                                targetReplacement: ["slb_m_rm19"],
                                size: {
                                    width: .756,
                                    height: .07,
                                    depth: .28
                                },
                                light: !0,
                                blink: !0
                            },
                            lb_l_gl22: {
                                model: "lb_l_gl22",
                                label: "LB_L_GL22",
                                description: "".concat(W("Lampa LED BLOCK"), " LIGHT"),
                                colors: tt().reduced,
                                targetReplacement: !1,
                                size: {
                                    width: .38,
                                    height: .06,
                                    depth: .22
                                },
                                light: !0,
                                blink: !1
                            },
                            lb_m_gl22: {
                                model: "lb_l_gl22",
                                label: "LB_M_GL22",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().reduced,
                                targetReplacement: !1,
                                size: {
                                    width: .38,
                                    height: .06,
                                    depth: .22
                                },
                                light: !0,
                                blink: !0
                            },
                            slup60_h20: {
                                model: "slup60_h20",
                                label: "SLUP60_H20",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().reduced,
                                targetReplacement: ["slup60_h28"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .2
                                },
                                offset: .6,
                                light: !0,
                                blink: !0
                            },
                            slup60_h28: {
                                model: "slup60_h28",
                                label: "SLUP60_H28",
                                description: "".concat(W("Lampa LED BLOCK"), " MULTI"),
                                colors: tt().reduced,
                                targetReplacement: ["slup60_h20"],
                                size: {
                                    width: .504,
                                    height: .05,
                                    depth: .28
                                },
                                offset: .6,
                                light: !0,
                                blink: !0
                            }
                        }
                    }
                }
            }
        };
        a(124);
        function it(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var nt = function(e) {
            function t() {
                return Object(l.a)(this, t),
                it(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("div", {
                        id: "templates-project-template"
                    }, n.a.createElement("div", {
                        id: "container"
                    }, this.props.children))
                }
            }])
        }(n.a.Component)
          , ot = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null
              , a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
            y.dispatch({
                type: V.SHOW,
                kind: "confirm",
                content: e,
                accept: t,
                decline: a
            })
        }
          , st = function() {
            y.dispatch({
                type: V.HIDE
            })
        };
        function lt(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var rt = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = lt(this, t, [].concat(i))).accept = function() {
                    e.props.accept && e.props.accept(),
                    st()
                }
                ,
                e.decline = function() {
                    e.props.decline && e.props.decline(),
                    st()
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(n.a.Fragment, null, this.props.status && n.a.createElement("div", {
                        className: "dialog-container"
                    }, n.a.createElement("div", {
                        className: "dialog"
                    }, n.a.createElement("div", {
                        className: "dialog-content"
                    }, n.a.createElement("div", {
                        className: "content"
                    }, this.props.content), "confirm" === this.props.kind && n.a.createElement("div", {
                        className: "buttons"
                    }, n.a.createElement("button", {
                        onClick: this.accept,
                        className: "button-confirm"
                    }, W("Tak")), n.a.createElement("button", {
                        onClick: this.decline,
                        className: "button-decline"
                    }, W("Nie")))))))
                }
            }])
        }(n.a.Component);
        rt.defaultProps = {
            status: !1,
            kind: null,
            content: null,
            accept: null,
            decline: null
        };
        var ct = Object(m.b)((function(e) {
            return {
                status: e.dialog.status,
                kind: e.dialog.kind,
                content: e.dialog.content,
                accept: e.dialog.accept,
                decline: e.dialog.decline
            }
        }
        ), null)(rt)
          , pt = function() {
            y.dispatch({
                type: H.HIDE
            })
        };
        function dt(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var ht = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = dt(this, t, [].concat(i))).close = function() {
                    pt()
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(n.a.Fragment, null, this.props.status && n.a.createElement("div", {
                        className: "popup-container"
                    }, n.a.createElement("div", {
                        className: "popup"
                    }, n.a.createElement("button", {
                        onClick: this.close,
                        className: "close",
                        "aria-label": W("Zamknij")
                    }), n.a.createElement("div", {
                        className: "toolbar"
                    }, this.props.toolbar), n.a.createElement("div", {
                        className: "popup-content"
                    }, n.a.createElement("div", {
                        className: "content",
                        dangerouslySetInnerHTML: {
                            __html: this.props.content
                        }
                    })))))
                }
            }])
        }(n.a.Component);
        ht.defaultProps = {
            status: !1,
            toolbar: null,
            content: null
        };
        var ut, mt = Object(m.b)((function(e) {
            return {
                status: e.popup.status,
                toolbar: e.popup.toolbar,
                content: e.popup.content
            }
        }
        ), null)(ht), gt = function(e) {
            return y.getState().panel[e]
        }, ft = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null
              , a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
            y.dispatch({
                type: Ue.SET,
                content: {
                    type: e,
                    state: t,
                    object: a
                }
            })
        }, bt = function() {
            y.dispatch({
                type: Ue.RESET
            })
        }, wt = function(e, t, a) {
            var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
              , n = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
            y.dispatch({
                type: Ye.ADD,
                object: Object(O.a)({}, t, {
                    position: e,
                    id: t,
                    node: a,
                    views: i,
                    status: n
                })
            })
        }, vt = function(e, t) {
            y.dispatch({
                type: Ye.EDIT,
                id: e,
                object: t
            })
        }, yt = a(0), kt = Object(r.a)((function e(t, a, i) {
            var n = this;
            Object(l.a)(this, e),
            this.add = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                n.buffer += e,
                n.init && n.init(),
                document.documentElement.classList.add("waiting")
            }
            ,
            this.remove = function() {
                n.buffer--,
                n.buffer <= 0 && (n.done(),
                document.documentElement.classList.remove("waiting"))
            }
            ,
            this.done = function() {
                n.running ? n.update ? n.update() : n.run && n.run() : (n.running = !0,
                n.run && n.run())
            }
            ,
            this.init = t,
            this.run = a,
            this.update = i,
            this.running = !1,
            this.buffer = 0
        }
        )), xt = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.load = function() {
                var e = new yt.FontLoader;
                P.entries(i.fonts).forEach((function(t) {
                    var a = Object(N.a)(t, 2)
                      , n = a[0]
                      , o = a[1];
                    i.buffer.add(),
                    e.load(o, (function(e) {
                        i[n] = e,
                        i.buffer.remove()
                    }
                    ))
                }
                ))
            }
            ,
            this.fonts = t,
            this.callback = a,
            this.buffer = new kt(null,(function() {
                i.callback()
            }
            )),
            this.load()
        }
        )), jt = Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.run = function(e) {
                for (; t.status; )
                    e(),
                    t.index++
            }
            ,
            this.break = function() {
                t.status = !1
            }
            ,
            this.index = 0,
            this.status = !0
        }
        )), zt = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        ut = zt,
        zt.fmod = function(e, t) {
            return e - Math.floor(e / t) * t
        }
        ,
        zt.round = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3;
            return Number(parseFloat(e).toFixed(t))
        }
        ,
        zt.degreesToRotation = function(e) {
            return e * (2 * Math.PI / 360)
        }
        ,
        zt.rotationToDegrees = function(e) {
            return e / (2 * Math.PI / 360)
        }
        ,
        zt.getCenter = function(e, t) {
            return {
                x: (e.x + t.x) / 2,
                y: (e.y + t.y) / 2,
                z: (e.z + t.z) / 2
            }
        }
        ,
        zt.getDistance = function(e, t) {
            var a = (t.x || 0) - (e.x || 0)
              , i = (t.y || 0) - (e.y || 0)
              , n = (t.z || 0) - (e.z || 0);
            return Math.sqrt(Math.pow(a, 2) + Math.pow(i, 2) + Math.pow(n, 2))
        }
        ,
        zt.getRotation = function(e, t) {
            return -Math.atan2(-(e.y - t.y), -(e.x - t.x))
        }
        ,
        zt.getShapeCenter = function(e) {
            var t = 0
              , a = 0
              , i = 0;
            return P.values(e).forEach((function(e) {
                t += e.x || 0,
                a += e.y || 0,
                i += e.z || 0
            }
            )),
            {
                x: t / e.length,
                y: a / e.length,
                z: i / e.length
            }
        }
        ,
        zt.pointsInLine = function(e, t, a) {
            var i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (e.x === t.x && e.y === t.y || e.x === a.x && e.y === a.y || t.x === a.x && t.y === a.y)
                return !i || 0;
            var n = (t.y - e.y) / (t.x - e.x) || 0
              , o = (a.y - e.y) / (a.x - e.x) || 0;
            return i ? o - n || 0 : n === o
        }
        ,
        zt.rotatePoint = function(e, t) {
            var a = ut.getDistance({
                x: 0,
                z: 0
            }, {
                x: e.x,
                z: e.z
            })
              , i = -ut.getRotation({
                x: 0,
                y: 0
            }, {
                x: e.x,
                y: e.z
            }) + t + Math.PI;
            return {
                x: a * Math.cos(i) * -1,
                y: 0,
                z: a * Math.sin(i) * 1
            }
        }
        ,
        zt.rotatePointDegrees = function(e, t) {
            var a = ut.degreesToRotation(t)
              , i = ut.getDistance({
                x: 0,
                z: 0
            }, {
                x: e.x,
                z: e.z
            })
              , n = -ut.getRotation({
                x: 0,
                y: 0
            }, {
                x: e.x,
                y: e.z
            }) + a + Math.PI;
            return {
                x: i * Math.cos(n) * -1,
                y: 0,
                z: i * Math.sin(n) * -1
            }
        }
        ,
        zt.findAngle = function(e, t, a) {
            var i = Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2))
              , n = Math.sqrt(Math.pow(t.x - a.x, 2) + Math.pow(t.y - a.y, 2))
              , o = Math.sqrt(Math.pow(a.x - e.x, 2) + Math.pow(a.y - e.y, 2))
              , s = Math.acos((n * n + i * i - o * o) / (2 * n * i)) / Math.PI * 180;
            return s || 0
        }
        ,
        zt.findAngleBidirectional = function(e, t, a) {
            var i = Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2))
              , n = Math.sqrt(Math.pow(t.x - a.x, 2) + Math.pow(t.y - a.y, 2))
              , o = Math.sqrt(Math.pow(a.x - e.x, 2) + Math.pow(a.y - e.y, 2))
              , s = Math.acos((n * n + i * i - o * o) / (2 * n * i)) / Math.PI * 180;
            if (s) {
                var l = 180 * Math.atan2(-(e.y - t.y), -(e.x - t.x)) / Math.PI - 180 * Math.atan2(-(t.y - a.y), -(t.x - a.x)) / Math.PI;
                return l >= 0 && l < 180 || l >= -360 && l < -180 ? s : -s
            }
            return 0
        }
        ;
        var Mt = zt
          , Ot = function() {
            return Object(r.a)((function e() {
                Object(l.a)(this, e)
            }
            ), null, [{
                key: "Corner",
                value: function(e, t, a, i, n) {
                    (n %= 360) <= 0 && (n += 360);
                    var o = {
                        x: -e,
                        y: -t / 2
                    }
                      , s = {
                        x: -e,
                        y: t / 2
                    }
                      , l = {
                        x: 0,
                        y: -t / 2
                    }
                      , r = {
                        x: 0,
                        y: t / 2
                    }
                      , c = {
                        x: a,
                        y: -i / 2
                    }
                      , p = {
                        x: a,
                        y: i / 2
                    }
                      , d = null
                      , h = null
                      , u = null
                      , m = null;
                    n > 0 && n <= 180 && (d = "d",
                    h = r,
                    l = {
                        x: -t * (1 / Math.tan(n / 2 * Math.PI / 180)),
                        y: -t / 2
                    }),
                    n > 180 && n <= 360 && (d = "c",
                    h = l,
                    r = {
                        x: t * (1 / Math.tan(n / 2 * Math.PI / 180)),
                        y: t / 2
                    }),
                    u = {
                        x: c.x - h.x,
                        y: 0,
                        z: c.y - h.y
                    },
                    u = Mt.rotatePointDegrees({
                        x: u.x,
                        y: u.y,
                        z: u.z
                    }, n),
                    c = {
                        x: h.x - u.x,
                        y: h.y - u.z
                    },
                    m = {
                        x: p.x - h.x,
                        y: 0,
                        z: p.y - h.y
                    },
                    m = Mt.rotatePointDegrees({
                        x: m.x,
                        y: m.y,
                        z: m.z
                    }, n),
                    p = {
                        x: h.x - m.x,
                        y: h.y - m.z
                    };
                    var g = Mt.getCenter({
                        x: l.x,
                        y: 0,
                        z: l.y
                    }, {
                        x: r.x,
                        y: 0,
                        z: r.y
                    });
                    o.x -= g.x,
                    s.x -= g.x,
                    l.x -= g.x,
                    r.x -= g.x,
                    c.x -= g.x,
                    p.x -= g.x;
                    var f = Mt.rotatePointDegrees({
                        x: -a,
                        y: 0,
                        z: 0
                    }, n);
                    return {
                        a: o,
                        b: s,
                        c: l,
                        d: r,
                        e: c,
                        f: p,
                        m1: "c" === d ? {
                            x: l.x,
                            y: l.y + t
                        } : {
                            x: r.x,
                            y: r.y - t
                        },
                        m2: "c" === d ? {
                            x: p.x - f.x,
                            y: p.y - f.z
                        } : {
                            x: c.x - f.x,
                            y: c.y - f.z
                        },
                        pointVertex: d,
                        point: "c" === d ? {
                            x: l.x,
                            y: l.y
                        } : {
                            x: r.x,
                            y: r.y
                        },
                        r: {
                            x: g.x,
                            y: g.z
                        },
                        status: Mt.getDistance(l, r) <= 1
                    }
                }
            }, {
                key: "Peak2Corner",
                value: function(e, t, a, i, n, o, s) {
                    (s %= 360) <= 0 && (s += 360);
                    var l = {
                        x: -e,
                        y: -t / 2
                    }
                      , r = {
                        x: -e,
                        y: t / 2
                    }
                      , c = {
                        x: 0,
                        y: -t / 2
                    }
                      , p = {
                        x: 0,
                        y: t / 2
                    }
                      , d = {
                        x: a,
                        y: -i / 2
                    }
                      , h = {
                        x: a,
                        y: i / 2
                    }
                      , u = null
                      , m = null
                      , g = null
                      , f = null;
                    s > 0 && s <= 180 && (u = "d",
                    m = p,
                    c = {
                        x: -t * (1 / Math.tan(s / 2 * Math.PI / 180)),
                        y: -t / 2
                    }),
                    s > 180 && s <= 360 && (u = "c",
                    m = c,
                    p = {
                        x: t * (1 / Math.tan(s / 2 * Math.PI / 180)),
                        y: t / 2
                    }),
                    g = {
                        x: d.x - m.x,
                        y: 0,
                        z: d.y - m.y
                    },
                    g = Mt.rotatePointDegrees({
                        x: g.x,
                        y: g.y,
                        z: g.z
                    }, s),
                    d = {
                        x: m.x - g.x,
                        y: m.y - g.z
                    },
                    f = {
                        x: h.x - m.x,
                        y: 0,
                        z: h.y - m.y
                    },
                    f = Mt.rotatePointDegrees({
                        x: f.x,
                        y: f.y,
                        z: f.z
                    }, s),
                    h = {
                        x: m.x - f.x,
                        y: m.y - f.z
                    };
                    var b = {
                        x: -e,
                        y: -n / 2
                    }
                      , w = {
                        x: -e,
                        y: n / 2
                    }
                      , v = {
                        x: (i - o) / 2 * (1 / Math.tan(s / 2 * Math.PI / 180)),
                        y: -n / 2
                    }
                      , y = {
                        x: -(i - o) / 2 * (1 / Math.tan(s / 2 * Math.PI / 180)),
                        y: n / 2
                    }
                      , k = {
                        x: a,
                        y: -o / 2
                    }
                      , x = {
                        x: a,
                        y: o / 2
                    };
                    s > 0 && s <= 180 && (v = {
                        x: -(t - (t - n) / 2) * (1 / Math.tan(s / 2 * Math.PI / 180)),
                        y: -n / 2
                    }),
                    s > 180 && s <= 360 && (y = {
                        x: (t - (t - n) / 2) * (1 / Math.tan(s / 2 * Math.PI / 180)),
                        y: n / 2
                    }),
                    g = {
                        x: k.x - m.x,
                        y: 0,
                        z: k.y - m.y
                    },
                    g = Mt.rotatePointDegrees({
                        x: g.x,
                        y: g.y,
                        z: g.z
                    }, s),
                    k = {
                        x: m.x - g.x,
                        y: m.y - g.z
                    },
                    f = {
                        x: x.x - m.x,
                        y: 0,
                        z: x.y - m.y
                    },
                    f = Mt.rotatePointDegrees({
                        x: f.x,
                        y: f.y,
                        z: f.z
                    }, s),
                    x = {
                        x: m.x - f.x,
                        y: m.y - f.z
                    };
                    var j = Mt.getCenter({
                        x: c.x,
                        y: 0,
                        z: c.y
                    }, {
                        x: p.x,
                        y: 0,
                        z: p.y
                    });
                    return l.x -= j.x,
                    r.x -= j.x,
                    c.x -= j.x,
                    p.x -= j.x,
                    d.x -= j.x,
                    h.x -= j.x,
                    b.x -= j.x,
                    w.x -= j.x,
                    v.x -= j.x,
                    y.x -= j.x,
                    k.x -= j.x,
                    x.x -= j.x,
                    {
                        a: l,
                        b: r,
                        c: c,
                        d: p,
                        e: d,
                        f: h,
                        a1: b,
                        b1: w,
                        c1: v,
                        d1: y,
                        e1: k,
                        f1: x,
                        pointVertex: u,
                        point: "c" === u ? {
                            x: c.x,
                            y: c.y
                        } : {
                            x: p.x,
                            y: p.y
                        },
                        point1: "c" === u ? {
                            x: v.x,
                            y: v.y
                        } : {
                            x: y.x,
                            y: y.y
                        },
                        r: {
                            x: j.x,
                            y: j.z
                        },
                        status: Mt.getDistance(c, p) <= 1
                    }
                }
            }, {
                key: "ParallelogramCut",
                value: function(e, t, a, i, n, o, s) {
                    var l = a >= 0 ? 0 : -a
                      , r = a > 0 ? a : 0
                      , c = i >= 0 ? 0 : -i
                      , p = i > 0 ? i : 0
                      , d = {
                        x: -e / 2 + l + n + s.a,
                        y: -t / 2
                    }
                      , h = {
                        x: -e / 2 + r + n + s.b,
                        y: t / 2
                    }
                      , u = {
                        x: e / 2 - c - o - s.c,
                        y: t / 2
                    }
                      , m = {
                        x: e / 2 - p - o - s.d,
                        y: -t / 2
                    }
                      , g = Math.abs(a / 4) - Math.abs(i / 4);
                    return d.x -= g,
                    h.x -= g,
                    u.x -= g,
                    m.x -= g,
                    {
                        a: {
                            x: d.x,
                            y: d.y
                        },
                        b: {
                            x: h.x,
                            y: h.y
                        },
                        c: {
                            x: u.x,
                            y: u.y
                        },
                        d: {
                            x: m.x,
                            y: m.y
                        },
                        ia: l + n,
                        ib: r + n,
                        ic: c + o,
                        id: p + o
                    }
                }
            }, {
                key: "PeakParallelogram",
                value: function(e, t, a, i, n) {
                    var o = (t - a) / 2 / t
                      , s = 1 - (t - a) / 2 / t
                      , l = i >= 0 ? 0 : -i
                      , r = i > 0 ? i : 0
                      , c = n >= 0 ? 0 : -n
                      , p = n > 0 ? n : 0
                      , d = l * s + r * o
                      , h = l * o + r * s
                      , u = c * s + p * o
                      , m = c * o + p * s
                      , g = {
                        x: -e / 2 + l,
                        y: -t / 2
                    }
                      , f = {
                        x: -e / 2 + r,
                        y: t / 2
                    }
                      , b = {
                        x: e / 2 - c,
                        y: t / 2
                    }
                      , w = {
                        x: e / 2 - p,
                        y: -t / 2
                    }
                      , v = {
                        x: -e / 2 + d,
                        y: -a / 2
                    }
                      , y = {
                        x: -e / 2 + h,
                        y: a / 2
                    }
                      , k = {
                        x: e / 2 - u,
                        y: a / 2
                    }
                      , x = {
                        x: e / 2 - m,
                        y: -a / 2
                    }
                      , j = Math.abs(i / 4) - Math.abs(n / 4);
                    return g.x -= j,
                    f.x -= j,
                    b.x -= j,
                    w.x -= j,
                    v.x -= j,
                    y.x -= j,
                    k.x -= j,
                    x.x -= j,
                    {
                        a: {
                            x: g.x,
                            y: g.y
                        },
                        b: {
                            x: f.x,
                            y: f.y
                        },
                        c: {
                            x: b.x,
                            y: b.y
                        },
                        d: {
                            x: w.x,
                            y: w.y
                        },
                        a1: {
                            x: v.x,
                            y: v.y
                        },
                        b1: {
                            x: y.x,
                            y: y.y
                        },
                        c1: {
                            x: k.x,
                            y: k.y
                        },
                        d1: {
                            x: x.x,
                            y: x.y
                        },
                        ia: l,
                        ib: r,
                        ic: c,
                        id: p,
                        ia1: d,
                        ib1: h,
                        ic1: u,
                        id1: m
                    }
                }
            }])
        }()
          , Et = a(24)
          , _t = a.n(Et)
          , St = a(65)
          , Pt = a(66)
          , Ct = a.n(Pt)
          , Dt = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.check3dSupport = function() {
                var e = document.createElement("canvas")
                  , t = e.getContext("webgl") || e.getContext("experimental-webgl");
                t && WebGLRenderingContext
            }
            ,
            this.stats = function() {
                i.instance.debug ? (i.stats = new Ct.a,
                i.stats.domElement.style.position = "absolute",
                i.stats.domElement.style.top = "auto",
                i.stats.domElement.style.left = "0",
                i.stats.domElement.style.right = "auto",
                i.stats.domElement.style.bottom = "0",
                i.stats.domElement.style.zIndex = 1,
                i.canvas.appendChild(i.stats.domElement)) : i.stats = null
            }
            ,
            this.init = function() {
                i.setSizeAndAspect(),
                i.timestamp = 0,
                i.fps = 1e3 / 30,
                i.clock = new yt.Clock,
                i.render = new yt.WebGLRenderer({
                    alpha: !0,
                    antialias: !i.instance.vr && "on" === i.instance.details.antialiassing
                }),
                i.mixers = [],
                i.loader = new yt.TextureLoader,
                i.gltf = new St.a,
                i.render.setPixelRatio(window.devicePixelRatio < 2 ? window.devicePixelRatio : 2),
                i.render.setSize(i.width, i.height),
                i.render.shadowMap.enabled = !0,
                i.render.localClippingEnabled = !0,
                i.render.sortObjects = !1,
                i.canvas.insertBefore(i.render.domElement, i.canvas.firstChild),
                i.resize(),
                i.reqestAnimation()
            }
            ,
            this.reqestAnimation = function() {
                i.reqestAnimationID = window.requestAnimationFrame((function() {
                    "on" === i.instance.details.framelimit ? Date.now() > i.timestamp && (i.refresh(),
                    i.timestamp += i.fps,
                    i.timestamp < Date.now() && (i.timestamp = Date.now())) : i.refresh(),
                    i.reqestAnimation()
                }
                ))
            }
            ,
            this.cancelAnimation = function() {
                i.reqestAnimationID && window.cancelAnimationFrame(i.reqestAnimationID)
            }
            ,
            this.refresh = function() {
                i.animations && i.animations.render(),
                i.scene && i.camera && (i.render.render(i.scene, i.camera),
                P.count(i.mixers) && P.values(i.mixers).forEach((function(e) {
                    e.update(i.clock.getDelta())
                }
                ))),
                i.labels && i.labels.render(),
                i.stats && i.stats.update()
            }
            ,
            this.reset = function() {
                i.setSizeAndAspect(),
                P.values(i.cameras).forEach((function(e) {
                    switch (e.type) {
                    case "PerspectiveCamera":
                        e.aspect = i.aspect;
                        break;
                    case "OrthographicCamera":
                        e.left = -i.width / i.ratio,
                        e.right = i.width / i.ratio,
                        e.top = i.height / i.ratio,
                        e.bottom = -i.height / i.ratio
                    }
                    e.updateProjectionMatrix()
                }
                )),
                i.render.setSize(i.width, i.height)
            }
            ,
            this.resize = function() {
                ["resize"].forEach((function(e) {
                    return window.addEventListener(e, (function() {
                        i.reset()
                    }
                    ))
                }
                ))
            }
            ,
            this.setSizeAndAspect = function() {
                i.width = i.canvas.offsetWidth,
                i.height = i.canvas.offsetHeight,
                i.aspect = i.width / i.height,
                i.ratio = 56.5
            }
            ,
            this.setOrientationControls = function() {
                i.orientationControlsStatus = !1
            }
            ,
            this.raycaster = function(e) {
                if ("undefined" === typeof e.layerX) {
                    var t = e.touches[0];
                    t ? (e.layerX = t.pageX - (i.canvas.getBoundingClientRect().left + window.scrollX),
                    e.layerY = t.pageY - (i.canvas.getBoundingClientRect().top + window.scrollY),
                    i.layerX = e.layerX,
                    i.layerY = e.layerY) : (e.layerX = i.layerX,
                    e.layerY = i.layerY)
                }
                var a = e.layerX / i.width * 2 - 1
                  , n = -e.layerY / i.height * 2 + 1
                  , o = new yt.Vector2(a,n)
                  , s = new yt.Raycaster;
                return s.setFromCamera(o, i.camera),
                s
            }
            ,
            this.instance = t,
            this.canvas = a,
            this.orientationControlsStatus = !0,
            this.check3dSupport(),
            this.stats(),
            this.init()
        }
        ))
          , Rt = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.animation = function() {
                a.status && (a.time.current = Date.now() - a.time.start,
                a.state = a.time.current / a.duration,
                a.state < 0 && (a.time.current = 0,
                a.state = 0),
                a.state > 1 && (a.time.current = a.duration,
                a.state = 1,
                a.stop()),
                a.callback(a))
            }
            ,
            this.start = function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                a.status || (a.duration = e,
                a.data = t,
                a.status = !0,
                a.time = {
                    start: Date.now(),
                    current: 0
                },
                a.state = 0)
            }
            ,
            this.stop = function() {
                a.status = !1
            }
            ,
            this.callback = t,
            this.duration = 0,
            this.data = {},
            this.status = !1,
            this.time = {
                start: 0,
                current: 0
            },
            this.state = 0
        }
        ))
          , Ft = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.add = function(e, t) {
                return i.animations[e] = t,
                i.animations[e]
            }
            ,
            this.cycle = function(e, t) {
                return i.cycles[e] = new Rt(t),
                i.cycles[e]
            }
            ,
            this.render = function() {
                P.values(i.animations).forEach((function(e) {
                    return e()
                }
                )),
                P.values(i.cycles).forEach((function(e) {
                    return e.animation()
                }
                ))
            }
            ,
            this.instance = t,
            this.three = a,
            this.animations = [],
            this.cycles = []
        }
        ))
          , Vt = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.addFog = function(e, t) {
                var a = Object(k.a)(Object(k.a)({}, {
                    color: 16777215,
                    distance: 500
                }), t);
                i.three.scenes[e].background = new yt.Color(a.color),
                i.three.scenes[e].fog = new yt.Fog(a.color,0,a.distance)
            }
            ,
            this.removeFog = function(e) {
                i.three.scenes[e].background = new yt.Color(16777215),
                i.three.scenes[e].fog = null
            }
            ,
            this.addGrid = function(e, t, a) {
                var n = Object(k.a)(Object(k.a)({}, {
                    size: 500,
                    frequency: 1,
                    color: 0,
                    maincolor: 0,
                    resetClick: !1
                }), a);
                i.objects[t] = new yt.GridHelper(n.size,n.size / n.frequency,n.maincolor,n.color),
                i.objects[t].position.set(0, 0, 0),
                i.three.scenes[e].add(i.objects[t]),
                n.resetClick && i.instance.resetClick(i.objects[t])
            }
            ,
            this.addSky = function(e, t, a) {
                var n = Object(k.a)(Object(k.a)({}, {
                    material: "Lambert",
                    source: null,
                    color: 16777215,
                    size: 300,
                    points: 8,
                    repeatX: 1,
                    repeatY: 1,
                    intensity: 0,
                    opacity: 1,
                    transparent: !1,
                    visible: !0,
                    resetClick: !1
                }), a);
                if (n.source) {
                    var o = i.three.loader.load(n.source, (function() {
                        i.objects[t].visible = n.visible
                    }
                    ));
                    o.wrapS = yt.RepeatWrapping,
                    o.wrapT = yt.RepeatWrapping,
                    o.repeat.set(n.repeatX, n.repeatY),
                    o.anisotropy = i.instance.details.anisotropy / 2,
                    n.parameters = {
                        map: o,
                        aoMap: o,
                        aoMapIntensity: n.intensity
                    }
                } else
                    n.parameters = {
                        color: n.color
                    };
                var s = new (yt["Mesh".concat(n.material, "Material")])(Object(k.a)(Object(k.a)({}, n.parameters), {
                    opacity: n.opacity,
                    transparent: n.transparent
                }))
                  , l = new yt.SphereGeometry(n.size,n.points,n.points);
                l.scale(-1, 1, 1),
                i.objects[t] = new yt.Mesh(l,s),
                i.objects[t].position.set(0, 0, 0),
                i.objects[t].visible = !1,
                i.three.scenes[e].add(i.objects[t]),
                n.resetClick && i.instance.resetClick(i.objects[t])
            }
            ,
            this.addGround = function(e, t, a) {
                var n = Object(k.a)(Object(k.a)({}, {
                    material: "Lambert",
                    source: null,
                    color: 16777215,
                    size: 600,
                    repeatX: 1,
                    repeatY: 1,
                    intensity: 0,
                    opacity: 1,
                    transparent: !1,
                    rotation: "top",
                    visible: !0,
                    resetClick: !1
                }), a);
                if (n.source) {
                    var o = i.three.loader.load(n.source, (function() {
                        i.objects[t].visible = n.visible
                    }
                    ));
                    o.wrapS = yt.RepeatWrapping,
                    o.wrapT = yt.RepeatWrapping,
                    o.repeat.set(n.repeatX, n.repeatY),
                    o.anisotropy = i.instance.details.anisotropy / 2,
                    n.parameters = {
                        map: o,
                        aoMap: o,
                        aoMapIntensity: n.intensity
                    }
                } else
                    n.parameters = {
                        color: n.color
                    };
                var s = new (yt["Mesh".concat(n.material, "Material")])(Object(k.a)(Object(k.a)({}, n.parameters), {
                    opacity: n.opacity,
                    transparent: n.transparent
                }))
                  , l = new yt.PlaneBufferGeometry(n.size,n.size);
                i.objects[t] = new yt.Mesh(l,s),
                i.objects[t].receiveShadow = !0,
                i.objects[t].position.set(0, i.instance.dpsi(-2), 0),
                i.objects[t].rotation.x = "top" === n.rotation ? -Math.PI / 2 : 0,
                i.objects[t].visible = !1,
                i.three.scenes[e].add(i.objects[t]),
                n.resetClick && i.instance.resetClick(i.objects[t])
            }
            ,
            this.addLogo = function(e, t, a) {
                var n = Object(k.a)(Object(k.a)({}, {
                    material: "Lambert",
                    source: null,
                    color: 16777215,
                    size: 600,
                    repeatX: 1,
                    repeatY: 1,
                    intensity: 0,
                    opacity: 1,
                    transparent: !1,
                    rotation: "top",
                    visible: !0,
                    resetClick: !1
                }), a);
                if (n.source) {
                    var o = i.three.loader.load(n.source, (function() {
                        i.objects[t].visible = n.visible
                    }
                    ));
                    o.wrapS = yt.RepeatWrapping,
                    o.wrapT = yt.RepeatWrapping,
                    o.repeat.set(n.repeatX, n.repeatY),
                    o.anisotropy = i.instance.details.anisotropy / 2,
                    n.parameters = {
                        map: o,
                        aoMap: o,
                        aoMapIntensity: n.intensity
                    }
                } else
                    n.parameters = {
                        color: n.color
                    };
                var s = new (yt["Mesh".concat(n.material, "Material")])(Object(k.a)(Object(k.a)({}, n.parameters), {
                    opacity: n.opacity,
                    transparent: n.transparent
                }))
                  , l = new yt.PlaneBufferGeometry(n.size,n.size);
                i.objects[t] = new yt.Mesh(l,s),
                i.objects[t].position.set(0, i.instance.dpsi(-1), 0),
                i.objects[t].rotation.x = "top" === n.rotation ? -Math.PI / 2 : 0,
                i.objects[t].visible = !1,
                i.three.scenes[e].add(i.objects[t]),
                n.resetClick && i.instance.resetClick(i.objects[t])
            }
            ,
            this.addLight = function(e, t, a) {
                var n = Object(k.a)(Object(k.a)({}, {
                    intensity: .5,
                    color: 16777215,
                    position: [-50, 50, 100],
                    shadow: !0,
                    helper: !1
                }), a);
                if (i.lights[t] = [],
                i.lights[t].light = new yt.DirectionalLight(n.color,n.intensity),
                i.lights[t].light.position.set(n.position[0], n.position[1], n.position[2]),
                n.shadow) {
                    var o = i.three.cameras[e].controls
                      , s = (null === o || void 0 === o ? void 0 : o.maxPositionX) ? .5 * o.maxPositionX : 50
                      , l = (null === o || void 0 === o ? void 0 : o.maxPositionZ) ? .5 * o.maxPositionZ : 25;
                    i.lights[t].light.castShadow = !!i.instance.details.shadowsPrecision,
                    i.lights[t].light.shadow.mapSize.width = 2 * s * i.instance.details.shadowsPrecision,
                    i.lights[t].light.shadow.mapSize.height = 2 * l * i.instance.details.shadowsPrecision,
                    i.lights[t].light.shadow.camera = new yt.OrthographicCamera(-s,s,-l,l,.04,500)
                }
                i.three.scenes[e].add(i.lights[t].light),
                n.helper && (i.lights[t].helper = new yt.CameraHelper(i.lights[t].light.shadow.camera),
                i.three.scenes[e].add(i.lights[t].helper))
            }
            ,
            this.instance = t,
            this.three = a,
            this.objects = [],
            this.lights = []
        }
        ))
          , It = a(67)
          , Lt = a.n(It)
          , Ht = a(68)
          , Tt = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.add = function(e, t) {
                var a = {
                    background: null,
                    perspective: !0,
                    tone: yt.NoToneMapping,
                    light: 1,
                    lightColor: 16777215,
                    position: [10, 5, 20],
                    lookAt: [0, 0, 0],
                    controls: !0,
                    controlsMinDistance: 1,
                    controlsMaxDistance: 100,
                    controlsRotate: !0,
                    controlsRotateSpeed: .2,
                    controlsPan: !0,
                    controlsPanHorizontal: !0,
                    controlsPanVertical: !0,
                    controlsZoom: !0,
                    controlsKeys: !1,
                    controlsMouseButtons: {
                        LEFT: yt.MOUSE.ROTATE,
                        MIDDLE: null,
                        RIGHT: yt.MOUSE.PAN
                    },
                    interaction: !0
                }
                  , n = Object(k.a)(Object(k.a)({}, a), t);
                i.three.scenes[e] = new yt.Scene,
                n.perspective ? i.three.cameras[e] = new yt.PerspectiveCamera(45,i.three.aspect,.04,500) : i.three.cameras[e] = new yt.OrthographicCamera(-i.width / i.ratio,i.width / i.ratio,i.height / i.ratio,-i.height / i.ratio,.04,500),
                i.three.cameras[e].position.set(n.position[0], n.position[1], n.position[2]),
                i.three.cameras[e].lookAt(n.lookAt[0], n.lookAt[1], n.lookAt[2]),
                i.three.cameras[e].active = !1,
                n.background && (i.three.scenes[e].background = new yt.Color(n.background)),
                i.three.scenes[e].tone = n.tone,
                n.light && (i.three.scenes[e].AmbientLight = new yt.AmbientLight(n.lightColor,n.light),
                i.three.scenes[e].add(i.three.scenes[e].AmbientLight)),
                n.controls && (i.three.cameras[e].controls = new Lt.a(i.three.cameras[e],i.three.render.domElement),
                i.three.cameras[e].controls.minDistance = n.controlsMinDistance,
                i.three.cameras[e].controls.maxDistance = n.controlsMaxDistance,
                i.three.cameras[e].controls.maxPositionX = void 0 !== n.controlsMaxDistanceX ? n.controlsMaxDistanceX : n.controlsMaxDistance,
                i.three.cameras[e].controls.maxPositionY = void 0 !== n.controlsMaxDistanceY ? n.controlsMaxDistanceY : n.controlsMaxDistance,
                i.three.cameras[e].controls.maxPositionZ = void 0 !== n.controlsMaxDistanceZ ? n.controlsMaxDistanceZ : n.controlsMaxDistance,
                i.three.cameras[e].controls.rotateSpeed = n.controlsRotate ? n.controlsRotateSpeed : 0,
                i.three.cameras[e].controls.minPolarAngle = void 0 !== n.controlsMinPolarAngle ? n.controlsMinPolarAngle : 0,
                i.three.cameras[e].controls.maxPolarAngle = void 0 !== n.controlsMaxPolarAngle ? n.controlsMaxPolarAngle : Math.PI / 2 - .075,
                i.three.cameras[e].controls.enabled = !1,
                i.three.cameras[e].controls.enablePan = n.controlsPan,
                i.three.cameras[e].controls.enablePanHorizontal = n.controlsPanHorizontal,
                i.three.cameras[e].controls.enablePanVertical = n.controlsPanVertical,
                i.three.cameras[e].controls.enableZoom = n.controlsZoom,
                i.three.cameras[e].controls.enableKeys = n.controlsKeys,
                i.three.cameras[e].controls.mouseButtons = n.controlsMouseButtons),
                n.interaction && (i.three.scenes[e].interaction = new Ht.Interaction(i.three.render,i.three.scenes[e],i.three.cameras[e])),
                i.set(e)
            }
            ,
            this.get = function() {
                return i.current
            }
            ,
            this.set = function(e) {
                i.three.camera && (i.three.camera.active = !1,
                i.three.camera.controls && (i.three.camera.controls.enabled = !1)),
                i.current = e,
                i.three.scene = i.three.scenes[e],
                i.three.camera = i.three.cameras[e],
                i.three.render.toneMapping = i.three.scene.tone,
                i.three.scene.tone === yt.NoToneMapping ? (i.three.render.toneMappingExposure = 1,
                i.three.render.physicallyCorrectLights = !1,
                i.three.render.outputEncoding = yt.LinearEncoding) : (i.three.render.toneMappingExposure = 1,
                i.three.render.physicallyCorrectLights = !0,
                i.three.render.outputEncoding = yt.LinearEncoding),
                i.three.camera && (i.three.camera.active = !0,
                i.three.camera.controls && (i.three.camera.controls.enabled = !0));
                var t = document.querySelector(".display-view");
                t && (t.style.display = "none");
                var a = document.querySelector(".display-view-".concat(e));
                a && (a.style.display = "block")
            }
            ,
            this.instance = t,
            this.three = a,
            this.current = !1,
            this.three.scenes = [],
            this.three.scene = null,
            this.three.cameras = [],
            this.three.camera = null
        }
        ))
          , Bt = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.reset = function() {
                a.cache.active = !1,
                a.cache.start = null,
                a.cache.end = null
            }
            ,
            this.start = function() {
                a.reset(),
                a.cache.active = !0,
                a.instance.extensions.communique.set("".concat(W("Wybierz pierwszy element"), "..."))
            }
            ,
            this.addPoleToAverage = function(e) {
                if (a.cache.active && a.instance.poles[e]) {
                    if (!a.cache.start && !a.cache.end)
                        return a.cache.start = a.instance.poles[e],
                        void a.instance.extensions.communique.set("".concat(W("Wybierz ostatni element"), "..."));
                    a.cache.start && !a.cache.end && (a.cache.end = a.instance.poles[e],
                    a.instance.extensions.communique.set(null),
                    a.run())
                }
            }
            ,
            this.run = function() {
                var e, t;
                a.cache.start && a.cache.end && (a.cache.start.id !== a.cache.end.id && (parseInt(a.cache.start.id, 10) < parseInt(a.cache.end.id, 10) ? (e = a.cache.start,
                t = a.cache.end) : (e = a.cache.end,
                t = a.cache.start),
                a.verifyAction(e, t)));
                a.reset()
            }
            ,
            this.verifyAction = function(e, t) {
                for (var i = 0, n = e, o = !0, s = 0; ; ) {
                    if ("corner" === n.blockMaterial.block.type && n.id !== e.id && n.id !== t.id) {
                        o = !1;
                        break
                    }
                    if (i > a.secureLoop || n.id === t.id)
                        break;
                    if (n.config.polygonBreak) {
                        o = !1;
                        break
                    }
                    i++,
                    s += (n = n.next).wall.width
                }
                o && s ? a.runAction(e, t, Mt.round(s / i)) : a.instance.extensions.communique.set("".concat(W("Tych element\xf3w nie mo\u017cna rostawi\u0107 r\xf3wnomiernie"), "."))
            }
            ,
            this.runAction = function(e, t, i) {
                var n = 0
                  , o = e
                  , s = 0
                  , l = 0
                  , r = 0;
                0 === e.config.blockMaterialId.indexOf("c1-") && (r = e.next.rotation - e.rotation);
                for (var c = e.rotation + Mt.degreesToRotation("corner" === e.blockMaterial.block.type ? 180 - e.angle : 0) + r; ; ) {
                    if (o.config.virtual)
                        s = 0;
                    else
                        switch (o.blockMaterial.block.type) {
                        case "cuboid":
                            s = o.width / 2;
                            break;
                        case "corner":
                            s = o.depth + o.points.r.x
                        }
                    if (o.id !== e.id && o.id !== t.id) {
                        var p = o.prev.position
                          , d = Mt.rotatePoint({
                            x: i + s + l,
                            z: 0
                        }, c);
                        o.position.x = p.x + d.x,
                        o.position.z = p.z + d.z,
                        o.moveUpdate(!1)
                    }
                    if (n > a.secureLoop || o.id === t.id)
                        break;
                    o = o.next,
                    n++,
                    l = s
                }
                a.instance.extensions.communique.set("".concat(W("Elementy zosta\u0142y pomy\u015blnie rozstawione"), "."))
            }
            ,
            this.instance = t,
            this.secureLoop = 100,
            this.cache = {
                active: !1,
                start: null,
                end: null
            }
        }
        ))
          , Wt = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                var t;
                !a.instance.editMode() || a.instance.project.user_id && a.instance.project.user_id !== (null === (t = w.user) || void 0 === t ? void 0 : t.id) || !e ? a.stop() : a.start()
            }
            ,
            this.start = function() {
                a.interval || (a.interval = setInterval((function() {
                    a.instance.extensions.storage.save(!1)
                }
                ), 1e3 * a.time))
            }
            ,
            this.stop = function() {
                a.interval && clearInterval(a.interval)
            }
            ,
            this.instance = t,
            this.time = 120
        }
        ))
          , Nt = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                e ? (a.container.classList.add("active"),
                a.content.innerHTML = e,
                a.timeout && clearTimeout(a.timeout),
                a.timeout = setTimeout((function() {
                    a.reset(!1)
                }
                ), a.time)) : a.reset(!1)
            }
            ,
            this.reset = function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                a.container.classList.remove("active"),
                a.content.innerHTML = "",
                e && (a.instance.extensions.dimensions.reset(),
                a.instance.extensions.average.reset())
            }
            ,
            this.instance = t,
            this.time = 5e3,
            wt("main", "communique", n.a.createElement("div", {
                className: "communique",
                ref: function(e) {
                    a.container = e
                }
            }, n.a.createElement("div", {
                onClick: this.reset,
                ref: function(e) {
                    a.content = e
                }
            })))
        }
        ));
        var At = function(e) {
            function t(e) {
                var a, i, n, o;
                Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).click = function() {
                    a.setState((function(e) {
                        var t = e.value + 1 < a.props.options.length ? e.value + 1 : 0;
                        return {
                            value: t,
                            position: a.getPosition(t)
                        }
                    }
                    ), (function() {
                        a.props.action(a.props.options[a.state.value], a.state.value)
                    }
                    ))
                }
                ,
                a.getPosition = function(e) {
                    return e / a.props.options.length * 100
                }
                ;
                var s = e.value ? parseInt(P.find(P.keys(e.options), (function(t) {
                    return e.options[t] === e.value
                }
                )), 10) : 0;
                return a.state = {
                    value: s,
                    position: a.getPosition(s)
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.click,
                        title: this.props.description,
                        "aria-label": this.props.description,
                        className: "button-switch"
                    }, n.a.createElement("span", {
                        className: "button-switch-handler",
                        style: {
                            top: "".concat(this.state.position, "%")
                        }
                    }), P.values(this.props.options).map((function(e) {
                        return n.a.createElement("span", {
                            className: "button-switch-type-".concat(e),
                            key: e
                        })
                    }
                    )))
                }
            }])
        }(n.a.Component);
        At.defaultProps = {
            action: null,
            description: null,
            options: [],
            value: null
        };
        var Gt = At
          , Ut = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.content = function() {
                return n.a.createElement("div", {
                    className: "day-night p-1"
                }, n.a.createElement(Gt, {
                    action: a.switch,
                    description: W("Dzie\u0144 / noc"),
                    options: ["day", "night"],
                    value: a.status
                }))
            }
            ,
            this.switch = function(e) {
                switch (e) {
                case "day":
                    a.status = e,
                    a.three.scenes["3d"].background = new yt.Color(16777215),
                    a.three.scenes["3d"].AmbientLight.intensity = 2.5,
                    a.three.environment.lights.sun.light.intensity = .65,
                    a.three.environment.lights.sun2.light.intensity = .5,
                    a.three.environment.lights.sun3.light.intensity = .1,
                    a.three.environment.lights.sun4.light.intensity = .1,
                    a.three.environment.objects.sky && (a.three.environment.objects.sky.visible = !0),
                    a.three.environment.objects.stars && (a.three.environment.objects.stars.visible = !1),
                    P.values(a.instance.poles).forEach((function(e) {
                        e.additionals.mailbox.config.group && e.additionals.mailbox.config.model && e.additionals.mailbox.config.color && e.additionals.mailbox.do(),
                        e.additionals.lamp.config.group && e.additionals.lamp.config.model && e.additionals.lamp.do(),
                        e.additionals.ledblock.config.group && e.additionals.ledblock.config.model && e.additionals.ledblock.do()
                    }
                    ));
                    break;
                case "night":
                    a.status = e,
                    a.three.scenes["3d"].background = new yt.Color(1052693),
                    a.three.scenes["3d"].AmbientLight.intensity = 1,
                    a.three.environment.lights.sun.light.intensity = 0,
                    a.three.environment.lights.sun2.light.intensity = 0,
                    a.three.environment.lights.sun3.light.intensity = 0,
                    a.three.environment.lights.sun4.light.intensity = 0,
                    a.three.environment.objects.sky && (a.three.environment.objects.sky.visible = !1),
                    a.three.environment.objects.stars ? a.three.environment.objects.stars.visible = !0 : a.three.environment.addSky("3d", "stars", {
                        source: "/assets/img/environment/stars.jpg",
                        repeatX: 8,
                        repeatY: 16,
                        resetClick: !0
                    }),
                    P.values(a.instance.poles).forEach((function(e) {
                        e.additionals.mailbox.config.group && e.additionals.mailbox.config.model && e.additionals.mailbox.config.color && e.additionals.mailbox.do(),
                        e.additionals.lamp.config.group && e.additionals.lamp.config.model && e.additionals.lamp.do(),
                        e.additionals.ledblock.config.group && e.additionals.ledblock.config.model && e.additionals.ledblock.do()
                    }
                    ))
                }
            }
            ,
            this.instance = t,
            this.three = t.three,
            this.status = "day",
            wt("top-right", "day-night", this.content, ["3d"], !1)
        }
        ));
        function Kt(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var qt = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Kt(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action,
                        title: this.props.description,
                        "aria-label": this.props.description,
                        className: G()("button-image", "button-image-type-".concat(this.props.type)),
                        style: {
                            opacity: this.props.disabled ? .4 : 1,
                            order: this.props.order
                        }
                    })
                }
            }])
        }(n.a.Component);
        qt.defaultProps = {
            action: null,
            description: null,
            disabled: !1,
            order: 1
        };
        var Yt = qt
          , Zt = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.execute = function() {
                window.location.replace("/graphic-details/")
            }
            ,
            this.instance = t,
            this.three = t.three,
            wt("bottom-left", "details", n.a.createElement(Yt, {
                action: function() {
                    return a.execute()
                },
                type: "details",
                description: W("Ustawienia grafiki"),
                order: 2
            }))
        }
        ))
          , Xt = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.type = function(e) {
                i.target.setType(e),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.position = function(e) {
                i.target.setPosition(e),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.align = function(e) {
                i.target.setAlign(e),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.remove = function() {
                ot(W("Usun\u0105\u0107 ?"), (function() {
                    i.instance.extensions.dimensions.removeDimension(i.target.id),
                    i.instance.resetOptions(),
                    i.instance.setModified()
                }
                ))
            }
            ,
            this.instance = t,
            this.target = a
        }
        ))
          , Jt = a(21)
          , Qt = a.n(Jt)
          , $t = Object(r.a)((function e(t, a, i) {
            Object(l.a)(this, e);
            var n = new yt.Geometry;
            n.vertices = [new yt.Vector3(-t / 2 + i / 2,0,-a / 2), new yt.Vector3(-t / 2 + i / 2,0,a / 2), new yt.Vector3(t / 2 - i / 2,0,a / 2), new yt.Vector3(t / 2 - i / 2,0,-a / 2), new yt.Vector3(-t / 2 + i / 2,0,-i / 2), new yt.Vector3(-t / 2 + i / 2,0,i / 2), new yt.Vector3(t / 2 - i / 2,0,i / 2), new yt.Vector3(t / 2 - i / 2,0,-i / 2), new yt.Vector3(-t / 2,0,0), new yt.Vector3(t / 2,0,0)],
            n.faces = [new yt.Face3(1,3,0), new yt.Face3(1,2,3), new yt.Face3(8,5,4), new yt.Face3(6,9,7)],
            n.faces[0].materialIndex = 0,
            n.faces[1].materialIndex = 0;
            var o = i / t / 2
              , s = i / t / 2
              , r = i > a ? (i - a) / 2 / i : 0
              , c = a > i ? (a - i) / 2 / a : 0;
            return n.faceVertexUvs[0] = [[new yt.Vector2(s,r), new yt.Vector2(1 - s,1 - r), new yt.Vector2(s,1 - r)], [new yt.Vector2(s,r), new yt.Vector2(1 - s,r), new yt.Vector2(1 - s,1 - r)], [new yt.Vector2(0,.5), new yt.Vector2(o,c), new yt.Vector2(o,1 - c)], [new yt.Vector2(1 - o,c), new yt.Vector2(1,.5), new yt.Vector2(1 - o,1 - c)]],
            n
        }
        ))
          , ea = Object(r.a)((function e(t, a) {
            Object(l.a)(this, e);
            var i = new yt.Geometry;
            return i.vertices = [new yt.Vector3(0,0,0), new yt.Vector3(a.x - t.x,0,a.z - t.z)],
            i
        }
        ))
          , ta = Object(r.a)((function e(t, a) {
            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .2
              , n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5
              , o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : .5
              , s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : .5;
            Object(l.a)(this, e);
            var r = new yt.ShapeBufferGeometry(t.generateShapes(a, i));
            r.computeBoundingBox();
            var c = (r.boundingBox.max.x - r.boundingBox.min.x) * -n
              , p = (r.boundingBox.max.y - r.boundingBox.min.y) * -o
              , d = (r.boundingBox.max.z - r.boundingBox.min.z) * -s;
            return r.translate(c, p, d),
            r
        }
        ));
        function aa(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var ia = function(e) {
            function t(e, a, i, n, o) {
                var s, r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "default", c = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : "bottom", p = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "center", d = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null;
                return Object(l.a)(this, t),
                (s = aa(this, t)).getPositionsList = function() {
                    var e = [];
                    return P.entries(s.positionsList).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        switch (s.config.type) {
                        case "default":
                            if ("change" === i)
                                return;
                            switch (s.config.position) {
                            case "left":
                            case "right":
                                if ("top" === i || "bottom" === i)
                                    return;
                                break;
                            case "top":
                            case "bottom":
                                if ("left" === i || "right" === i)
                                    return
                            }
                            break;
                        case "adapt":
                            if ("change" !== i)
                                return
                        }
                        e[i] = n
                    }
                    )),
                    e
                }
                ,
                s.calcData = function() {
                    var e = []
                      , t = {
                        x: 1 / 0,
                        z: null
                    }
                      , a = {
                        x: -1 / 0,
                        z: null
                    }
                      , i = {
                        x: null,
                        z: 1 / 0
                    }
                      , n = {
                        x: null,
                        z: -1 / 0
                    };
                    if (s.boundary)
                        e = s.instance.extensions.dimensions.bounds;
                    else {
                        var o, l = "adapt" === s.config.type ? "adapt" : "corner";
                        s.instance.poles[s.pole1] && (o = !(!s.instance.poles[s.pole2] || "corner" !== s.instance.poles[s.pole2].blockMaterial.block.type) && s.instance.poles[s.pole2].points.pointVertex,
                        e = e.concat(s.instance.poles[s.pole1].getLimits(l, o))),
                        s.instance.poles[s.pole2] && (o = !(!s.instance.poles[s.pole1] || "corner" !== s.instance.poles[s.pole1].blockMaterial.block.type) && s.instance.poles[s.pole1].points.pointVertex,
                        e = e.concat(s.instance.poles[s.pole2].getLimits(l, o)))
                    }
                    P.values(e).forEach((function(e) {
                        if (e.x <= t.x)
                            switch (s.config.position) {
                            case "left":
                            case "right":
                                t = {
                                    x: e.x,
                                    z: e.z
                                };
                                break;
                            case "top":
                                (e.x < t.x || null === t.z || e.z <= t.z) && (t = {
                                    x: e.x,
                                    z: e.z
                                });
                                break;
                            case "bottom":
                                (e.x < t.x || null === t.z || e.z >= t.z) && (t = {
                                    x: e.x,
                                    z: e.z
                                })
                            }
                        if (e.x >= a.x)
                            switch (s.config.position) {
                            case "left":
                            case "right":
                                a = {
                                    x: e.x,
                                    z: e.z
                                };
                                break;
                            case "top":
                                (e.x > a.x || null === a.z || e.z <= a.z) && (a = {
                                    x: e.x,
                                    z: e.z
                                });
                                break;
                            case "bottom":
                                (e.x > a.x || null === a.z || e.z >= a.z) && (a = {
                                    x: e.x,
                                    z: e.z
                                })
                            }
                        if (e.z <= i.z)
                            switch (s.config.position) {
                            case "left":
                                (e.z < i.z || null === i.x || e.x <= i.x) && (i = {
                                    x: e.x,
                                    z: e.z
                                });
                                break;
                            case "right":
                                (e.z < i.z || null === i.x || e.x >= i.x) && (i = {
                                    x: e.x,
                                    z: e.z
                                });
                                break;
                            case "top":
                            case "bottom":
                                i = {
                                    x: e.x,
                                    z: e.z
                                }
                            }
                        if (e.z >= n.z)
                            switch (s.config.position) {
                            case "left":
                                (e.z > n.z || null === n.x || e.x <= n.x) && (n = {
                                    x: e.x,
                                    z: e.z
                                });
                                break;
                            case "right":
                                (e.z > n.z || null === n.x || e.x >= n.x) && (n = {
                                    x: e.x,
                                    z: e.z
                                });
                                break;
                            case "top":
                            case "bottom":
                                n = {
                                    x: e.x,
                                    z: e.z
                                }
                            }
                    }
                    ));
                    var r = !1
                      , c = 0
                      , p = 0
                      , d = !1
                      , h = !1;
                    switch (s.config.type) {
                    case "default":
                        switch (s.config.position) {
                        case "left":
                        case "right":
                            i.z < 1 / 0 && n.z > -1 / 0 && (r = !0,
                            c = (i.z + n.z) / 2,
                            p = Mt.getDistance({
                                x: 0,
                                y: i.z
                            }, {
                                x: 0,
                                y: n.z
                            }),
                            d = i,
                            h = n);
                            break;
                        case "top":
                        case "bottom":
                            t.x < 1 / 0 && a.x > -1 / 0 && (r = !0,
                            c = (t.x + a.x) / 2,
                            p = Mt.getDistance({
                                x: t.x,
                                y: 0
                            }, {
                                x: a.x,
                                y: 0
                            }),
                            d = t,
                            h = a)
                        }
                        break;
                    case "adapt":
                        t.z < 1 / 0 && a.z > -1 / 0 && i.z < 1 / 0 && n.z > -1 / 0 && (t.x !== a.x || t.z !== a.z ? (r = !0,
                        c = 0,
                        p = Mt.getDistance({
                            x: t.x,
                            y: t.z
                        }, {
                            x: a.x,
                            y: a.z
                        }),
                        d = {
                            x: t.x,
                            y: 0,
                            z: t.z
                        },
                        h = {
                            x: a.x,
                            y: 0,
                            z: a.z
                        }) : (r = !0,
                        c = 0,
                        p = Mt.getDistance({
                            x: i.x,
                            y: i.z
                        }, {
                            x: n.x,
                            y: n.z
                        }),
                        d = {
                            x: i.x,
                            y: 0,
                            z: i.z
                        },
                        h = {
                            x: n.x,
                            y: 0,
                            z: n.z
                        }))
                    }
                    return {
                        status: r,
                        center: c,
                        value: p,
                        start: d,
                        end: h
                    }
                }
                ,
                s.setStatus = function() {
                    return s.data.status
                }
                ,
                s.calcWidth = function() {
                    return s.data.value
                }
                ,
                s.calcRotation = function() {
                    switch (s.config.type) {
                    case "default":
                        switch (s.config.position) {
                        case "left":
                        case "right":
                            return Math.PI / 2;
                        case "top":
                        case "bottom":
                            return 0
                        }
                        break;
                    case "adapt":
                        return Mt.getRotation({
                            x: s.data.start.x,
                            y: s.data.start.z
                        }, {
                            x: s.data.end.x,
                            y: s.data.end.z
                        })
                    }
                    return 0
                }
                ,
                s.calcPosition = function() {
                    var e;
                    switch (s.config.type) {
                    case "default":
                        switch (e = s.instance.params.dimension.distance.main + (s.boundary ? s.instance.params.dimension.distance.between : 0),
                        s.config.position) {
                        case "left":
                            if (s.instance.extensions.dimensions.boundary.left)
                                return {
                                    x: s.instance.extensions.dimensions.boundary.left.x - e,
                                    y: 0,
                                    z: s.data.center
                                };
                            break;
                        case "right":
                            if (s.instance.extensions.dimensions.boundary.right)
                                return {
                                    x: s.instance.extensions.dimensions.boundary.right.x + e,
                                    y: 0,
                                    z: s.data.center
                                };
                            break;
                        case "top":
                            if (s.instance.extensions.dimensions.boundary.top)
                                return {
                                    x: s.data.center,
                                    y: 0,
                                    z: s.instance.extensions.dimensions.boundary.top.z - e
                                };
                            break;
                        case "bottom":
                            if (s.instance.extensions.dimensions.boundary.bottom)
                                return {
                                    x: s.data.center,
                                    y: 0,
                                    z: s.instance.extensions.dimensions.boundary.bottom.z + e
                                }
                        }
                        break;
                    case "adapt":
                        var t = s.instance.params.dimension.distance.adapt;
                        switch (s.config.position) {
                        case "right":
                        case "bottom":
                            t = -t
                        }
                        var a = Mt.getCenter({
                            x: s.data.start.x,
                            y: 0,
                            z: s.data.start.z
                        }, {
                            x: s.data.end.x,
                            y: 0,
                            z: s.data.end.z
                        })
                          , i = Mt.rotatePoint({
                            x: 0,
                            y: 0,
                            z: t
                        }, s.rotation);
                        return {
                            x: a.x + i.x,
                            y: 0,
                            z: a.z + i.z
                        }
                    }
                    return {
                        x: 0,
                        y: 0,
                        z: 0
                    }
                }
                ,
                s.calcAlign = function() {
                    var e = 0;
                    switch (s.config.align) {
                    case "left":
                        e = -s.width / 2;
                        break;
                    case "right":
                        e = s.width / 2
                    }
                    return e ? Mt.rotatePoint({
                        x: e,
                        z: 0
                    }, s.rotation) : {
                        x: 0,
                        z: 0
                    }
                }
                ,
                s.do = function() {
                    s.doHelper1(),
                    s.doHelper2(),
                    s.doShape(),
                    s.doDescription()
                }
                ,
                s.update = function() {
                    s.data = s.calcData(),
                    s.status = s.setStatus(),
                    s.width = s.calcWidth(),
                    s.rotation = s.calcRotation(),
                    s.position = s.calcPosition(),
                    s.align = s.calcAlign(),
                    s.do()
                }
                ,
                s.remove = function() {
                    s.objects.description.drag.dispose(),
                    s.three.scenes["2d"].remove(s.objects.helper1),
                    s.three.scenes["2d"].remove(s.objects.helper2),
                    s.three.scenes["2d"].remove(s.objects.shape),
                    s.three.scenes["2d"].remove(s.objects.description)
                }
                ,
                s.displayOptions = function() {
                    ft("dimension", s.config, s)
                }
                ,
                s.setOrder = function(e) {
                    s.order = e
                }
                ,
                s.setType = function(e) {
                    s.config.type = e,
                    s.instance.extensions.dimensions.update(!1)
                }
                ,
                s.setPosition = function(e) {
                    if ("change" === e)
                        switch (s.config.position) {
                        case "left":
                            s.config.position = "right";
                            break;
                        case "right":
                            s.config.position = "left";
                            break;
                        case "top":
                            s.config.position = "bottom";
                            break;
                        case "bottom":
                            s.config.position = "top"
                        }
                    else
                        s.config.position = e;
                    s.instance.extensions.dimensions.update(!1)
                }
                ,
                s.setAlign = function(e) {
                    s.config.align = e,
                    s.instance.extensions.dimensions.update(!1)
                }
                ,
                s.instance = e,
                s.three = e.three,
                s.actions = new Xt(e,s),
                s.typesList = {
                    default: W("Na kraw\u0119dzi"),
                    adapt: W("Przy elementach")
                },
                s.positionsList = {
                    top: W("G\xf3ra"),
                    left: W("Lewa"),
                    right: W("Prawa"),
                    bottom: W("D\xf3\u0142"),
                    change: W("Zmie\u0144")
                },
                s.alignsList = {
                    left: W("Do lewej"),
                    center: W("Do \u015brodka"),
                    right: W("Do prawej")
                },
                s.config = {
                    type: r,
                    position: c,
                    align: p,
                    color: d || s.instance.colors.dimensionCustom
                },
                s.objects = {
                    helper1: null,
                    helper2: null,
                    shape: null,
                    description: null
                },
                s.id = a,
                s.boundary = i,
                s.pole1 = n ? n.id : null,
                s.pole2 = o ? o.id : null,
                s.order = 0,
                s.data = s.calcData(),
                s.status = s.setStatus(),
                s.width = s.calcWidth(),
                s.rotation = s.calcRotation(),
                s.position = s.calcPosition(),
                s.align = s.calcAlign(),
                s.do(),
                s
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doHelper1 = function() {
                var e;
                switch (t.config.position) {
                case "left":
                case "right":
                    e = {
                        x: t.position.x,
                        z: t.data.start.z
                    };
                    break;
                case "top":
                case "bottom":
                    e = {
                        x: t.data.start.x,
                        z: t.position.z
                    }
                }
                var a = new yt.LineDashedMaterial({
                    color: t.config.color,
                    dashSize: .05,
                    gapSize: .15
                })
                  , i = new ea(t.data.start,e);
                t.objects.helper1 ? (t.objects.helper1.geometry = i,
                t.objects.helper1.material = a) : (t.objects.helper1 = new yt.Line(i,a),
                t.three.scenes["2d"].add(t.objects.helper1)),
                t.objects.helper1.computeLineDistances(),
                t.objects.helper1.position.set(t.data.start.x, t.instance.dpsi(3, 0), t.data.start.z),
                t.objects.helper1.visible = !(!t.status || "default" !== t.config.type)
            }
            ,
            this.doHelper2 = function() {
                var e;
                switch (t.config.position) {
                case "left":
                case "right":
                    e = {
                        x: t.position.x,
                        z: t.data.end.z
                    };
                    break;
                case "top":
                case "bottom":
                    e = {
                        x: t.data.end.x,
                        z: t.position.z
                    }
                }
                var a = new yt.LineDashedMaterial({
                    color: t.config.color,
                    dashSize: .05,
                    gapSize: .15
                })
                  , i = new ea(t.data.end,e);
                t.objects.helper2 ? (t.objects.helper2.geometry = i,
                t.objects.helper2.material = a) : (t.objects.helper2 = new yt.Line(i,a),
                t.three.scenes["2d"].add(t.objects.helper2)),
                t.objects.helper2.computeLineDistances(),
                t.objects.helper2.position.set(t.data.end.x, t.instance.dpsi(3, 0), t.data.end.z),
                t.objects.helper2.visible = !(!t.status || "default" !== t.config.type)
            }
            ,
            this.doShape = function() {
                var e = [new yt.MeshBasicMaterial({
                    color: t.config.color
                })]
                  , a = new $t(t.width,t.instance.params.dimension.depth,t.instance.params.dimension.arrows);
                t.objects.shape ? (t.objects.shape.geometry = a,
                t.objects.shape.material = e) : (t.objects.shape = new yt.Mesh(a,e),
                t.three.scenes["2d"].add(t.objects.shape)),
                t.objects.shape.position.set(t.position.x, t.instance.dpsi(3, 1), t.position.z),
                t.objects.shape.rotation.y = t.rotation,
                t.objects.shape.visible = t.status
            }
            ,
            this.doDescription = function() {
                var e = .02;
                switch (t.config.type) {
                case "default":
                    switch (t.config.position) {
                    case "top":
                        e = 1.5 * -t.instance.params.dimension.arrows;
                        break;
                    case "bottom":
                        e = 1.5 * t.instance.params.dimension.arrows
                    }
                }
                t.doDescriptionTextSprite(e)
            }
            ,
            this.doDescriptionShape = function(e) {
                var a = new ta(t.instance.fonts.bold,"".concat(He.numberFormat(t.width, 2), " m"));
                if (t.objects.description)
                    t.objects.description.geometry = a;
                else {
                    var i = new yt.MeshBasicMaterial({
                        color: 0
                    });
                    t.objects.description = new yt.Mesh(a,i),
                    t.objects.description.rotation.x = -Math.PI / 2,
                    t.three.scenes["2d"].add(t.objects.description),
                    t.eventsDescription(t.objects.description)
                }
                t.objects.description.position.set(t.position.x + t.align.x, t.instance.dpsi(3, 2), t.position.z + t.align.z + e),
                t.objects.description.visible = t.status
            }
            ,
            this.doDescriptionTextSprite = function(e) {
                t.objects.description || (t.objects.description = new Qt.a({
                    fontWeight: t.instance.font.weight,
                    fontSize: t.instance.font.size,
                    fontFamily: t.instance.font.family,
                    fillStyle: t.instance.font.color
                }),
                t.three.scenes["2d"].add(t.objects.description),
                t.eventsDescription(t.objects.description)),
                t.objects.description.material.map.text = "".concat(He.numberFormat(t.width, 2), " m"),
                t.objects.description.position.set(t.position.x + t.align.x, t.instance.dpsi(3, 2), t.position.z + t.align.z + e),
                t.objects.description.visible = t.status
            }
            ,
            this.eventsDescription = function(e) {
                e.drag = new _t.a([e],{
                    moveable: !1
                },t.three.cameras["2d"],t.three.render.domElement),
                ["click", "touchend"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function() {
                        t.displayOptions()
                    }
                    ))
                }
                ))
            }
        }
        )));
        function na(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var oa = function(e) {
            function t() {
                return Object(l.a)(this, t),
                na(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action,
                        title: this.props.description,
                        "aria-label": this.props.description,
                        className: G()("add-dimension", "add-dimension-".concat(this.props.position))
                    })
                }
            }])
        }(n.a.Component);
        oa.defaultProps = {
            action: null,
            description: null
        };
        var sa = oa
          , la = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.addPredefined = function() {
                a.objectsPredefined[0] = new ia(a.instance,0,!0,null,null,"default","bottom","center",a.instance.colors.dimensionDefault),
                a.objectsPredefined[1] = new ia(a.instance,1,!0,null,null,"default","right","center",a.instance.colors.dimensionDefault)
            }
            ,
            this.reset = function() {
                a.cache.active = !1,
                a.cache.position = null,
                a.cache.start = null,
                a.cache.end = null
            }
            ,
            this.addStart = function(e) {
                a.reset(),
                a.cache.active = !0,
                a.cache.position = e,
                a.instance.extensions.communique.set("".concat(W("Wybierz pocz\u0105tek pomiaru"), "..."))
            }
            ,
            this.addPoleToDimension = function(e) {
                if (a.cache.active && a.instance.poles[e]) {
                    if (!a.cache.start && !a.cache.end)
                        return a.cache.start = a.instance.poles[e],
                        void a.instance.extensions.communique.set("".concat(W("Wybierz koniec pomiaru"), "..."));
                    a.cache.start && !a.cache.end && (a.cache.end = a.instance.poles[e],
                    a.instance.extensions.communique.set(null),
                    a.add())
                }
            }
            ,
            this.add = function() {
                if (a.cache.position && a.cache.start && a.cache.end) {
                    var e = P.last(a.objects)
                      , t = e ? parseInt(e, 10) + 1 : 0;
                    a.objects[t] = new ia(a.instance,t,!1,a.cache.start,a.cache.end,"default",a.cache.position,"center"),
                    a.update(!1)
                }
                a.reset()
            }
            ,
            this.removeDimension = function(e) {
                a.objects[e] && (a.objects[e].remove(),
                delete a.objects[e],
                a.update(!1))
            }
            ,
            this.removeDimensionByPole = function(e) {
                P.entries(a.objects).forEach((function(t) {
                    var i = Object(N.a)(t, 2)
                      , n = i[0]
                      , o = i[1];
                    o.pole1 !== e && o.pole2 !== e || (o.remove(),
                    delete a.objects[n])
                }
                ))
            }
            ,
            this.update = function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                if (!a.instance.isLoading) {
                    e && a.updateBounds();
                    var t = {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    };
                    P.values(a.objects).reverse().forEach((function(e) {
                        "default" === e.config.type && (e.setOrder(t[e.config.position]),
                        t[e.config.position]++),
                        e.update()
                    }
                    )),
                    P.values(a.objectsPredefined).reverse().forEach((function(e) {
                        "default" === e.config.type && (e.setOrder(t[e.config.position]),
                        t[e.config.position]++),
                        e.update()
                    }
                    ))
                }
            }
            ,
            this.updateBounds = function() {
                a.bounds = [];
                var e = {
                    x: 1 / 0,
                    z: null
                }
                  , t = {
                    x: -1 / 0,
                    z: null
                }
                  , i = {
                    x: null,
                    z: 1 / 0
                }
                  , n = {
                    x: null,
                    z: -1 / 0
                };
                P.values(a.instance.poles).forEach((function(o) {
                    var s = o.getLimits(!1);
                    P.values(s).forEach((function(o) {
                        a.bounds.push(o),
                        o.x < e.x && (e = o),
                        o.x > t.x && (t = o),
                        o.z < i.z && (i = o),
                        o.z > n.z && (n = o)
                    }
                    ))
                }
                )),
                "2d" !== a.three.view.get() || a.instance.isMoving || a.instance.moveFlags(e, t, i),
                a.boundary.left = e,
                a.boundary.right = t,
                a.boundary.top = i,
                a.boundary.bottom = n
            }
            ,
            this.instance = t,
            this.three = t.three,
            this.bounds = [],
            this.boundary = {
                left: null,
                right: null,
                top: null,
                bottom: null
            },
            this.cache = {
                active: !1,
                position: null,
                start: null,
                end: null
            },
            this.objectsPredefined = [],
            this.objects = [],
            this.instance.editMode() && (wt("main", "addDimensionTop", n.a.createElement(sa, {
                action: function() {
                    return a.addStart("top")
                },
                position: "top",
                description: W("Dodaj pomiar")
            }), ["2d"]),
            wt("main", "addDimensionLeft", n.a.createElement(sa, {
                action: function() {
                    return a.addStart("left")
                },
                position: "left",
                description: W("Dodaj pomiar")
            }), ["2d"]),
            wt("main", "addDimensionRight", n.a.createElement(sa, {
                action: function() {
                    return a.addStart("right")
                },
                position: "right",
                description: W("Dodaj pomiar")
            }), ["2d"]),
            wt("main", "addDimensionBottom", n.a.createElement(sa, {
                action: function() {
                    return a.addStart("bottom")
                },
                position: "bottom",
                description: W("Dodaj pomiar")
            }), ["2d"]))
        }
        ))
          , ra = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.execute = function() {
                var e = URL.createObjectURL(a.file.files[0])
                  , t = a.three.loader.load(e);
                t.wrapS = yt.RepeatWrapping,
                t.wrapT = yt.RepeatWrapping,
                a.three.environment.objects.sky.visible = !1,
                a.three.environment.objects.ground.visible = !1,
                a.three.cameras["3d"].controls.maxPolarAngle = Math.PI / 2,
                a.three.scenes["3d"].background = t,
                a.instance.hideFlags()
            }
            ,
            this.instance = t,
            this.three = t.three,
            wt("top-right", "photo-background", n.a.createElement("div", {
                className: "photo-background"
            }, n.a.createElement(Yt, {
                action: function() {
                    return a.file.click()
                },
                type: "environment",
                description: W("Przymierz wizualizacj\u0119 na zdj\u0119ciu dzia\u0142ki")
            }), n.a.createElement("div", {
                className: "content"
            }, n.a.createElement("input", {
                type: "file",
                onChange: this.execute,
                ref: function(e) {
                    a.file = e
                }
            }))), ["3d"])
        }
        ))
          , ca = a(69)
          , pa = a.n(ca)
          , da = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.execute = function() {
                document.documentElement.classList.add("loading"),
                a.three.render.domElement.style.opacity = 0;
                var e = a.settings.width
                  , t = a.settings.height;
                switch (a.three.view.get()) {
                case "2d":
                    if (a.instance.extensions.dimensions.boundary.left.x < 1 / 0 && a.instance.extensions.dimensions.boundary.right.x > -1 / 0 && a.instance.extensions.dimensions.boundary.top.z < 1 / 0 && a.instance.extensions.dimensions.boundary.bottom.z > -1 / 0) {
                        var i = {
                            x: a.instance.extensions.dimensions.boundary.right.x - a.instance.extensions.dimensions.boundary.left.x,
                            z: a.instance.extensions.dimensions.boundary.bottom.z - a.instance.extensions.dimensions.boundary.top.z
                        }
                          , n = Math.ceil(120 * i.x)
                          , o = Math.ceil(120 * i.z);
                        n > a.settings.width && (e = n <= a.settings.maxSize ? n : a.settings.maxSize),
                        o > a.settings.height && (t = o <= a.settings.maxSize ? o : a.settings.maxSize)
                    }
                }
                a.three.camera.aspect = e / t,
                a.three.camera.updateProjectionMatrix(),
                a.three.render.setSize(e, t),
                setTimeout((function() {
                    a.three.render.render(a.three.scene, a.three.camera),
                    pa()(a.three.render.domElement.toDataURL("image/jpeg", .85), "screen.jpg", "image/jpeg"),
                    a.three.camera.aspect = a.three.aspect,
                    a.three.camera.updateProjectionMatrix(),
                    a.three.render.setSize(a.three.width, a.three.height),
                    a.three.render.domElement.style.opacity = 1,
                    document.documentElement.classList.remove("loading")
                }
                ), 1e3)
            }
            ,
            this.instance = t,
            this.three = t.three,
            this.settings = {
                maxSize: 3840,
                width: 2560,
                height: 1440
            },
            wt("top-right", "screenshot", n.a.createElement("div", null, n.a.createElement(Yt, {
                action: function() {
                    return a.execute()
                },
                type: "screenshot",
                description: W("Zr\xf3b print-screen")
            })))
        }
        ))
          , ha = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.initShortkeys = function() {
                ["keydown"].forEach((function(e) {
                    return document.addEventListener(e, (function(e) {
                        120 === e.keyCode && (document.documentElement.classList.contains("loading") || a.save(!0))
                    }
                    ))
                }
                ))
            }
            ,
            this.encode = function() {
                var e = {
                    system: a.instance.system,
                    blocksFamily: a.instance.blocksFamily,
                    blocksColor: a.instance.blocksColor,
                    peaksFamily: a.instance.peaksFamily,
                    peaksColor: a.instance.peaksColor,
                    settings: {
                        move: a.instance.settings.move,
                        autosave: a.instance.settings.autosave,
                        defaultDistance: a.instance.settings.defaultDistance,
                        heightPoles: a.instance.settings.heightPoles,
                        heightWalls: a.instance.settings.heightWalls
                    },
                    combo: a.instance.combo,
                    fencings: a.instance.fencings,
                    poles: [],
                    walls: [],
                    dimensionsPredefined: [],
                    dimensions: []
                };
                return P.count(a.instance.getBlocksFamily().options) && P.entries(a.instance.getBlocksFamily().options).forEach((function(t) {
                    var i = Object(N.a)(t, 1)[0];
                    e.settings[i] = a.instance.settings[i]
                }
                )),
                e.settings.chemicals = a.instance.settings.chemicals,
                P.entries(a.instance.poles).forEach((function(t) {
                    var a = Object(N.a)(t, 2)
                      , i = a[0]
                      , n = a[1];
                    e.poles[i] = {
                        id: i,
                        width: n.config.size.width,
                        depth: n.config.size.depth,
                        height: n.config.size.height,
                        polygonBreak: n.config.polygonBreak,
                        virtual: n.config.virtual,
                        blockMaterialId: n.config.blockMaterialId,
                        position: {
                            x: n.position.x,
                            y: n.position.y,
                            z: n.position.z
                        },
                        temporary: {
                            width: {
                                line: n.configTemporary.width.line,
                                corner: n.configTemporary.width.corner
                            },
                            depth: {
                                line: n.configTemporary.depth.line,
                                corner: n.configTemporary.depth.corner
                            },
                            blockMaterialId: {
                                line: n.configTemporary.blockMaterialId.line,
                                corner: n.configTemporary.blockMaterialId.corner
                            }
                        },
                        additionals: {
                            mailbox: {
                                group: n.additionals.mailbox.config.group,
                                model: n.additionals.mailbox.config.model,
                                color: n.additionals.mailbox.config.color,
                                frame: n.additionals.mailbox.config.frame,
                                roof: n.additionals.mailbox.config.roof,
                                side: n.additionals.mailbox.config.side
                            },
                            lamp: {
                                group: n.additionals.lamp.config.group,
                                model: n.additionals.lamp.config.model
                            },
                            ledblock: {
                                group: n.additionals.ledblock.config.group,
                                model: n.additionals.ledblock.config.model,
                                color: n.additionals.ledblock.config.color
                            }
                        }
                    },
                    n.wall ? e.walls[i] = {
                        id: i,
                        height: n.wall.config.size.height,
                        kind: n.wall.config.kind,
                        blockMaterialId: n.wall.config.blockMaterialId,
                        combo: n.wall.config.combo,
                        fencing: n.wall.config.fencing,
                        fencingHeight: n.wall.config.fencingHeight,
                        manufacture: n.wall.manufacture.config,
                        panels: n.wall.panels.config
                    } : e.walls[i] = null
                }
                )),
                P.entries(a.instance.extensions.dimensions.objectsPredefined).forEach((function(t) {
                    var a = Object(N.a)(t, 2)
                      , i = a[0]
                      , n = a[1];
                    e.dimensionsPredefined[i] = {
                        id: i,
                        position: n.config.position,
                        align: n.config.align
                    }
                }
                )),
                P.entries(a.instance.extensions.dimensions.objects).forEach((function(t) {
                    var a = Object(N.a)(t, 2)
                      , i = a[0]
                      , n = a[1];
                    e.dimensions[i] = {
                        id: i,
                        pole1: n.pole1,
                        pole2: n.pole2,
                        type: n.config.type,
                        position: n.config.position,
                        align: n.config.align
                    }
                }
                )),
                {
                    data: e,
                    title: a.instance.settings.title,
                    description: a.instance.settings.description
                }
            }
            ,
            this.load = function(e) {
                var t, i, n, o, s, l, r, c, p, d, h = e.data;
                h && h.system && h.blocksFamily && h.blocksColor && h.peaksFamily && h.peaksColor && h.settings && (a.instance.isLoading = !0,
                h.system in a.instance.config.systems ? a.instance.system = h.system : window.location.replace("/"),
                a.instance.blocksFamily = h.blocksFamily,
                h.peaksFamily in a.instance.getSystem().peaks ? a.instance.peaksFamily = h.peaksFamily : (a.instance.peaksFamily = a.instance.getBlocksFamily().default.peaksFamily,
                a.instance.peaksColor = a.instance.getBlocksFamily().default.peaksColor,
                a.instance.extensions.communique.set("".concat(W("Wybrany wcze\u015bniej kolor nie jest ju\u017c dost\u0119pny"), ". <br /> ").concat(W("Ustawiono domy\u015blny dla danej konfiguracji"), "."))),
                h.blocksColor in a.instance.getBlocksFamily().colors ? a.instance.blocksColor = h.blocksColor : (a.instance.blocksColor = a.instance.getBlocksFamily().default.blocksColor,
                a.instance.extensions.communique.set("".concat(W("Wybrany wcze\u015bniej kolor nie jest ju\u017c dost\u0119pny"), ". <br /> ").concat(W("Ustawiono domy\u015blny dla danej konfiguracji"), "."))),
                h.peaksColor in a.instance.getPeaksFamily().colors ? a.instance.peaksColor = h.peaksColor : (a.instance.peaksColor = a.instance.getBlocksFamily().default.peaksColor,
                a.instance.extensions.communique.set("".concat(W("Wybrany wcze\u015bniej kolor nie jest ju\u017c dost\u0119pny"), ". <br /> ").concat(W("Ustawiono domy\u015blny dla danej konfiguracji"), "."))),
                a.instance.settings.title = e.title,
                a.instance.settings.description = e.description,
                a.instance.settings.move = !1 !== h.settings.move,
                a.instance.settings.autosave = !0 === h.settings.autosave,
                a.instance.settings.defaultDistance = h.settings.defaultDistance ? h.settings.defaultDistance : a.instance.getBlocksFamily().settings.distance.min * a.instance.getBlocksFamily().settings.distance.default,
                a.instance.settings.heightPoles = h.settings.heightPoles,
                a.instance.settings.heightWalls = h.settings.heightWalls,
                P.count(a.instance.getBlocksFamily().options) && P.entries(a.instance.getBlocksFamily().options).forEach((function(e) {
                    var t = Object(N.a)(e, 2)
                      , i = t[0]
                      , n = t[1];
                    a.instance.settings[i] = "undefined" !== typeof h.settings[i] ? h.settings[i] : n.default
                }
                )),
                a.instance.settings.chemicals = "undefined" === typeof h.settings.chemicals || h.settings.chemicals,
                "undefined" !== typeof (null === (t = h.combo) || void 0 === t ? void 0 : t.status) && (a.instance.combo.status = h.combo.status),
                "undefined" !== typeof (null === (i = h.combo) || void 0 === i ? void 0 : i.system) && (a.instance.combo.system = h.combo.system),
                "undefined" !== typeof (null === (n = h.combo) || void 0 === n ? void 0 : n.variant) && (a.instance.combo.variant = h.combo.variant),
                "undefined" !== typeof (null === (o = h.combo) || void 0 === o ? void 0 : o.color) && (a.instance.combo.color = h.combo.color),
                "undefined" !== typeof (null === (s = h.fencings) || void 0 === s ? void 0 : s.status) && (a.instance.fencings.status = h.fencings.status),
                "undefined" !== typeof (null === (l = h.fencings) || void 0 === l ? void 0 : l.group) && (a.instance.fencings.group = h.fencings.group),
                "undefined" !== typeof (null === (r = h.fencings) || void 0 === r ? void 0 : r.system) && (a.instance.fencings.system = h.fencings.system),
                "undefined" !== typeof (null === (c = h.fencings) || void 0 === c ? void 0 : c.variant) && (a.instance.fencings.variant = h.fencings.variant),
                "undefined" !== typeof (null === (p = h.fencings) || void 0 === p ? void 0 : p.space) && (a.instance.fencings.space = h.fencings.space),
                "undefined" !== typeof (null === (d = h.fencings) || void 0 === d ? void 0 : d.color) && (a.instance.fencings.color = h.fencings.color),
                a.instance.updateTextures(),
                P.values(h.poles).forEach((function(e) {
                    e && a.instance.addPole(e.id, e.position.x, e.position.z, null, "wall", e.virtual)
                }
                )),
                P.values(h.walls).forEach((function(e) {
                    if (e) {
                        var t, i, n, o, s, l, r, c, p, d, h, u, m, g, f = a.instance.poles[e.id].wall;
                        f.setKind(e.kind),
                        f.setBlockMaterialId(e.blockMaterialId),
                        f.resizeHeight(e.height),
                        "undefined" !== typeof e.combo && (f.config.combo = e.combo),
                        "undefined" !== typeof e.fencing && (f.config.fencing = e.fencing),
                        "undefined" !== typeof e.fencingHeight && (f.config.fencingHeight = e.fencingHeight),
                        "undefined" !== typeof (null === (t = e.manufacture) || void 0 === t ? void 0 : t.status) && (f.manufacture.config.status = e.manufacture.status),
                        "undefined" !== typeof (null === (i = e.manufacture) || void 0 === i ? void 0 : i.group) && (f.manufacture.config.group = e.manufacture.group),
                        "undefined" !== typeof (null === (n = e.manufacture) || void 0 === n ? void 0 : n.system) && (f.manufacture.config.system = e.manufacture.system),
                        "undefined" !== typeof (null === (o = e.manufacture) || void 0 === o ? void 0 : o.type) && (f.manufacture.config.type = e.manufacture.type),
                        "undefined" !== typeof (null === (s = e.manufacture) || void 0 === s ? void 0 : s.variant) && (f.manufacture.config.variant = e.manufacture.variant),
                        "undefined" !== typeof (null === (l = e.manufacture) || void 0 === l ? void 0 : l.space) && (f.manufacture.config.space = e.manufacture.space),
                        "undefined" !== typeof (null === (r = e.manufacture) || void 0 === r ? void 0 : r.color) && (f.manufacture.config.color = e.manufacture.color),
                        "undefined" !== typeof (null === (c = e.manufacture) || void 0 === c ? void 0 : c.side) && (f.manufacture.config.side = e.manufacture.side),
                        "undefined" !== typeof (null === (p = e.manufacture) || void 0 === p ? void 0 : p.directionVertical) && (f.manufacture.config.directionVertical = e.manufacture.directionVertical),
                        "undefined" !== typeof (null === (d = e.manufacture) || void 0 === d ? void 0 : d.directionHorizontal) && (f.manufacture.config.directionHorizontal = e.manufacture.directionHorizontal),
                        "undefined" !== typeof (null === (h = e.manufacture) || void 0 === h ? void 0 : h.suggestedHeight) && (f.manufacture.config.suggestedHeight = e.manufacture.suggestedHeight),
                        "undefined" !== typeof (null === (u = e.panels) || void 0 === u ? void 0 : u.group) && (f.panels.config.group = e.panels.group),
                        "undefined" !== typeof (null === (m = e.panels) || void 0 === m ? void 0 : m.model) && (f.panels.config.model = e.panels.model),
                        "undefined" !== typeof (null === (g = e.panels) || void 0 === g ? void 0 : g.height) && (f.panels.config.height = e.panels.height)
                    }
                }
                )),
                P.values(h.poles).forEach((function(e) {
                    if (e) {
                        var t, i, n, o, s, l, r, c, p, d, h, u, m, g, f, b, w, v, y, k, x, j, z = a.instance.poles[e.id];
                        z.configTemporary.width.line = e.temporary.width.line,
                        z.configTemporary.width.corner = e.temporary.width.corner,
                        z.configTemporary.depth.line = e.temporary.depth.line,
                        z.configTemporary.depth.corner = e.temporary.depth.corner,
                        z.configTemporary.blockMaterialId.line = e.temporary.blockMaterialId.line,
                        z.configTemporary.blockMaterialId.corner = e.temporary.blockMaterialId.corner,
                        z.setPolygonBreak(e.polygonBreak),
                        z.setBlockMaterialId(e.blockMaterialId, !0),
                        z.resizeWidth(e.width),
                        z.resizeDepth(e.depth),
                        z.resizeHeight(e.height),
                        "undefined" !== typeof (null === (t = e.additionals) || void 0 === t || null === (i = t.mailbox) || void 0 === i ? void 0 : i.group) && (z.additionals.mailbox.config.group = e.additionals.mailbox.group),
                        "undefined" !== typeof (null === (n = e.additionals) || void 0 === n || null === (o = n.mailbox) || void 0 === o ? void 0 : o.model) && (z.additionals.mailbox.config.model = e.additionals.mailbox.model),
                        "undefined" !== typeof (null === (s = e.additionals) || void 0 === s || null === (l = s.mailbox) || void 0 === l ? void 0 : l.color) && (z.additionals.mailbox.config.color = e.additionals.mailbox.color),
                        "undefined" !== typeof (null === (r = e.additionals) || void 0 === r || null === (c = r.mailbox) || void 0 === c ? void 0 : c.frame) && (z.additionals.mailbox.config.frame = e.additionals.mailbox.frame),
                        "undefined" !== typeof (null === (p = e.additionals) || void 0 === p || null === (d = p.mailbox) || void 0 === d ? void 0 : d.roof) && (z.additionals.mailbox.config.roof = e.additionals.mailbox.roof),
                        "undefined" !== typeof (null === (h = e.additionals) || void 0 === h || null === (u = h.mailbox) || void 0 === u ? void 0 : u.side) && (z.additionals.mailbox.config.side = e.additionals.mailbox.side),
                        z.additionals.mailbox.reload(),
                        "undefined" !== typeof (null === (m = e.additionals) || void 0 === m || null === (g = m.lamp) || void 0 === g ? void 0 : g.group) && (z.additionals.lamp.config.group = e.additionals.lamp.group),
                        "undefined" !== typeof (null === (f = e.additionals) || void 0 === f || null === (b = f.lamp) || void 0 === b ? void 0 : b.model) && (z.additionals.lamp.config.model = e.additionals.lamp.model),
                        z.additionals.lamp.reload(),
                        "undefined" !== typeof (null === (w = e.additionals) || void 0 === w || null === (v = w.ledblock) || void 0 === v ? void 0 : v.group) && (z.additionals.ledblock.config.group = e.additionals.ledblock.group),
                        "undefined" !== typeof (null === (y = e.additionals) || void 0 === y || null === (k = y.ledblock) || void 0 === k ? void 0 : k.model) && (z.additionals.ledblock.config.model = e.additionals.ledblock.model),
                        "undefined" !== typeof (null === (x = e.additionals) || void 0 === x || null === (j = x.ledblock) || void 0 === j ? void 0 : j.color) && (z.additionals.ledblock.config.color = e.additionals.ledblock.color),
                        z.additionals.ledblock.reload()
                    }
                }
                )),
                P.values(h.dimensionsPredefined).forEach((function(e) {
                    e && a.instance.extensions.dimensions.objectsPredefined[e.id] && (a.instance.extensions.dimensions.objectsPredefined[e.id].setPosition(e.position),
                    e.align && a.instance.extensions.dimensions.objectsPredefined[e.id].setAlign(e.align))
                }
                )),
                P.values(h.dimensions).forEach((function(e) {
                    e && a.instance.poles[e.pole1] && a.instance.poles[e.pole2] && (a.instance.extensions.dimensions.objects[e.id] = new ia(a.instance,e.id,!1,a.instance.poles[e.pole1],a.instance.poles[e.pole2],e.type,e.position,e.align || "center"))
                }
                )),
                a.instance.isLoading = !1,
                P.values(h.poles).forEach((function(e) {
                    if (e) {
                        var t = a.instance.poles[e.id];
                        t.setDirection(0),
                        t.wallUpdate(!1),
                        t.resizeHeight(e.height)
                    }
                }
                )),
                a.instance.extensions.dimensions.update())
            }
            ,
            this.save = function() {
                var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]
                  , t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                e && document.documentElement.classList.add("loading");
                var i = a.encode();
                i.time = a.instance.extensions.timer.time,
                i.data = JSON.stringify(i.data),
                M.post("save/".concat(a.instance.id ? "".concat(a.instance.id, "/") : ""), {
                    data: {
                        project: i
                    },
                    success: function(i) {
                        i.status && i.id && (a.instance.id = i.id,
                        window.history.pushState(!1, !1, a.instance.id)),
                        a.instance.unsetModified(),
                        e && document.documentElement.classList.remove("loading"),
                        t && t()
                    }
                })
            }
            ,
            this.instance = t,
            this.instance.editMode() && this.initShortkeys()
        }
        ))
          , ua = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.init = function() {
                var e;
                !a.instance.editMode() || a.instance.project.user_id && a.instance.project.user_id !== (null === (e = w.user) || void 0 === e ? void 0 : e.id) || (a.events(),
                a.start())
            }
            ,
            this.events = function() {
                ["blur"].forEach((function(e) {
                    return window.addEventListener(e, (function() {
                        a.update(),
                        a.active = !1
                    }
                    ))
                }
                )),
                ["focus"].forEach((function(e) {
                    return window.addEventListener(e, (function() {
                        a.update(),
                        a.active = !0
                    }
                    ))
                }
                ))
            }
            ,
            this.update = function() {
                var e = Date.now();
                a.active && (a.time += e - a.timestamp),
                a.timestamp = e
            }
            ,
            this.start = function() {
                a.interval || (a.interval = setInterval((function() {
                    a.action()
                }
                ), 1e3 * a.saveInterval))
            }
            ,
            this.stop = function() {
                a.interval && clearInterval(a.interval)
            }
            ,
            this.action = function() {
                a.update(),
                a.active && (M.post("time/", {
                    data: {
                        id: a.instance.id,
                        time: a.time - a.diff
                    }
                }),
                a.diff = a.time)
            }
            ,
            this.instance = t,
            this.saveInterval = 10,
            this.time = 0,
            this.diff = 0,
            this.active = !0,
            this.timestamp = Date.now()
        }
        ));
        function ma(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var ga = function(e) {
            function t() {
                return Object(l.a)(this, t),
                ma(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action,
                        title: this.props.description,
                        className: "button-text"
                    }, this.props.text)
                }
            }])
        }(n.a.Component);
        ga.defaultProps = {
            action: null,
            description: null
        };
        var fa = ga
          , ba = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.data = function() {
                var e = {
                    id: a.instance.id,
                    title: a.instance.settings.title,
                    description: a.instance.settings.description,
                    system: a.instance.system,
                    blocksFamily: a.instance.blocksFamily,
                    blocksColor: a.instance.blocksColor,
                    peaksFamily: a.instance.peaksFamily,
                    peaksColor: a.instance.peaksColor,
                    settings: a.instance.settings,
                    config: {
                        system: a.instance.getSystem(),
                        mailboxes: a.instance.config.mailboxes,
                        lamps: a.instance.config.lamps,
                        ledblocks: a.instance.config.ledblocks
                    },
                    poles: [],
                    walls: []
                };
                return P.entries(a.instance.poles).forEach((function(t) {
                    var a = Object(N.a)(t, 2)
                      , i = a[0]
                      , n = a[1];
                    e.poles[i] = {
                        config: {
                            size: {
                                width: n.config.size.width,
                                depth: n.config.size.depth,
                                height: n.config.size.height,
                                fullHeight: n.config.size.fullHeight
                            },
                            polygonBreak: n.config.polygonBreak,
                            virtual: n.config.virtual,
                            blockMaterialId: n.config.blockMaterialId
                        },
                        additionals: {
                            mailbox: !!n.additionals.mailbox.status && n.additionals.mailbox.config,
                            lamp: !!n.additionals.lamp.status && n.additionals.lamp.config,
                            ledblock: !!n.additionals.ledblock.status && n.additionals.ledblock.config
                        },
                        dimension: {
                            poleWidth: n.poleWidth,
                            poleDepth: n.poleDepth,
                            peakWidth: n.peakWidth
                        },
                        blockMaterial: n.blockMaterial,
                        angle: n.angle,
                        seating: n.seating,
                        break: n.break,
                        wall1: !!n.wall && {
                            config: {
                                size: {
                                    depth: n.wall.config.size.depth,
                                    height: n.wall.config.size.height
                                },
                                kind: n.wall.config.kind,
                                blockMaterialId: n.wall.config.blockMaterialId
                            },
                            dimension: {
                                wallWidth: n.wall.wallWidth,
                                peakWidth: n.wall.peakWidth
                            },
                            wallElements: n.wall.wallElements,
                            blockMaterial: n.wall.blockMaterial,
                            status: n.wall.status
                        },
                        wall2: !(!n.next || !n.next.wall) && {
                            config: {
                                size: {
                                    depth: n.next.wall.config.size.depth,
                                    height: n.next.wall.config.size.height
                                },
                                kind: n.next.wall.config.kind,
                                blockMaterialId: n.next.wall.config.blockMaterialId
                            },
                            dimension: {
                                wallWidth: n.next.wall.wallWidth,
                                peakWidth: n.next.wall.peakWidth
                            },
                            wallElements: n.next.wall.wallElements,
                            blockMaterial: n.next.wall.blockMaterial,
                            status: n.next.wall.status
                        }
                    },
                    n.next && n.next.wall && (e.walls[i] = {
                        config: {
                            size: {
                                depth: n.next.wall.config.size.depth,
                                height: n.next.wall.config.size.height
                            },
                            kind: n.next.wall.config.kind,
                            blockMaterialId: n.next.wall.config.blockMaterialId
                        },
                        additionals: {
                            panels: n.next.wall.panels.valuation,
                            combo: n.next.wall.combo.valuation
                        },
                        dimension: {
                            wallWidth: n.next.wall.wallWidth,
                            peakWidth: n.next.wall.peakWidth
                        },
                        wallElements: n.next.wall.wallElements,
                        blockMaterial: n.next.wall.blockMaterial,
                        status: n.next.wall.status,
                        pole1: !!n.next.wall.pole1 && {
                            config: {
                                size: {
                                    width: n.next.wall.pole1.config.size.width,
                                    depth: n.next.wall.pole1.config.size.depth,
                                    height: n.next.wall.pole1.config.size.height,
                                    fullHeight: n.next.wall.pole1.config.size.fullHeight
                                },
                                polygonBreak: n.next.wall.pole1.config.polygonBreak,
                                virtual: n.next.wall.pole1.config.virtual,
                                blockMaterialId: n.next.wall.pole1.config.blockMaterialId
                            },
                            dimension: {
                                poleWidth: n.next.wall.pole1.poleWidth,
                                poleDepth: n.next.wall.pole1.poleDepth,
                                peakWidth: n.next.wall.pole1.peakWidth
                            },
                            blockMaterial: n.next.wall.pole1.blockMaterial,
                            angle: n.next.wall.pole1.angle,
                            seating: n.next.wall.pole1.seating,
                            break: n.next.wall.pole1.break
                        },
                        pole2: !!n.next.wall.pole2 && {
                            config: {
                                size: {
                                    width: n.next.wall.pole2.config.size.width,
                                    depth: n.next.wall.pole2.config.size.depth,
                                    height: n.next.wall.pole2.config.size.height,
                                    fullHeight: n.next.wall.pole2.config.size.fullHeight
                                },
                                polygonBreak: n.next.wall.pole2.config.polygonBreak,
                                virtual: n.next.wall.pole2.config.virtual,
                                blockMaterialId: n.next.wall.pole2.config.blockMaterialId
                            },
                            dimension: {
                                poleWidth: n.next.wall.pole2.poleWidth,
                                poleDepth: n.next.wall.pole2.poleDepth,
                                peakWidth: n.next.wall.pole2.peakWidth
                            },
                            blockMaterial: n.next.wall.pole2.blockMaterial,
                            angle: n.next.wall.pole2.angle,
                            seating: n.next.wall.pole2.seating,
                            break: n.next.wall.pole2.break
                        },
                        wall1: !!n.wall && {
                            config: {
                                size: {
                                    height: n.wall.config.size.height
                                },
                                kind: n.wall.config.kind
                            },
                            blockMaterial: n.wall.blockMaterial,
                            status: n.wall.status
                        },
                        wall2: !!n.next.next.wall && {
                            config: {
                                size: {
                                    height: n.next.next.wall.config.size.height
                                },
                                kind: n.next.next.wall.config.kind
                            },
                            blockMaterial: n.next.next.wall.blockMaterial,
                            status: n.next.next.wall.status
                        }
                    })
                }
                )),
                e
            }
            ,
            this.valuation = function() {
                var e = a.data();
                M.post("valuation/", {
                    data: {
                        data: JSON.stringify(e)
                    },
                    success: function(e) {
                        !function(e) {
                            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                            y.dispatch({
                                type: H.SHOW,
                                content: e,
                                toolbar: t
                            })
                        }(e, n.a.createElement("div", {
                            className: "valuation-toolbar"
                        }, n.a.createElement(Yt, {
                            action: function() {
                                return a.pdf(e)
                            },
                            type: "pdf",
                            description: W("Generuj PDF")
                        }), n.a.createElement(Yt, {
                            action: function() {
                                return a.xls()
                            },
                            type: "xls",
                            description: W("Generuj XLS")
                        }), n.a.createElement(Yt, {
                            action: function() {
                                return a.ows()
                            },
                            type: "ows",
                            description: W("Pobierz OWS")
                        }), P.in(w.user.type, ["admin", "employee", "distributor"]) && w.user.nip && n.a.createElement(Yt, {
                            action: function() {
                                return a.comarch()
                            },
                            type: "order",
                            description: W("Z\u0142\xf3\u017c zam\xf3wienie")
                        })))
                    }
                })
            }
            ,
            this.pdf = function(e) {
                var t, a = document.createElement("form");
                a.action = "".concat(null === (t = w.config.api) || void 0 === t ? void 0 : t.url, "../generators/pdf/"),
                a.method = "post",
                a.target = "_blank";
                var i = document.createElement("input");
                i.type = "hidden",
                i.name = "data",
                i.value = e,
                document.body.appendChild(a),
                a.appendChild(i),
                a.submit(),
                a.remove()
            }
            ,
            this.xls = function() {
                var e, t, a, i, n, o, s, l, r, c, p, d, h, u, m, g, f, b, v, y, k, x, j, z, M = document.querySelector("#result table.summary"), O = {
                    header: [],
                    result: [],
                    weight: {
                        label: null === M || void 0 === M || null === (e = M.querySelector('[data-field-label="weight"]')) || void 0 === e ? void 0 : e.innerText,
                        value: null === M || void 0 === M || null === (t = M.querySelector('[data-field-value="weight"]')) || void 0 === t || null === (a = t.innerText) || void 0 === a ? void 0 : a.replace(" ", ""),
                        unit: null === M || void 0 === M || null === (i = M.querySelector('[data-field-unit="weight"]')) || void 0 === i ? void 0 : i.innerText
                    },
                    surface: {
                        label: null === M || void 0 === M || null === (n = M.querySelector('[data-field-label="surface"]')) || void 0 === n ? void 0 : n.innerText,
                        value: null === M || void 0 === M || null === (o = M.querySelector('[data-field-value="surface"]')) || void 0 === o || null === (s = o.innerText) || void 0 === s ? void 0 : s.replace(" ", "").replace(",", "."),
                        unit: null === M || void 0 === M || null === (l = M.querySelector('[data-field-unit="surface"]')) || void 0 === l ? void 0 : l.innerText
                    },
                    capacity: {
                        label: null === M || void 0 === M || null === (r = M.querySelector('[data-field-label="capacity"]')) || void 0 === r ? void 0 : r.innerText,
                        value: null === M || void 0 === M || null === (c = M.querySelector('[data-field-value="capacity"]')) || void 0 === c || null === (p = c.innerText) || void 0 === p ? void 0 : p.replace(" ", "").replace(",", "."),
                        unit: null === M || void 0 === M || null === (d = M.querySelector('[data-field-unit="capacity"]')) || void 0 === d ? void 0 : d.innerText
                    },
                    priceNet: {
                        label: null === M || void 0 === M || null === (h = M.querySelector('[data-field-label="priceNet"]')) || void 0 === h ? void 0 : h.innerText,
                        value: null === M || void 0 === M || null === (u = M.querySelector('[data-field-value="priceNet"]')) || void 0 === u || null === (m = u.innerText) || void 0 === m ? void 0 : m.replace(" ", "").replace(",", "."),
                        unit: null === M || void 0 === M || null === (g = M.querySelector('[data-field-unit="priceNet"]')) || void 0 === g ? void 0 : g.innerText
                    },
                    priceGross: {
                        label: null === M || void 0 === M || null === (f = M.querySelector('[data-field-label="priceGross"]')) || void 0 === f ? void 0 : f.innerText,
                        value: null === M || void 0 === M || null === (b = M.querySelector('[data-field-value="priceGross"]')) || void 0 === b || null === (v = b.innerText) || void 0 === v ? void 0 : v.replace(" ", "").replace(",", "."),
                        unit: null === M || void 0 === M || null === (y = M.querySelector('[data-field-unit="priceGross"]')) || void 0 === y ? void 0 : y.innerText
                    }
                }, E = document.querySelector("#result table.result thead");
                E && (O.header = {
                    name: null === (x = E.querySelector('[data-field-label="name"]')) || void 0 === x ? void 0 : x.innerText,
                    code: W("Kod"),
                    color: null === (j = E.querySelector('[data-field-label="color"]')) || void 0 === j ? void 0 : j.innerText,
                    quantity: null === (z = E.querySelector('[data-field-label="quantity"]')) || void 0 === z ? void 0 : z.innerText,
                    priceNet: W("Netto"),
                    priceGross: W("Brutto")
                });
                var _ = document.querySelector("#result table.result tbody");
                _ && P.values(_.querySelectorAll("tr")).forEach((function(e) {
                    var t, a, i, n, o, s, l, r;
                    O.result.push({
                        name: null === (t = e.querySelector('[data-field-value="name"]')) || void 0 === t ? void 0 : t.innerText,
                        code: null === (a = e.querySelector('[data-field-value="code"]')) || void 0 === a ? void 0 : a.innerText,
                        color: null === (i = e.querySelector('[data-field-value="color"]')) || void 0 === i ? void 0 : i.innerText,
                        quantity: null === (n = e.querySelector('[data-field-value="quantity"]')) || void 0 === n ? void 0 : n.innerText,
                        priceNet: null === (o = e.querySelector('[data-field-value="priceNet"]')) || void 0 === o || null === (s = o.innerText) || void 0 === s ? void 0 : s.replace(" ", "").replace(",", "."),
                        priceGross: null === (l = e.querySelector('[data-field-value="priceGross"]')) || void 0 === l || null === (r = l.innerText) || void 0 === r ? void 0 : r.replace(" ", "").replace(",", ".")
                    })
                }
                ));
                var S = document.createElement("form");
                S.action = "".concat(null === (k = w.config.api) || void 0 === k ? void 0 : k.url, "../generators/xls/"),
                S.method = "post";
                var C = document.createElement("input");
                C.type = "hidden",
                C.name = "data",
                C.value = JSON.stringify(O),
                document.body.appendChild(S),
                S.appendChild(C),
                S.submit(),
                S.remove()
            }
            ,
            this.ows = function() {
                var e;
                switch (w.lang) {
                case "pl_PL":
                    e = "ows-joniec-2021-04-01.pdf";
                    break;
                default:
                    e = "gtcs-joniec-2023-07-08.pdf"
                }
                if (e) {
                    var t, a = "".concat(null === (t = w.config.api) || void 0 === t ? void 0 : t.url, "../download/");
                    window.location.replace("".concat(a).concat(e))
                }
            }
            ,
            this.comarch = function() {
                ot(W("Po przes\u0142aniu do rozliczenia, projekt zostanie zablokowany. Kontynuowa\u0107 ?"), (function() {
                    a.instance.extensions.storage.save(!0, (function() {
                        var e = a.data();
                        M.post("comarch/add/", {
                            data: {
                                data: JSON.stringify(e)
                            },
                            success: function(e) {
                                e.status && window.location.replace("/")
                            }
                        })
                    }
                    ))
                }
                ))
            }
            ,
            this.instance = t,
            this.three = t.three,
            this.instance.editMode() && wt("bottom-right", "valuation", n.a.createElement("div", {
                className: "p-2"
            }, n.a.createElement(fa, {
                action: function() {
                    return a.valuation()
                },
                text: W("Wycena")
            })))
        }
        ))
          , wa = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.init = function() {
                a.buffer = new kt(null,(function() {
                    a.run()
                }
                ),(function() {
                    a.update()
                }
                )),
                a.loadScenes(),
                a.loadTextures(),
                a.loadMaterials(),
                a.loadEvents()
            }
            ,
            this.loadDetails = function() {
                var e, t, i = a.editMode() && localStorage.getItem("graphic-details-window") || "none", n = localStorage.getItem("graphic-details-theme") || "white", o = localStorage.getItem("graphic-details-framelimit") || "on", s = localStorage.getItem("graphic-details-antialiassing") || "on", l = localStorage.getItem("graphic-details-shadows") || "slow", r = localStorage.getItem("graphic-details-ground") || "pavement";
                switch (l) {
                case "off":
                    e = 0;
                    break;
                case "slow":
                    e = 15;
                    break;
                case "medium":
                    e = 50;
                    break;
                case "high":
                    e = 100;
                    break;
                case "full":
                    e = 150
                }
                switch (r) {
                case "pavement":
                    t = {
                        x: 200,
                        y: 400
                    };
                    break;
                case "gravel":
                    t = {
                        x: 300,
                        y: 300
                    };
                    break;
                case "grass":
                    t = {
                        x: 50,
                        y: 50
                    }
                }
                return {
                    window: i,
                    theme: n,
                    framelimit: o,
                    antialiassing: s,
                    anisotropy: 4,
                    shadows: l,
                    ground: r,
                    shadowsPrecision: e,
                    groundRepeat: t
                }
            }
            ,
            this.loadColors = function() {
                switch (a.details.theme) {
                case "dark":
                    return {
                        background: 6710886,
                        grid0: 3355443,
                        grid1: 5921370,
                        grid10: 4473924,
                        sketchPole: 16777215,
                        sketchWall: 13421772,
                        sketchManufacture: 11184810,
                        sketchSpace: 8947848,
                        dimensionDefault: 16777215,
                        dimensionCustom: 9474192
                    };
                default:
                    return {
                        background: 16777215,
                        grid0: 9474192,
                        grid1: 15395562,
                        grid10: 13290186,
                        sketchPole: 7368816,
                        sketchWall: 13684944,
                        sketchManufacture: 12632256,
                        sketchSpace: 13684944,
                        dimensionDefault: 4210752,
                        dimensionCustom: 11579568
                    }
                }
            }
            ,
            this.loadScenes = function() {
                a.three.view.add("2d", {
                    background: a.colors.background,
                    perspective: !0,
                    tone: yt.NoToneMapping,
                    light: 1,
                    position: [0, 15, 0],
                    controlsMinDistance: 2.5,
                    controlsMaxDistance: 100,
                    controlsRotate: !1,
                    controlsMouseButtons: {
                        LEFT: yt.MOUSE.PAN,
                        MIDDLE: null,
                        RIGHT: yt.MOUSE.ROTATE
                    }
                }),
                a.three.environment.addGrid("2d", "grid-1", {
                    frequency: 1,
                    maincolor: a.colors.grid0,
                    color: a.colors.grid1,
                    resetClick: !0
                }),
                a.three.environment.addGrid("2d", "grid-10", {
                    frequency: 10,
                    maincolor: a.colors.grid0,
                    color: a.colors.grid10
                }),
                a.three.environment.addLogo("2d", "logo-2d", {
                    source: "/assets/img/environment/logos-red.png",
                    repeatX: 50,
                    repeatY: 150,
                    opacity: .1,
                    transparent: !0
                }),
                a.three.view.add("3d", {
                    background: 16777215,
                    perspective: !0,
                    tone: yt.LinearToneMapping,
                    light: 2.5,
                    position: [10, 5, 20],
                    controlsMaxDistance: 100,
                    controlsMouseButtons: {
                        LEFT: yt.MOUSE.PAN,
                        MIDDLE: null,
                        RIGHT: yt.MOUSE.ROTATE
                    }
                }),
                a.three.environment.addSky("3d", "sky", {
                    source: "/assets/img/environment/clouds.jpg",
                    repeatX: 12,
                    repeatY: 24,
                    resetClick: !0
                }),
                a.three.environment.addGround("3d", "ground", {
                    source: "/assets/img/environment/".concat(a.details.ground, ".jpg"),
                    repeatX: a.details.groundRepeat.x,
                    repeatY: a.details.groundRepeat.y,
                    resetClick: !0
                }),
                a.three.environment.addLogo("3d", "logo-3d", {
                    source: "/assets/img/environment/logos-red.png",
                    repeatX: 50,
                    repeatY: 150,
                    opacity: .4,
                    transparent: !0
                }),
                a.three.environment.addLight("3d", "sun", {
                    intensity: .65,
                    position: [-40, 50, 100]
                }),
                a.three.environment.addLight("3d", "sun2", {
                    intensity: .5,
                    position: [40, 50, -100],
                    shadow: !1
                }),
                a.three.environment.addLight("3d", "sun3", {
                    intensity: .1,
                    position: [-40, 50, 0],
                    shadow: !1
                }),
                a.three.environment.addLight("3d", "sun4", {
                    intensity: .1,
                    position: [40, 50, 0],
                    shadow: !1
                }),
                a.threeHelper.view.add("2d", {
                    background: a.colors.background,
                    perspective: !1,
                    tone: yt.NoToneMapping,
                    light: 1,
                    position: [0, 0, 5],
                    controlsMouseButtons: {
                        LEFT: yt.MOUSE.PAN,
                        MIDDLE: null,
                        RIGHT: null
                    },
                    controlsMinPolarAngle: Math.PI / 2,
                    controlsMaxPolarAngle: Math.PI / 2,
                    controlsPanVertical: !1
                }),
                a.threeHelper.cameras["2d"].zoom = 2.5,
                a.threeHelper.cameras["2d"].updateProjectionMatrix(),
                "normal" === a.type ? a.setView("2d") : a.setView("3d")
            }
            ,
            this.loadTextures = function() {
                a.envMapDay = a.createTexture("/assets/new/environment/day_1k.jpg"),
                a.envMapDay.mapping = yt.EquirectangularReflectionMapping,
                a.envMapNight = a.createTexture("/assets/new/environment/night_1k.jpg"),
                a.envMapNight.mapping = yt.EquirectangularReflectionMapping,
                a.envMap = a.envMapDay,
                a.textures.wood = a.createTexture("/assets/img/manufactures/textures/wood.jpg"),
                a.textures.wood.wrapS = yt.RepeatWrapping,
                a.textures.wood.wrapT = yt.RepeatWrapping,
                a.textures.perfor = {},
                a.textures.mokka = a.createTexture("/assets/new/panels/default/mokka1.jpg"),
                a.textures.mokka.wrapS = yt.RepeatWrapping,
                a.textures.mokka.wrapT = yt.RepeatWrapping
            }
            ,
            this.loadMaterials = function() {
                a.createMaterial("virtual", "Basic", {
                    source: "/assets/img/geometry/virtual.png",
                    transparent: !0
                }),
                a.createMaterial("flash-center", "Basic", {
                    source: "/assets/img/flashes/center.png",
                    opacity: .45,
                    transparent: !0
                }),
                a.createMaterial("flash-top", "Basic", {
                    source: "/assets/img/flashes/top.png",
                    opacity: .45,
                    transparent: !0
                }),
                a.createMaterial("flash-bottom", "Basic", {
                    source: "/assets/img/flashes/bottom.png",
                    opacity: .45,
                    transparent: !0
                }),
                a.createMaterial("chrome", "Standard", {
                    color: 16777215,
                    metalness: .75,
                    roughness: .2,
                    emissive: 16777215,
                    emissiveIntensity: .06,
                    envMap: a.envMap
                }),
                a.materials.metal = function(e) {
                    return new yt.MeshStandardMaterial({
                        color: e,
                        metalness: .25,
                        roughness: .6
                    })
                }
                ,
                a.materials.sheet = function(e) {
                    return new yt.MeshStandardMaterial({
                        color: e,
                        metalness: .15,
                        roughness: .4
                    })
                }
                ,
                a.materials.panels = {
                    material: new yt.MeshStandardMaterial({
                        name: "Material",
                        color: 4210752,
                        metalness: .2,
                        roughness: .4,
                        envMap: a.envMap
                    }),
                    roof: new yt.MeshStandardMaterial({
                        name: "Roof",
                        color: 4210752,
                        metalness: .1,
                        roughness: .5,
                        envMap: a.envMap
                    }),
                    inside: new yt.MeshStandardMaterial({
                        name: "Inside",
                        color: 14408618,
                        metalness: .2,
                        roughness: .3,
                        envMap: a.envMap
                    }),
                    mokka: new yt.MeshStandardMaterial({
                        name: "Mokka",
                        map: a.textures.mokka,
                        aoMap: a.textures.mokka,
                        aoMapIntensity: 0,
                        metalness: .2,
                        roughness: .3,
                        envMap: a.envMap
                    })
                },
                a.materials.mailbox = function(e, t) {
                    return "inox" === t ? (a.textures.inox || (a.textures.inox = a.createTexture("/assets/new/materials/inox.png"),
                    a.textures.inox.wrapS = yt.RepeatWrapping,
                    a.textures.inox.wrapT = yt.RepeatWrapping,
                    a.textures.inox.repeat.set(5, 5)),
                    new yt.MeshStandardMaterial({
                        name: e,
                        map: a.textures.inox,
                        aoMap: a.textures.inox,
                        aoMapIntensity: 0,
                        metalness: .25,
                        roughness: .25,
                        envMap: a.envMap
                    })) : (a.textures.mat || (a.textures.mat = a.createTexture("/assets/new/materials/mat1.png"),
                    a.textures.mat.wrapS = yt.RepeatWrapping,
                    a.textures.mat.wrapT = yt.RepeatWrapping,
                    a.textures.mat.repeat.set(20, 20)),
                    new yt.MeshStandardMaterial({
                        name: e,
                        color: t,
                        map: a.textures.mat,
                        aoMap: a.textures.mat,
                        aoMapIntensity: 0,
                        metalness: .5 / 3,
                        roughness: .5,
                        envMap: a.envMap
                    }))
                }
            }
            ,
            this.loadEvents = function() {
                ["beforeunload"].forEach((function(e) {
                    return window.addEventListener(e, (function(e) {
                        return !(a.debug || !a.isModified) && ((e || window.event).returnValue = !0,
                        !0)
                    }
                    ))
                }
                ))
            }
            ,
            this.setView = function(e) {
                a.three.view.set(e),
                function(e) {
                    y.dispatch({
                        type: Ye.SET_VIEW,
                        view: e
                    })
                }(e)
            }
            ,
            this.createTexture = function(e) {
                var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                return t && a.buffer.add(),
                a.three.loader.load(e, (function() {
                    t && a.buffer.remove()
                }
                ), !1, (function() {
                    t && a.buffer.remove()
                }
                ))
            }
            ,
            this.createMaterial = function(e, t, i) {
                var n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]
                  , o = "Mesh".concat(t, "Material")
                  , s = {
                    repeatX: 1,
                    repeatY: 1,
                    aoMapIntensity: 0,
                    envMapIntensity: 1
                }
                  , l = Object(k.a)(Object(k.a)({}, s), i);
                l.source ? (n && a.buffer.add(),
                a.three.loader.load(l.source, (function(t) {
                    var i = t.clone();
                    i.needsUpdate = !0,
                    i.wrapS = yt.RepeatWrapping,
                    i.wrapT = yt.RepeatWrapping,
                    i.repeat.set(l.repeatX, l.repeatY),
                    i.anisotropy = a.details.anisotropy,
                    a.materials[e] = new yt[o](Object(k.a)(Object(k.a)({}, l), {
                        map: i,
                        aoMap: i
                    })),
                    n && a.buffer.remove()
                }
                ), !1, (function() {
                    n && a.buffer.remove()
                }
                ))) : a.materials[e] = new yt[o](l)
            }
            ,
            this.onClick = function(e, t) {
                ["click", "touchend"].forEach((function(a) {
                    return e.on(a, (function() {
                        "touchend" === a ? setTimeout((function() {
                            t()
                        }
                        ), 50) : t()
                    }
                    ))
                }
                ))
            }
            ,
            this.resetClick = function(e) {
                e.drag = new _t.a([e],{
                    moveable: !1
                },a.three.camera,a.three.render.domElement),
                ["click", "touchend"].forEach((function(t) {
                    return e.drag.addEventListener(t, (function() {
                        a.resetOptions()
                    }
                    ))
                }
                ))
            }
            ,
            this.resetOptions = function() {
                bt(),
                a.setHighlight(null)
            }
            ,
            this.setHighlight = function(e) {
                a.highlight && (a.highlight.objects.highlight2d && (a.highlight.objects.highlight2d.visible = !1),
                a.highlight.objects.highlight3d && (a.highlight.objects.highlight3d.visible = !1)),
                e && (e.objects.highlight2d && (e.objects.highlight2d.visible = !0),
                e.objects.highlight3d && (e.objects.highlight3d.visible = !0),
                a.highlight = e,
                a.setTechnical(e))
            }
            ,
            this.isDragging = function() {
                return a.dragging + 100 >= Date.now()
            }
            ,
            this.setModified = function() {
                a.isModified = !0
            }
            ,
            this.unsetModified = function() {
                a.isModified = !1
            }
            ,
            this.editMode = function() {
                return !("preview" === a.type || "vr" === a.type)
            }
            ,
            this.dpsi = function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                  , a = .01
                  , i = .003;
                return parseFloat(e) * a + parseFloat(t) * i
            }
            ,
            bt(),
            y.dispatch({
                type: Ye.RESET
            }),
            st(),
            pt(),
            this.intro = t.intro,
            this.canvas = t.canvas,
            this.config = t.config,
            this.type = t.type,
            this.debug = t.debug,
            this.id = t.id,
            this.project = t.project,
            this.vr = "vr" === this.type,
            this.details = this.loadDetails(),
            this.colors = this.loadColors(),
            this.params = {
                dimension: {
                    color: 0,
                    distance: {
                        main: 1.5,
                        between: .75,
                        adapt: .75,
                        technical: .25
                    },
                    depth: .01,
                    arrows: .12
                },
                texture: {
                    aoMapIntensity: 0,
                    metalness: 0,
                    roughness: 1
                },
                wood: {
                    aoMapIntensity: 0,
                    metalness: .25,
                    roughness: .6
                },
                perfor: {
                    aoMapIntensity: 0,
                    metalness: .25,
                    roughness: .2,
                    transparent: !0
                },
                ghost: {
                    opacity: .35,
                    transparent: !0
                },
                disabled: {
                    opacity: .15,
                    transparent: 1
                },
                hidden: {
                    opacity: .15,
                    transparent: 1
                }
            },
            this.three = new Dt(this,this.canvas[0]),
            this.three.view = new Tt(this,this.three),
            this.three.environment = new Vt(this,this.three),
            this.three.animations = new Ft(this,this.three),
            this.threeHelper = new Dt(this,this.canvas[1]),
            this.threeHelper.view = new Tt(this,this.threeHelper),
            this.threeHelper.environment = new Vt(this,this.threeHelper),
            this.extensions = {
                storage: new ha(this),
                communique: new Nt(this),
                dimensions: new la(this),
                average: new Bt(this),
                autosave: new Wt(this),
                screenshot: new da(this),
                photoBackground: new ra(this),
                dayNight: new Ut(this),
                details: new Zt(this),
                valuation: new ba(this),
                timer: new ua(this)
            },
            this.font = {
                weight: "bold",
                size: .2,
                family: '"Arial", "sans-serif"',
                color: "#000000"
            },
            this.textures = [],
            this.materials = [],
            this.highlight = null,
            this.dragging = 0,
            this.isLoading = !1,
            this.isMoving = !1,
            this.isModified = !1
        }
        ))
          , va = Object(r.a)((function e(t) {
            var a = this;
            Object(l.a)(this, e),
            this.setPanel = function(e) {
                switch (e) {
                case "episode":
                    ft(e);
                    break;
                case "colors-blocks":
                    ft(e, {
                        blocksFamily: a.instance.blocksFamily,
                        blocksColor: a.instance.blocksColor
                    });
                    break;
                case "colors-peaks":
                    ft(e, {
                        peaksFamily: a.instance.peaksFamily,
                        peaksColor: a.instance.peaksColor
                    });
                    break;
                case "combo":
                    ft(e, a.instance.combo, a.instance.combo);
                    break;
                case "fencings":
                    ft(e, a.instance.fencings, a.instance.fencings);
                    break;
                case "migration":
                    ft(e);
                    break;
                case "settings":
                    ft(e, a.instance.settings, a.instance.settings)
                }
            }
            ,
            this.setSetting = function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                switch (e) {
                case "move":
                    t = !a.instance.settings[e];
                    break;
                case "autosave":
                    t = !a.instance.settings[e],
                    a.instance.extensions.autosave.set(t);
                    break;
                case "defaultDistance":
                    t = parseFloat(t);
                    break;
                case "heightPoles":
                case "heightWalls":
                    t = parseInt(t, 10)
                }
                a.instance.settings[e] = t,
                a.instance.setModified()
            }
            ,
            this.addPole = function() {
                a.instance.addPole(null, null, null, a.instance.settings.defaultDistance, "wall", !1),
                a.instance.setModified()
            }
            ,
            this.addCurtain = function() {
                a.instance.addPole(null, null, null, a.instance.settings.defaultDistance, "wall", !0),
                a.instance.setModified()
            }
            ,
            this.addWicket = function() {
                a.instance.addPole(null, null, null, 1, "wicket", !1),
                a.instance.setModified()
            }
            ,
            this.addGate = function() {
                a.instance.addPole(null, null, null, 4, "gate", !1),
                a.instance.setModified()
            }
            ,
            this.addSpace = function() {
                a.instance.addPole(null, null, null, a.instance.settings.defaultDistance, "space", !1),
                a.instance.setModified()
            }
            ,
            this.clear = function() {
                ot(W("Usun\u0105\u0107 wszystkie s\u0142upki i prz\u0119s\u0142a?"), (function() {
                    a.instance.projectClear(),
                    a.instance.resetOptions(),
                    a.instance.setModified()
                }
                ))
            }
            ,
            this.reset = function() {
                ot(W("Zmieni\u0107 system i zacz\u0105\u0107 wszystko od nowa?"), (function() {
                    document.getElementById("application").style.display = "none",
                    a.instance.intro.instance.state.project.data.system = !1,
                    a.instance.intro.forceUpdate()
                }
                ))
            }
            ,
            this.migration = function(e) {
                ot(W("Kontynuowa\u0107?"), (function() {
                    a.instance.migration(e, P.first(a.instance.config.systems[e].blocks))
                }
                ))
            }
            ,
            this.setBlocksColor = function(e, t) {
                var i;
                a.instance.blocksColor = e,
                (null === (i = t.force) || void 0 === i ? void 0 : i.peaksColor) && P.in(a.instance.peaksColor, t.force.peaksColor) && (a.instance.peaksColor = e),
                a.instance.updateTextures(),
                a.setPanel("colors-blocks"),
                a.instance.setModified()
            }
            ,
            this.setPeaksColor = function(e, t) {
                var i;
                (null === (i = t.force) || void 0 === i ? void 0 : i.blocksColor) && P.in(a.instance.blocksColor, t.force.blocksColor) && (a.instance.blocksColor = e),
                a.instance.peaksFamily = t.family,
                a.instance.peaksColor = e,
                a.instance.updateTextures(),
                a.setPanel("colors-peaks"),
                a.instance.setModified()
            }
            ,
            this.setAllHeightPoles = function() {
                var e = a.instance.settings.heightPoles;
                if (e >= 0 && e <= 30) {
                    var t = !0;
                    P.values(a.instance.poles).forEach((function(a) {
                        Math.round(e - a.seating / a.seatingMaterialHeight) < a.getMinHeight() && (t = !1)
                    }
                    )),
                    t ? (P.values(a.instance.poles).forEach((function(t) {
                        var a = Math.round(e - t.seating / t.seatingMaterialHeight);
                        t.resizeHeight(a)
                    }
                    )),
                    a.instance.extensions.communique.set("".concat(W("Zmiany zosta\u0142y zastosowane"), "."))) : a.instance.extensions.communique.set("".concat(W("Przynajmniej jeden z element\xf3w nie pozwala na zastosowanie zmian"), "."))
                } else
                    a.instance.extensions.communique.set("".concat(W("Podano nieprawid\u0142ow\u0105 warto\u015b\u0107"), "."))
            }
            ,
            this.setAllHeightWalls = function() {
                var e = a.instance.settings.heightWalls;
                if (e >= 1 && e <= 30) {
                    var t = !0;
                    P.values(a.instance.poles).forEach((function(a) {
                        if (a = a.wall,
                        e > a.getMaxHeight())
                            t = !1;
                        else {
                            var i = e * a.blockMaterial.block.height
                              , n = a.getMaxPotentialHeight(e);
                            a.blocksFamily.settings.sameAlignment ? i > n && (t = !1) : i >= n && (t = !1)
                        }
                    }
                    )),
                    t ? (P.values(a.instance.poles).forEach((function(t) {
                        (t = t.wall).resizeHeight(e)
                    }
                    )),
                    a.instance.extensions.communique.set("".concat(W("Zmiany zosta\u0142y zastosowane"), "."))) : a.instance.extensions.communique.set("".concat(W("Przynajmniej jeden z element\xf3w nie pozwala na zastosowanie zmian"), "."))
                } else
                    a.instance.extensions.communique.set("".concat(W("Podano nieprawid\u0142ow\u0105 warto\u015b\u0107"), "."))
            }
            ,
            this.setAllMaterialPoles = function(e) {
                P.values(a.instance.poles).forEach((function(t) {
                    if (t) {
                        var a, i = t, n = i.getBlockMaterialsList(), o = i.config.blockMaterialId;
                        0 === o.indexOf("c2-") ? n["c2-".concat(e)] ? a = "c2-".concat(e) : n["c1-".concat(e)] && (a = "c1-".concat(e)) : 0 === o.indexOf("c1-") ? n["c1-".concat(e)] ? a = "c1-".concat(e) : n["c2-".concat(e)] && (a = "c2-".concat(e)) : a = e,
                        a && n[a] && i.actions.blockMaterial(a)
                    }
                }
                )),
                a.instance.actions.setPanel("settings"),
                a.instance.setHighlight(null)
            }
            ,
            this.setAllMaterialWalls = function(e) {
                P.values(a.instance.poles).forEach((function(t) {
                    if (t && t.next && t.next.wall) {
                        var a = t.next.wall
                          , i = a.getBlockMaterialsList()
                          , n = e;
                        n && i[n] && a.actions.blockMaterial(n)
                    }
                }
                )),
                a.instance.actions.setPanel("settings"),
                a.instance.setHighlight(null)
            }
            ,
            this.setCombo = function(e) {
                a.instance.combo = e,
                a.instance.comboReload(),
                a.instance.fencingsReload(),
                a.instance.setModified()
            }
            ,
            this.setFencings = function(e) {
                a.instance.fencings = e,
                a.instance.comboReload(),
                a.instance.fencingsReload(),
                a.instance.setModified()
            }
            ,
            this.switchView = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                e ? a.instance.setView(e) : "2d" === a.three.view.get() ? a.instance.setView("3d") : a.instance.setView("2d")
            }
            ,
            this.switchWindow = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null
                  , t = document.getElementById("application")
                  , i = ["none", "vertical", "horizontal", "cascade-technical", "cascade-main"];
                if (!e) {
                    var n = i.indexOf(a.instance.window) + 1;
                    e = n < i.length ? i[n] : i[0]
                }
                a.instance.window = e,
                P.values(i).forEach((function(e) {
                    t.classList.remove("window-".concat(e))
                }
                )),
                t.classList.add("window-".concat(e)),
                a.instance.three.reset(),
                a.instance.threeHelper.reset()
            }
            ,
            this.instance = t,
            this.three = t.three
        }
        ))
          , ya = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.blockMaterial = function(e) {
                i.target.setBlockMaterialId(e),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.depthPlus = function() {
                i.target.resizeDepth(i.target.config.size.depth + 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.depthMinus = function() {
                i.target.resizeDepth(i.target.config.size.depth - 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.heightPlus = function() {
                i.target.resizeHeight(i.target.config.size.height + 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.heightMinus = function() {
                i.target.resizeHeight(i.target.config.size.height - 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.polygonBreak = function() {
                i.target.setPolygonBreak(!i.target.config.polygonBreak),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.remove = function() {
                ot(W("Usun\u0105\u0107 ?"), (function() {
                    i.instance.removePole(i.target.id),
                    i.instance.resetOptions(),
                    i.instance.setModified()
                }
                ))
            }
            ,
            this.virtual = function() {
                i.target.setVirtual(!i.target.config.virtual),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.widthPlus = function() {
                i.target.resizeWidth(i.target.config.size.width + 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.widthMinus = function() {
                i.target.resizeWidth(i.target.config.size.width - 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.instance = t,
            this.target = a
        }
        ))
          , ka = Object(r.a)((function e(t, a, i) {
            Object(l.a)(this, e);
            var n = new yt.Geometry;
            n.vertices = [new yt.Vector3(-t / 2,0,-i / 2), new yt.Vector3(-t / 2,0,i / 2), new yt.Vector3(t / 2,0,i / 2), new yt.Vector3(t / 2,0,-i / 2), new yt.Vector3(-t / 2,a,-i / 2), new yt.Vector3(-t / 2,a,i / 2), new yt.Vector3(t / 2,a,i / 2), new yt.Vector3(t / 2,a,-i / 2)],
            n.faces = [new yt.Face3(0,2,1), new yt.Face3(0,3,2), new yt.Face3(5,7,4), new yt.Face3(5,6,7), new yt.Face3(0,4,7), new yt.Face3(0,7,3), new yt.Face3(1,6,5), new yt.Face3(1,2,6), new yt.Face3(1,5,4), new yt.Face3(1,4,0), new yt.Face3(2,7,6), new yt.Face3(2,3,7)],
            n.faces[0].materialIndex = 0,
            n.faces[1].materialIndex = 0,
            n.faces[2].materialIndex = 1,
            n.faces[3].materialIndex = 1,
            n.faces[4].materialIndex = 2,
            n.faces[5].materialIndex = 2,
            n.faces[6].materialIndex = 3,
            n.faces[7].materialIndex = 3,
            n.faces[8].materialIndex = 4,
            n.faces[9].materialIndex = 4,
            n.faces[10].materialIndex = 5,
            n.faces[11].materialIndex = 5;
            var o = [];
            return o.push(new yt.Vector2(0,0)),
            o.push(new yt.Vector2(1,0)),
            o.push(new yt.Vector2(1,1)),
            o.push(new yt.Vector2(0,1)),
            n.faceVertexUvs[0] = [[o[0], o[2], o[3]], [o[0], o[1], o[2]], [o[0], o[2], o[3]], [o[0], o[1], o[2]], [o[0], o[3], o[2]], [o[0], o[2], o[1]], [o[0], o[2], o[3]], [o[0], o[1], o[2]], [o[0], o[3], o[2]], [o[0], o[2], o[1]], [o[0], o[2], o[3]], [o[0], o[1], o[2]]],
            n.computeFaceNormals(),
            n
        }
        ))
          , xa = Object(r.a)((function e(t, a, i, n, o, s) {
            Object(l.a)(this, e);
            var r = new yt.Geometry;
            r.points = Ot.Corner(t, a, i, n, s),
            r.vertices = [new yt.Vector3(r.points.a.x,0,r.points.a.y), new yt.Vector3(r.points.b.x,0,r.points.b.y), new yt.Vector3(r.points.c.x,0,r.points.c.y), new yt.Vector3(r.points.d.x,0,r.points.d.y), new yt.Vector3(r.points.e.x,0,r.points.e.y), new yt.Vector3(r.points.f.x,0,r.points.f.y), new yt.Vector3(r.points.a.x,o,r.points.a.y), new yt.Vector3(r.points.b.x,o,r.points.b.y), new yt.Vector3(r.points.c.x,o,r.points.c.y), new yt.Vector3(r.points.d.x,o,r.points.d.y), new yt.Vector3(r.points.e.x,o,r.points.e.y), new yt.Vector3(r.points.f.x,o,r.points.f.y)],
            r.faces = [new yt.Face3(1,2,3), new yt.Face3(1,0,2), new yt.Face3(3,4,5), new yt.Face3(3,2,4), new yt.Face3(1,9,7), new yt.Face3(1,3,9), new yt.Face3(0,6,8), new yt.Face3(0,8,2), new yt.Face3(3,11,9), new yt.Face3(3,5,11), new yt.Face3(2,8,10), new yt.Face3(2,10,4), new yt.Face3(0,7,6), new yt.Face3(0,1,7), new yt.Face3(5,10,11), new yt.Face3(5,4,10), new yt.Face3(7,9,8), new yt.Face3(7,8,6), new yt.Face3(9,11,10), new yt.Face3(9,10,8)],
            r.faces[0].materialIndex = 0,
            r.faces[1].materialIndex = 0,
            r.faces[2].materialIndex = 1,
            r.faces[3].materialIndex = 1,
            r.faces[4].materialIndex = 2,
            r.faces[5].materialIndex = 2,
            r.faces[6].materialIndex = 3,
            r.faces[7].materialIndex = 3,
            r.faces[8].materialIndex = 4,
            r.faces[9].materialIndex = 4,
            r.faces[10].materialIndex = 5,
            r.faces[11].materialIndex = 5,
            r.faces[12].materialIndex = 6,
            r.faces[13].materialIndex = 6,
            r.faces[14].materialIndex = 7,
            r.faces[15].materialIndex = 7,
            r.faces[16].materialIndex = 8,
            r.faces[17].materialIndex = 8,
            r.faces[18].materialIndex = 9,
            r.faces[19].materialIndex = 9;
            var c = [];
            c.push(new yt.Vector2(0,0)),
            c.push(new yt.Vector2(1,0)),
            c.push(new yt.Vector2(1,1)),
            c.push(new yt.Vector2(0,1));
            var p = Mt.getDistance(r.points.a, r.points.c)
              , d = Mt.getDistance(r.points.b, r.points.d)
              , h = Mt.getDistance(r.points.c, r.points.e)
              , u = Mt.getDistance(r.points.d, r.points.f);
            return r.faceVertexUvs[0] = [[c[0], c[2], c[1]], [c[0], c[3], c[2]], [c[0], c[2], c[1]], [c[0], c[3], c[2]], [new yt.Vector2(0,0), new yt.Vector2(d / t,1), new yt.Vector2(0,1)], [new yt.Vector2(0,0), new yt.Vector2(d / t,0), new yt.Vector2(d / t,1)], [new yt.Vector2(0,0), new yt.Vector2(0,1), new yt.Vector2(p / t,1)], [new yt.Vector2(0,0), new yt.Vector2(p / t,1), new yt.Vector2(p / t,0)], [new yt.Vector2(1 - u / i,0), new yt.Vector2(1,1), new yt.Vector2(1 - u / i,1)], [new yt.Vector2(1 - u / i,0), new yt.Vector2(1,0), new yt.Vector2(1,1)], [new yt.Vector2(1 - h / i,0), new yt.Vector2(1 - h / i,1), new yt.Vector2(1,1)], [new yt.Vector2(1 - h / i,0), new yt.Vector2(1,1), new yt.Vector2(1,0)], [c[0], c[2], c[3]], [c[0], c[1], c[2]], [c[0], c[2], c[3]], [c[0], c[1], c[2]], [new yt.Vector2(0,0), new yt.Vector2(d / t,0), new yt.Vector2(p / t,1)], [new yt.Vector2(0,0), new yt.Vector2(p / t,1), new yt.Vector2(0,1)], [new yt.Vector2(1 - u / i,0), new yt.Vector2(1,0), new yt.Vector2(1,1)], [new yt.Vector2(1 - u / i,0), new yt.Vector2(1,1), new yt.Vector2(1 - h / i,1)]],
            r.computeFaceNormals(),
            r
        }
        ))
          , ja = Object(r.a)((function e(t, a, i, n, o, s) {
            Object(l.a)(this, e);
            var r = new yt.Geometry;
            r.vertices = [new yt.Vector3(-t / 2,0,-a / 2), new yt.Vector3(-t / 2,0,a / 2), new yt.Vector3(t / 2,0,a / 2), new yt.Vector3(t / 2,0,-a / 2), new yt.Vector3(-t / 2,s,-a / 2), new yt.Vector3(-t / 2,s,a / 2), new yt.Vector3(t / 2,s,a / 2), new yt.Vector3(t / 2,s,-a / 2), new yt.Vector3(-i / 2,o + s,-n / 2), new yt.Vector3(-i / 2,o + s,n / 2), new yt.Vector3(i / 2,o + s,n / 2), new yt.Vector3(i / 2,o + s,-n / 2)],
            r.faces = [new yt.Face3(0,0,0), new yt.Face3(0,0,0), new yt.Face3(5,8,4), new yt.Face3(0,0,0), new yt.Face3(6,7,11), new yt.Face3(0,0,0), new yt.Face3(4,8,11), new yt.Face3(4,11,7), new yt.Face3(5,10,9), new yt.Face3(5,6,10), new yt.Face3(1,5,4), new yt.Face3(1,4,0), new yt.Face3(2,7,6), new yt.Face3(2,3,7), new yt.Face3(0,4,7), new yt.Face3(0,7,3), new yt.Face3(1,6,5), new yt.Face3(1,2,6), new yt.Face3(0,2,1), new yt.Face3(0,3,2)],
            r.faces[2].materialIndex = 6,
            r.faces[4].materialIndex = 7,
            r.faces[6].materialIndex = 5,
            r.faces[7].materialIndex = 5,
            r.faces[8].materialIndex = 4,
            r.faces[9].materialIndex = 4,
            r.faces[10].materialIndex = 3,
            r.faces[11].materialIndex = 3,
            r.faces[12].materialIndex = 2,
            r.faces[13].materialIndex = 2,
            r.faces[14].materialIndex = 1,
            r.faces[15].materialIndex = 1,
            r.faces[16].materialIndex = 0,
            r.faces[17].materialIndex = 0,
            r.faces[18].materialIndex = 9,
            r.faces[19].materialIndex = 9;
            var c = [];
            c.push(new yt.Vector2(0,0)),
            c.push(new yt.Vector2(1,0)),
            c.push(new yt.Vector2(1,1)),
            c.push(new yt.Vector2(0,1));
            var p = i / t / 2;
            return r.faceVertexUvs[0] = [[c[0], c[0], c[0]], [c[0], c[0], c[0]], [c[0], new yt.Vector2(.5,1), new yt.Vector2(1,0)], [c[0], c[0], c[0]], [c[0], new yt.Vector2(1,0), new yt.Vector2(.5,1)], [c[0], c[0], c[0]], [c[0], new yt.Vector2(p,1), new yt.Vector2(1 - p,1)], [c[0], new yt.Vector2(1 - p,1), new yt.Vector2(1,0)], [c[0], new yt.Vector2(1 - p,1), new yt.Vector2(p,1)], [c[0], new yt.Vector2(1,0), new yt.Vector2(1 - p,1)], [c[0], c[3], c[2]], [c[0], c[2], c[1]], [c[0], c[2], c[3]], [c[0], c[1], c[2]], [c[0], c[3], c[2]], [c[0], c[2], c[1]], [c[0], c[2], c[3]], [c[0], c[1], c[2]], [c[0], c[2], c[3]], [c[0], c[1], c[2]]],
            r.computeFaceNormals(),
            r
        }
        ))
          , za = Object(r.a)((function e(t, a, i, n, o) {
            Object(l.a)(this, e);
            var s = new yt.Geometry;
            s.vertices = [new yt.Vector3(-t / 2,0,-a / 2), new yt.Vector3(-t / 2,0,a / 2), new yt.Vector3(t / 2,0,a / 2), new yt.Vector3(t / 2,0,-a / 2), new yt.Vector3(-t / 2,o,-a / 2), new yt.Vector3(-t / 2,o,a / 2), new yt.Vector3(t / 2,o,a / 2), new yt.Vector3(t / 2,o,-a / 2), new yt.Vector3(-t / 2,n + o,-i / 2), new yt.Vector3(-t / 2,n + o,i / 2), new yt.Vector3(t / 2,n + o,i / 2), new yt.Vector3(t / 2,n + o,-i / 2)],
            s.faces = [new yt.Face3(5,8,4), new yt.Face3(0,0,0), new yt.Face3(6,7,11), new yt.Face3(0,0,0), new yt.Face3(4,8,11), new yt.Face3(4,11,7), new yt.Face3(5,10,9), new yt.Face3(5,6,10), new yt.Face3(1,5,4), new yt.Face3(1,4,0), new yt.Face3(2,7,6), new yt.Face3(2,3,7), new yt.Face3(0,4,7), new yt.Face3(0,7,3), new yt.Face3(1,6,5), new yt.Face3(1,2,6), new yt.Face3(0,2,1), new yt.Face3(0,3,2)],
            s.faces[0].materialIndex = 7,
            s.faces[2].materialIndex = 6,
            s.faces[4].materialIndex = 5,
            s.faces[5].materialIndex = 5,
            s.faces[6].materialIndex = 4,
            s.faces[7].materialIndex = 4,
            s.faces[8].materialIndex = 3,
            s.faces[9].materialIndex = 3,
            s.faces[10].materialIndex = 2,
            s.faces[11].materialIndex = 2,
            s.faces[12].materialIndex = 1,
            s.faces[13].materialIndex = 1,
            s.faces[14].materialIndex = 0,
            s.faces[15].materialIndex = 0,
            s.faces[16].materialIndex = 9,
            s.faces[17].materialIndex = 9;
            var r = [];
            return r.push(new yt.Vector2(0,0)),
            r.push(new yt.Vector2(1,0)),
            r.push(new yt.Vector2(1,1)),
            r.push(new yt.Vector2(0,1)),
            s.faceVertexUvs[0] = [[r[0], new yt.Vector2(.5,1), new yt.Vector2(1,0)], [r[0], r[0], r[0]], [r[0], new yt.Vector2(1,0), new yt.Vector2(.5,1)], [r[0], r[0], r[0]], [r[0], r[3], r[2]], [r[0], r[2], r[1]], [r[0], r[2], r[3]], [r[0], r[1], r[2]], [r[0], r[3], r[2]], [r[0], r[2], r[1]], [r[0], r[2], r[3]], [r[0], r[1], r[2]], [r[0], r[3], r[2]], [r[0], r[2], r[1]], [r[0], r[2], r[3]], [r[0], r[1], r[2]], [r[0], r[2], r[3]], [r[0], r[1], r[2]]],
            s.computeFaceNormals(),
            s
        }
        ))
          , Ma = Object(r.a)((function e(t, a, i, n, o, s, r, c, p) {
            Object(l.a)(this, e);
            var d = new yt.Geometry;
            d.points = Ot.Peak2Corner(t, a, i, n, s, r, p),
            d.vertices = [new yt.Vector3(d.points.a.x,0,d.points.a.y), new yt.Vector3(d.points.b.x,0,d.points.b.y), new yt.Vector3(d.points.c.x,0,d.points.c.y), new yt.Vector3(d.points.d.x,0,d.points.d.y), new yt.Vector3(d.points.e.x,0,d.points.e.y), new yt.Vector3(d.points.f.x,0,d.points.f.y), new yt.Vector3(d.points.a.x,o,d.points.a.y), new yt.Vector3(d.points.b.x,o,d.points.b.y), new yt.Vector3(d.points.c.x,o,d.points.c.y), new yt.Vector3(d.points.d.x,o,d.points.d.y), new yt.Vector3(d.points.e.x,o,d.points.e.y), new yt.Vector3(d.points.f.x,o,d.points.f.y), new yt.Vector3(d.points.a1.x,o + c,d.points.a1.y), new yt.Vector3(d.points.b1.x,o + c,d.points.b1.y), new yt.Vector3(d.points.c1.x,o + c,d.points.c1.y), new yt.Vector3(d.points.d1.x,o + c,d.points.d1.y), new yt.Vector3(d.points.e1.x,o + c,d.points.e1.y), new yt.Vector3(d.points.f1.x,o + c,d.points.f1.y)],
            d.faces = [new yt.Face3(1,2,3), new yt.Face3(1,0,2), new yt.Face3(3,4,5), new yt.Face3(3,2,4), new yt.Face3(1,9,7), new yt.Face3(1,3,9), new yt.Face3(0,6,8), new yt.Face3(0,8,2), new yt.Face3(3,11,9), new yt.Face3(3,5,11), new yt.Face3(2,8,10), new yt.Face3(2,10,4), new yt.Face3(0,7,6), new yt.Face3(0,1,7), new yt.Face3(5,10,11), new yt.Face3(5,4,10), new yt.Face3(7,15,13), new yt.Face3(7,9,15), new yt.Face3(6,12,14), new yt.Face3(6,14,8), new yt.Face3(9,17,15), new yt.Face3(9,11,17), new yt.Face3(8,14,16), new yt.Face3(8,16,10), new yt.Face3(6,13,12), new yt.Face3(6,7,13), new yt.Face3(11,16,17), new yt.Face3(11,10,16), new yt.Face3(13,15,14), new yt.Face3(13,14,12), new yt.Face3(15,17,16), new yt.Face3(15,16,14)],
            d.faces[0].materialIndex = 0,
            d.faces[1].materialIndex = 0,
            d.faces[2].materialIndex = 1,
            d.faces[3].materialIndex = 1,
            d.faces[4].materialIndex = 2,
            d.faces[5].materialIndex = 2,
            d.faces[6].materialIndex = 3,
            d.faces[7].materialIndex = 3,
            d.faces[8].materialIndex = 4,
            d.faces[9].materialIndex = 4,
            d.faces[10].materialIndex = 5,
            d.faces[11].materialIndex = 5,
            d.faces[12].materialIndex = 6,
            d.faces[13].materialIndex = 6,
            d.faces[14].materialIndex = 7,
            d.faces[15].materialIndex = 7,
            d.faces[16].materialIndex = 8,
            d.faces[17].materialIndex = 8,
            d.faces[18].materialIndex = 9,
            d.faces[19].materialIndex = 9,
            d.faces[20].materialIndex = 10,
            d.faces[21].materialIndex = 10,
            d.faces[22].materialIndex = 11,
            d.faces[23].materialIndex = 11,
            d.faces[24].materialIndex = 12,
            d.faces[25].materialIndex = 12,
            d.faces[26].materialIndex = 13,
            d.faces[27].materialIndex = 13,
            d.faces[28].materialIndex = 14,
            d.faces[29].materialIndex = 14,
            d.faces[30].materialIndex = 15,
            d.faces[31].materialIndex = 15;
            var h = [];
            h.push(new yt.Vector2(0,0)),
            h.push(new yt.Vector2(1,0)),
            h.push(new yt.Vector2(1,1)),
            h.push(new yt.Vector2(0,1));
            var u = Mt.getDistance(d.points.a, d.points.c)
              , m = Mt.getDistance(d.points.b, d.points.d)
              , g = Mt.getDistance(d.points.c, d.points.e)
              , f = Mt.getDistance(d.points.d, d.points.f)
              , b = (a - (a - s) / 2) / a
              , w = Mt.getDistance(d.points.a1, d.points.c1)
              , v = Mt.getDistance(d.points.b1, d.points.d1)
              , y = Mt.getDistance(d.points.d1, d.points.f1)
              , k = Mt.getDistance(d.points.c1, d.points.e1)
              , x = (n - (n - r) / 2) / n;
            return d.faceVertexUvs[0] = [[h[0], h[2], h[1]], [h[0], h[3], h[2]], [h[0], h[2], h[1]], [h[0], h[3], h[2]], [new yt.Vector2(0,0), new yt.Vector2(m / t,1), new yt.Vector2(0,1)], [new yt.Vector2(0,0), new yt.Vector2(m / t,0), new yt.Vector2(m / t,1)], [new yt.Vector2(0,0), new yt.Vector2(0,1), new yt.Vector2(u / t,1)], [new yt.Vector2(0,0), new yt.Vector2(u / t,1), new yt.Vector2(u / t,0)], [new yt.Vector2(1 - f / i,0), new yt.Vector2(1,1), new yt.Vector2(1 - f / i,1)], [new yt.Vector2(1 - f / i,0), new yt.Vector2(1,0), new yt.Vector2(1,1)], [new yt.Vector2(1 - g / i,0), new yt.Vector2(1 - g / i,1), new yt.Vector2(1,1)], [new yt.Vector2(1 - g / i,0), new yt.Vector2(1,1), new yt.Vector2(1,0)], [h[0], h[2], h[3]], [h[0], h[1], h[2]], [h[0], h[2], h[3]], [h[0], h[1], h[2]], [new yt.Vector2(0,0), new yt.Vector2(v / t,1), new yt.Vector2(0,1)], [new yt.Vector2(0,0), new yt.Vector2(m / t,0), new yt.Vector2(v / t,1)], [new yt.Vector2(0,0), new yt.Vector2(0,1), new yt.Vector2(w / t,1)], [new yt.Vector2(0,0), new yt.Vector2(w / t,1), new yt.Vector2(u / t,0)], [new yt.Vector2(1 - f / i,0), new yt.Vector2(1,1), new yt.Vector2(1 - y / i,1)], [new yt.Vector2(1 - f / i,0), new yt.Vector2(1,0), new yt.Vector2(1,1)], [new yt.Vector2(1 - g / i,0), new yt.Vector2(1 - k / i,1), new yt.Vector2(1,1)], [new yt.Vector2(1 - g / i,0), new yt.Vector2(1,1), new yt.Vector2(1,0)], [new yt.Vector2(0,0), new yt.Vector2(b,1), new yt.Vector2(1 - b,1)], [new yt.Vector2(0,0), new yt.Vector2(1,0), new yt.Vector2(b,1)], [new yt.Vector2(0,0), new yt.Vector2(x,1), new yt.Vector2(1 - x,1)], [new yt.Vector2(0,0), new yt.Vector2(1,0), new yt.Vector2(x,1)], [new yt.Vector2(0,0), new yt.Vector2(v / t,0), new yt.Vector2(w / t,1)], [new yt.Vector2(0,0), new yt.Vector2(w / t,1), new yt.Vector2(0,1)], [new yt.Vector2(1 - y / i,0), new yt.Vector2(1,0), new yt.Vector2(1,1)], [new yt.Vector2(1 - y / i,0), new yt.Vector2(1,1), new yt.Vector2(1 - k / i,1)]],
            d.computeFaceNormals(),
            d
        }
        ))
          , Oa = Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doSketch = function() {
                var e, a;
                if (t.config.virtual)
                    e = t.doSketchVirtual(),
                    a = !0;
                else
                    switch (t.blockMaterial.block.type) {
                    case "cuboid":
                        e = t.doSketchTypeCuboid(),
                        a = !0;
                        break;
                    case "corner":
                        e = t.doSketchTypeCorner(),
                        a = t.points.status
                    }
                e && (t.objects.sketch ? (t.objects.sketch.geometry = e.geometry,
                t.objects.sketch.material = e.material) : (t.objects.sketch = new yt.Mesh(e.geometry,e.material),
                t.three.scenes["2d"].add(t.objects.sketch),
                t.eventsSketch(t.objects.sketch)),
                t.objects.sketch.position.set(t.position.x, t.config.virtual ? t.instance.dpsi(1, 2) : t.instance.dpsi(1, 1), t.position.z),
                t.objects.sketch.rotation.y = t.rotation,
                t.objects.sketch.visible = a)
            }
            ,
            this.doSketchVirtual = function() {
                return {
                    material: [!1, t.instance.materials.virtual, !1, !1, !1, !1],
                    geometry: new ka(t.virtualSize,.001,t.virtualSize)
                }
            }
            ,
            this.doSketchTypeCuboid = function() {
                return {
                    material: [!1, new yt.MeshBasicMaterial({
                        color: t.sketchColor
                    }), !1, !1, !1, !1],
                    geometry: new ka(t.width,.001,t.depth)
                }
            }
            ,
            this.doSketchTypeCorner = function() {
                return {
                    material: [!1, !1, !1, !1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                        color: t.sketchColor
                    }), new yt.MeshBasicMaterial({
                        color: t.sketchColor
                    })],
                    geometry: new xa(t.width,t.coupler,t.depth,t.coupler,.001,t.angle)
                }
            }
            ,
            this.doDescription = function() {
                t.doDescriptionTextSprite()
            }
            ,
            this.doDescriptionShape = function() {
                var e = new ta(t.instance.fonts.normal,t.calcDescription());
                if (t.objects.description)
                    t.objects.description.geometry = e;
                else {
                    var a = new yt.MeshBasicMaterial({
                        color: 255
                    });
                    t.objects.description = new yt.Mesh(e,a),
                    t.objects.description.rotation.x = -Math.PI / 2,
                    t.three.scenes["2d"].add(t.objects.description)
                }
                t.objects.description.position.set(t.position.x, t.instance.dpsi(2), t.position.z - .02),
                t.objects.description.visible = "corner" === t.blockMaterial.block.type
            }
            ,
            this.doDescriptionTextSprite = function() {
                t.objects.description || (t.objects.description = new Qt.a({
                    fontWeight: "normal",
                    fontSize: t.instance.font.size,
                    fontFamily: t.instance.font.family,
                    fillStyle: "#0000ff"
                }),
                t.three.scenes["2d"].add(t.objects.description)),
                t.objects.description.material.map.text = t.calcDescription(),
                t.objects.description.position.set(t.position.x, t.instance.dpsi(2), t.position.z + .015),
                t.objects.description.visible = "corner" === t.blockMaterial.block.type
            }
            ,
            this.doPole = function() {
                var e;
                switch (t.blockMaterial.block.type) {
                case "cuboid":
                    e = t.doPoleTypeCuboid();
                    break;
                case "corner":
                    e = t.doPoleTypeCorner()
                }
                e && (t.objects.pole ? (t.objects.pole.geometry = e.geometry,
                t.objects.pole.material = e.material) : (t.objects.pole = new yt.Mesh(e.geometry,e.material),
                t.objects.pole.castShadow = !0,
                t.three.scenes["3d"].add(t.objects.pole),
                t.eventsPole(t.objects.pole)),
                t.objects.pole.position.set(t.position.x, t.calcPolePositionY(), t.position.z),
                t.objects.pole.rotation.y = t.rotation,
                t.objects.pole.visible = !t.config.virtual)
            }
            ,
            this.doPoleTypeCuboid = function() {
                var e, a = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = t.height - t.additionals.ledblock.getOffset(), n = t.getPoleTextures().width1.clone();
                n.needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set(t.width / t.blockMaterial.block.texture.width1.x, i / t.blockMaterial.block.texture.width1.y),
                n.offset.x = t.offset / t.blockMaterial.block.texture.width1.x,
                n.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.width1.y / t.getBlockSum()),
                n.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.width2 ? ((e = t.getPoleTextures().width2.clone()).needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set(t.width / t.blockMaterial.block.texture.width2.x, i / t.blockMaterial.block.texture.width2.y),
                e.offset.x = t.offset / t.blockMaterial.block.texture.width2.x,
                e.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.width2.y / t.getBlockSum()),
                e.anisotropy = t.instance.details.anisotropy) : e = n;
                var o, s = t.getPoleTextures().depth1.clone();
                s.needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set(t.depth / t.blockMaterial.block.texture.depth1.x, i / t.blockMaterial.block.texture.depth1.y),
                s.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.depth1.y / t.getBlockSum()),
                s.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.depth2 ? ((o = t.getPoleTextures().depth2.clone()).needsUpdate = !0,
                o.wrapS = yt.RepeatWrapping,
                o.wrapT = yt.RepeatWrapping,
                o.repeat.set(t.depth / t.blockMaterial.block.texture.depth2.x, i / t.blockMaterial.block.texture.depth2.y),
                o.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.depth2.y / t.getBlockSum()),
                o.anisotropy = t.instance.details.anisotropy) : o = s,
                t.blockMaterial.block.texture.depth3 && t.config.size.width % 2 === 1 && ((s = t.getPoleTextures().depth3.clone()).needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set(t.depth / t.blockMaterial.block.texture.depth3.x, i / t.blockMaterial.block.texture.depth3.y),
                s.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.depth3.y / t.getBlockSum()),
                s.anisotropy = t.instance.details.anisotropy);
                var l = [new yt.MeshBasicMaterial({
                    color: 7829367
                }), !1, new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: e,
                    aoMap: e
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: o,
                    aoMap: o
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {}))]
                  , r = new ka(t.width,i,t.depth);
                return {
                    material: l,
                    geometry: r
                }
            }
            ,
            this.doPoleTypeCorner = function() {
                var e, a = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = t.getPoleTextures().width1.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set(t.width / t.blockMaterial.block.texture.width1.x, t.height / t.blockMaterial.block.texture.width1.y),
                i.offset.x = t.offset / t.blockMaterial.block.texture.width1.x,
                i.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.width1.y / t.getBlockSum()),
                i.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.width2 ? ((e = t.getPoleTextures().width2.clone()).needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set(t.width / t.blockMaterial.block.texture.width2.x, t.height / t.blockMaterial.block.texture.width2.y),
                e.offset.x = t.offset / t.blockMaterial.block.texture.width2.x,
                e.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.width2.y / t.getBlockSum()),
                e.anisotropy = t.instance.details.anisotropy) : e = i;
                var n, o = t.getPoleTextures().depth1.clone();
                o.needsUpdate = !0,
                o.wrapS = yt.RepeatWrapping,
                o.wrapT = yt.RepeatWrapping,
                o.repeat.set(t.depth / t.blockMaterial.block.texture.depth1.x, t.height / t.blockMaterial.block.texture.depth1.y),
                o.offset.x = (t.offset + t.width) / t.blockMaterial.block.texture.depth1.x,
                o.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.depth1.y / t.getBlockSum()),
                o.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.depth2 ? ((n = t.getPoleTextures().depth2.clone()).needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set(t.depth / t.blockMaterial.block.texture.depth2.x, t.height / t.blockMaterial.block.texture.depth2.y),
                n.offset.x = (t.offset + t.width) / t.blockMaterial.block.texture.depth2.x,
                n.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.depth2.y / t.getBlockSum()),
                n.anisotropy = t.instance.details.anisotropy) : n = o;
                var s, l = t.getPoleTextures().coupler1.clone();
                l.needsUpdate = !0,
                l.wrapS = yt.RepeatWrapping,
                l.wrapT = yt.RepeatWrapping,
                l.repeat.set(t.coupler / t.blockMaterial.block.texture.coupler1.x, t.height / t.blockMaterial.block.texture.coupler1.y),
                l.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.coupler1.y / t.getBlockSum()),
                l.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.coupler2 ? ((s = t.getPoleTextures().coupler2.clone()).needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set(t.coupler / t.blockMaterial.block.texture.coupler2.x, t.height / t.blockMaterial.block.texture.coupler2.y),
                s.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.coupler2.y / t.getBlockSum()),
                s.anisotropy = t.instance.details.anisotropy) : s = l,
                t.blockMaterial.block.texture.coupler3 && (t.config.size.width + t.config.size.depth) % 2 === 1 && ((s = t.getPoleTextures().coupler3.clone()).needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set(t.coupler / t.blockMaterial.block.texture.coupler3.x, t.height / t.blockMaterial.block.texture.coupler3.y),
                s.offset.y = t.seating / t.seatingMaterialHeight / (t.blockMaterial.block.texture.coupler3.y / t.getBlockSum()),
                s.anisotropy = t.instance.details.anisotropy);
                var r = [new yt.MeshBasicMaterial({
                    color: 7829367
                }), new yt.MeshBasicMaterial({
                    color: 7829367
                }), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, 2 === a ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: e,
                    aoMap: e
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: o,
                    aoMap: o
                }, 1 === a ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: l,
                    aoMap: l
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {})), !1, !1]
                  , c = new xa(t.width,t.coupler,t.depth,t.coupler,t.height,t.angle);
                return {
                    material: r,
                    geometry: c
                }
            }
            ,
            this.doPeak = function() {
                var e;
                switch (t.blockMaterial.block.type) {
                case "cuboid":
                    e = t.doPeakTypeCuboid();
                    break;
                case "corner":
                    e = t.doPeakTypeCorner()
                }
                e && (t.objects.peak ? (t.objects.peak.geometry = e.geometry,
                t.objects.peak.material = e.material) : (t.objects.peak = new yt.Mesh(e.geometry,e.material),
                t.objects.peak.castShadow = !0,
                t.three.scenes["3d"].add(t.objects.peak),
                t.eventsPeak(t.objects.peak)),
                t.objects.peak.position.set(t.position.x, t.calcPeakPositionY(), t.position.z),
                t.objects.peak.rotation.y = t.rotation,
                t.objects.peak.visible = !t.config.virtual)
            }
            ,
            this.doPeakTypeCuboid = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                switch (t.peakMaterial.type) {
                case "peak4":
                    return t.doPeakTypeCuboidPeak4(e);
                case "peak2":
                    return t.doPeakTypeCuboidPeak2(e);
                case "flat4":
                    return t.doPeakTypeCuboidFlat4(e);
                case "flat2":
                    return t.doPeakTypeCuboidFlat2(e)
                }
                return !1
            }
            ,
            this.doPeakTypeCuboidPeak4 = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
                  , a = t.getPeakTextures().universal.clone();
                a.needsUpdate = !0,
                a.wrapS = yt.RepeatWrapping,
                a.wrapT = yt.RepeatWrapping,
                a.repeat.set(t.peakMaterial.width / t.peakMaterial.texture.universal.x, (t.peakMaterial.depth - t.peakMaterial.tip.depth) / 2 / t.peakMaterial.texture.universal.y),
                a.anisotropy = t.instance.details.anisotropy;
                var i = t.getPeakTextures().universal.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.universal.x, (t.peakMaterial.width - t.peakMaterial.tip.width) / 2 / t.peakMaterial.texture.universal.y),
                i.anisotropy = t.instance.details.anisotropy;
                var n = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .07
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .07
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .07
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .07
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                }, !1 !== e ? t.instance.params.hidden : {}))]
                  , o = new ja(t.peakMaterial.width,t.peakMaterial.depth,t.peakMaterial.tip.width,t.peakMaterial.tip.depth,t.peakMaterial.tip.height,t.peakMaterial.height);
                return {
                    material: n,
                    geometry: o
                }
            }
            ,
            this.doPeakTypeCuboidPeak2 = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
                  , a = t.getPeakTextures().universal.clone();
                a.needsUpdate = !0,
                a.wrapS = yt.RepeatWrapping,
                a.wrapT = yt.RepeatWrapping,
                a.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.universal.x, t.peakMaterial.height / t.peakMaterial.texture.universal.y),
                a.anisotropy = t.instance.details.anisotropy;
                var i = t.getPeakTextures().universal.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.universal.x, t.peakMaterial.depth / 2 / t.peakMaterial.texture.universal.y),
                i.anisotropy = t.instance.details.anisotropy;
                var n = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                }, !1 !== e ? t.instance.params.hidden : {}))]
                  , o = new za(t.width + 2 * t.peakMaterial.protrude,t.peakMaterial.depth,t.peakMaterial.tip.depth,t.peakMaterial.tip.height,t.peakMaterial.height);
                return {
                    material: n,
                    geometry: o
                }
            }
            ,
            this.doPeakTypeCuboidFlat4 = function() {
                var e, a = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = t.getPeakTextures().width1.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set(t.peakMaterial.width / t.peakMaterial.texture.width1.x, t.peakMaterial.height / t.peakMaterial.texture.width1.y),
                i.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.width2 ? ((e = t.getPeakTextures().width2.clone()).needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set(t.peakMaterial.width / t.peakMaterial.texture.width2.x, t.peakMaterial.height / t.peakMaterial.texture.width2.y),
                e.anisotropy = t.instance.details.anisotropy) : e = i;
                var n, o = t.getPeakTextures().depth1.clone();
                o.needsUpdate = !0,
                o.wrapS = yt.RepeatWrapping,
                o.wrapT = yt.RepeatWrapping,
                o.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth1.x, t.peakMaterial.height / t.peakMaterial.texture.depth1.y),
                o.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.depth2 ? ((n = t.getPeakTextures().depth2.clone()).needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth2.x, t.peakMaterial.height / t.peakMaterial.texture.depth2.y),
                n.anisotropy = t.instance.details.anisotropy) : n = o;
                var s = t.getPeakTextures().top.clone();
                s.needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set(t.peakMaterial.width / t.peakMaterial.texture.top.x, t.peakMaterial.depth / t.peakMaterial.texture.top.y),
                s.anisotropy = t.instance.details.anisotropy;
                var l = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: e,
                    aoMap: e
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: o,
                    aoMap: o
                }, !1 !== a ? t.instance.params.hidden : {}))]
                  , r = new ka(t.peakMaterial.width,t.peakMaterial.height,t.peakMaterial.depth);
                return {
                    material: l,
                    geometry: r
                }
            }
            ,
            this.doPeakTypeCuboidFlat2 = function() {
                var e, a = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = t.getPeakTextures().width1.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width1.x, t.peakMaterial.height / t.peakMaterial.texture.width1.y),
                i.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.width2 ? ((e = t.getPeakTextures().width2.clone()).needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width2.x, t.peakMaterial.height / t.peakMaterial.texture.width2.y),
                e.anisotropy = t.instance.details.anisotropy) : e = i;
                var n, o = t.getPeakTextures().depth1.clone();
                o.needsUpdate = !0,
                o.wrapS = yt.RepeatWrapping,
                o.wrapT = yt.RepeatWrapping,
                o.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth1.x, t.peakMaterial.height / t.peakMaterial.texture.depth1.y),
                o.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.depth2 ? ((n = t.getPeakTextures().depth2.clone()).needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth2.x, t.peakMaterial.height / t.peakMaterial.texture.depth2.y),
                n.anisotropy = t.instance.details.anisotropy) : n = o;
                var s = t.getPeakTextures().top.clone();
                s.needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.top.x, t.peakMaterial.depth / t.peakMaterial.texture.top.y),
                s.anisotropy = t.instance.details.anisotropy;
                var l = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: e,
                    aoMap: e
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: o,
                    aoMap: o
                }, !1 !== a ? t.instance.params.hidden : {}))]
                  , r = new ka(t.width + 2 * t.peakMaterial.protrude,t.peakMaterial.height,t.peakMaterial.depth);
                return {
                    material: l,
                    geometry: r
                }
            }
            ,
            this.doPeakTypeCorner = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                switch (t.peakMaterial.type) {
                case "peak2":
                    return t.doPeakTypeCornerPeak(e);
                case "flat2":
                case "flat4":
                    return t.doPeakTypeCornerFlat(e)
                }
                return !1
            }
            ,
            this.doPeakTypeCornerPeak = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
                  , a = t.getPeakTextures().universal.clone();
                a.needsUpdate = !0,
                a.wrapS = yt.RepeatWrapping,
                a.wrapT = yt.RepeatWrapping,
                a.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.universal.x, t.peakMaterial.height / t.peakMaterial.texture.universal.y),
                a.anisotropy = t.instance.details.anisotropy;
                var i = t.getPeakTextures().universal.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.universal.x, t.peakMaterial.depth / 2 / t.peakMaterial.texture.universal.y),
                i.anisotropy = t.instance.details.anisotropy;
                var n = t.getPeakTextures().universal.clone();
                n.needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set((t.depth + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.universal.x, t.peakMaterial.depth / 2 / t.peakMaterial.texture.universal.y),
                n.anisotropy = t.instance.details.anisotropy;
                var o = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n,
                    aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, 2 === e ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, 1 === e ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, 2 === e ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, 1 === e ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: a,
                    aoMap: a
                }, !1 !== e ? t.instance.params.hidden : {}))]
                  , s = new Ma(t.width + 2 * t.peakMaterial.protrude,t.peakMaterial.depth,t.depth + 2 * t.peakMaterial.protrude,t.peakMaterial.depth,t.peakMaterial.height,t.peakMaterial.tip.depth,t.peakMaterial.tip.depth,t.peakMaterial.tip.height,t.angle);
                return {
                    material: o,
                    geometry: s
                }
            }
            ,
            this.doPeakTypeCornerFlat = function() {
                var e, a = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i = t.getPeakTextures().width1.clone();
                i.needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width1.x, t.peakMaterial.height / t.peakMaterial.texture.width1.y),
                i.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.width2 ? ((e = t.getPeakTextures().width2.clone()).needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width2.x, t.peakMaterial.height / t.peakMaterial.texture.width2.y),
                e.anisotropy = t.instance.details.anisotropy) : e = i;
                var n, o = t.getPeakTextures().width1.clone();
                o.needsUpdate = !0,
                o.wrapS = yt.RepeatWrapping,
                o.wrapT = yt.RepeatWrapping,
                o.repeat.set((t.depth + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width1.x, t.peakMaterial.height / t.peakMaterial.texture.width1.y),
                o.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.width2 ? ((n = t.getPeakTextures().width2.clone()).needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set((t.depth + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width2.x, t.peakMaterial.height / t.peakMaterial.texture.width2.y),
                n.anisotropy = t.instance.details.anisotropy) : n = o;
                var s, l = t.getPeakTextures().depth1.clone();
                l.needsUpdate = !0,
                l.wrapS = yt.RepeatWrapping,
                l.wrapT = yt.RepeatWrapping,
                l.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth1.x, t.peakMaterial.height / t.peakMaterial.texture.depth1.y),
                l.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.depth2 ? ((s = t.getPeakTextures().depth2.clone()).needsUpdate = !0,
                s.wrapS = yt.RepeatWrapping,
                s.wrapT = yt.RepeatWrapping,
                s.repeat.set((t.depth + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.width2.x, t.peakMaterial.height / t.peakMaterial.texture.width2.y),
                s.anisotropy = t.instance.details.anisotropy) : s = l;
                var r = t.getPeakTextures().top.clone();
                r.needsUpdate = !0,
                r.wrapS = yt.RepeatWrapping,
                r.wrapT = yt.RepeatWrapping,
                r.repeat.set((t.width + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.top.x, t.peakMaterial.depth / t.peakMaterial.texture.top.y),
                r.anisotropy = t.instance.details.anisotropy;
                var c = t.getPeakTextures().top.clone();
                c.needsUpdate = !0,
                c.wrapS = yt.RepeatWrapping,
                c.wrapT = yt.RepeatWrapping,
                c.repeat.set((t.depth + 2 * t.peakMaterial.protrude) / t.peakMaterial.texture.top.x, t.peakMaterial.depth / t.peakMaterial.texture.top.y),
                c.anisotropy = t.instance.details.anisotropy;
                var p = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: r,
                    aoMap: r
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: c,
                    aoMap: c
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: i,
                    aoMap: i
                }, 2 === a ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: e,
                    aoMap: e
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: o,
                    aoMap: o
                }, 1 === a ? t.instance.params.disabled : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: l,
                    aoMap: l
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: s,
                    aoMap: s
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: r,
                    aoMap: r
                }, !1 !== a ? t.instance.params.hidden : {})), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: c,
                    aoMap: c
                }, !1 !== a ? t.instance.params.hidden : {}))]
                  , d = new xa(t.width + 2 * t.peakMaterial.protrude,t.peakMaterial.depth,t.depth + 2 * t.peakMaterial.protrude,t.peakMaterial.depth,t.peakMaterial.height,t.angle);
                return {
                    material: p,
                    geometry: d
                }
            }
            ,
            this.doHighlight2d = function() {
                var e;
                if (t.config.virtual)
                    e = t.doHighlightVirtual();
                else
                    switch (t.blockMaterial.block.type) {
                    case "cuboid":
                        e = t.doHighlightTypeCuboid();
                        break;
                    case "corner":
                        e = t.doHighlightTypeCorner()
                    }
                e && (t.objects.highlight2d ? (t.objects.highlight2d.geometry = e.geometry,
                t.objects.highlight2d.material = e.material) : (t.objects.highlight2d = new yt.Mesh(e.geometry,e.material),
                t.objects.highlight2d.visible = !1,
                t.three.scenes["2d"].add(t.objects.highlight2d)),
                t.objects.highlight2d.position.set(t.position.x, t.instance.dpsi(0, 1), t.position.z),
                t.objects.highlight2d.rotation.y = t.rotation)
            }
            ,
            this.doHighlight3d = function() {
                var e;
                if (t.config.virtual)
                    e = t.doHighlightVirtual();
                else
                    switch (t.blockMaterial.block.type) {
                    case "cuboid":
                        e = t.doHighlightTypeCuboid();
                        break;
                    case "corner":
                        e = t.doHighlightTypeCorner()
                    }
                e && (t.objects.highlight3d ? (t.objects.highlight3d.geometry = e.geometry,
                t.objects.highlight3d.material = e.material) : (t.objects.highlight3d = new yt.Mesh(e.geometry,e.material),
                t.objects.highlight3d.visible = !1,
                t.three.scenes["3d"].add(t.objects.highlight3d)),
                t.objects.highlight3d.position.set(t.position.x, t.instance.dpsi(0, 1), t.position.z),
                t.objects.highlight3d.rotation.y = t.rotation)
            }
            ,
            this.doHighlightVirtual = function() {
                return {
                    material: [!1, new yt.MeshBasicMaterial({
                        color: t.highlightColor,
                        opacity: t.highlightOpacity,
                        transparent: 1
                    }), !1, !1, !1, !1],
                    geometry: new ka(t.virtualSize + t.highlightSize / 2,.001,t.virtualSize + t.highlightSize / 2)
                }
            }
            ,
            this.doHighlightTypeCuboid = function() {
                return {
                    material: [!1, new yt.MeshBasicMaterial({
                        color: t.highlightColor,
                        opacity: t.highlightOpacity,
                        transparent: 1
                    }), !1, !1, !1, !1],
                    geometry: new ka(t.width + t.highlightSize,.001,t.depth + t.highlightSize)
                }
            }
            ,
            this.doHighlightTypeCorner = function() {
                var e, a, i = Ot.Corner(t.width + t.highlightSize, t.coupler + t.highlightSize, t.depth + t.highlightSize, t.coupler + t.highlightSize, t.angle);
                return Mt.getDistance(i.c, i.d) < t.width + t.highlightSize && Mt.getDistance(i.c, i.d) < t.depth + t.highlightSize ? (e = [!1, !1, !1, !1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                    color: t.highlightColor,
                    opacity: t.highlightOpacity,
                    transparent: 1
                }), new yt.MeshBasicMaterial({
                    color: t.highlightColor,
                    opacity: t.highlightOpacity,
                    transparent: 1
                })],
                a = new xa(t.width + t.highlightSize,t.coupler + t.highlightSize,t.depth + t.highlightSize,t.coupler + t.highlightSize,.001,t.angle)) : (e = [!1, new yt.MeshBasicMaterial({
                    color: t.highlightColor,
                    opacity: t.highlightOpacity,
                    transparent: 1
                }), !1, !1, !1, !1],
                a = new ka(t.width + t.highlightSize,.001,t.depth + t.highlightSize)),
                {
                    material: e,
                    geometry: a
                }
            }
            ,
            this.eventsSketch = function(e) {
                t.instance.editMode() && (e.drag = new _t.a([e],{
                    moveable: !0
                },t.three.cameras["2d"],t.three.render.domElement),
                ["click", "touchend"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function() {
                        t.instance.extensions.dimensions.addPoleToDimension(t.id),
                        t.instance.extensions.average.addPoleToAverage(t.id),
                        t.displayOptions()
                    }
                    ))
                }
                )),
                ["dragstart"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function() {
                        t.three.camera.controls.enabled = !1,
                        t.displayOptions()
                    }
                    ))
                }
                )),
                ["drag"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function(e) {
                        var a;
                        t.instance.isMoving = !0,
                        t.move(e.object, null === (a = e.event) || void 0 === a ? void 0 : a.ctrlKey)
                    }
                    ))
                }
                )),
                ["dragend"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function(e) {
                        t.three.camera.controls.enabled = !0,
                        t.instance.isMoving = !1,
                        t.moved(e.object),
                        t.displayOptions(),
                        t.instance.dragging = Date.now()
                    }
                    ))
                }
                )))
            }
            ,
            this.eventsPole = function(e) {
                t.instance.debug && ["rightdown", "rightup"].forEach((function(a) {
                    return e.on(a, (function() {
                        P.values(e.material).forEach((function(e) {
                            e && (e.aoMapIntensity = "rightdown" === a ? t.instance.params.texture.aoMapIntensity - .3 : t.instance.params.texture.aoMapIntensity)
                        }
                        ))
                    }
                    ))
                }
                )),
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
            ,
            this.eventsPeak = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        ))
          , Ea = Object(r.a)((function e(t, a, i) {
            Object(l.a)(this, e);
            var n = new yt.Geometry;
            return n.vertices = [new yt.Vector3(-t / 2 + i / 2,-a / 2,0), new yt.Vector3(-t / 2 + i / 2,a / 2,0), new yt.Vector3(t / 2 - i / 2,a / 2,0), new yt.Vector3(t / 2 - i / 2,-a / 2,0), new yt.Vector3(-t / 2 + i / 2,-i / 2,0), new yt.Vector3(-t / 2 + i / 2,i / 2,0), new yt.Vector3(t / 2 - i / 2,i / 2,0), new yt.Vector3(t / 2 - i / 2,-i / 2,0), new yt.Vector3(-t / 2,0,0), new yt.Vector3(t / 2,0,0)],
            n.faces = [new yt.Face3(1,0,3), new yt.Face3(1,3,2), new yt.Face3(8,4,5), new yt.Face3(6,7,9)],
            n.faces[0].materialIndex = 0,
            n.faces[1].materialIndex = 0,
            n
        }
        ))
          , _a = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.setStatus = function() {
                if (!1 !== i.instance.technical.rotation.value && !i.target.config.virtual)
                    switch (i.target.blockMaterial.block.type) {
                    case "cuboid":
                        if (i.instance.isTolerance(i.target.rotation, i.instance.technical.rotation.value, i.instance.technical.rotation.tolerance) && i.instance.isTolerance(Mt.pointsInLine({
                            x: i.target.position.x,
                            y: i.target.position.z
                        }, {
                            x: i.instance.technical.position.value.x,
                            y: i.instance.technical.position.value.z
                        }, {
                            x: i.instance.technical.position.value.rx,
                            y: i.instance.technical.position.value.rz
                        }, !0), 0, i.instance.technical.position.tolerance))
                            return 1;
                        break;
                    case "corner":
                        if (i.instance.isTolerance(i.target.rotation, i.instance.technical.rotation.value, i.instance.technical.rotation.tolerance) && i.instance.isTolerance(Mt.pointsInLine({
                            x: i.target.position.x,
                            y: i.target.position.z
                        }, {
                            x: i.instance.technical.position.value.x,
                            y: i.instance.technical.position.value.z
                        }, {
                            x: i.instance.technical.position.value.rx,
                            y: i.instance.technical.position.value.rz
                        }, !0), 0, i.instance.technical.position.tolerance))
                            return 1;
                        if (i.instance.isTolerance(i.target.rotation - Mt.degreesToRotation(i.target.calcAngle()), i.instance.technical.rotation.value, i.instance.technical.rotation.tolerance) && i.instance.isTolerance(Mt.pointsInLine({
                            x: i.target.position.x,
                            y: i.target.position.z
                        }, {
                            x: i.instance.technical.position.value.x,
                            y: i.instance.technical.position.value.z
                        }, {
                            x: i.instance.technical.position.value.rx,
                            y: i.instance.technical.position.value.rz
                        }, !0), 0, i.instance.technical.position.tolerance))
                            return 2
                    }
                return 0
            }
            ,
            this.setData = function() {
                var e, t = i.target.width, a = i.target.height + i.target.seating + i.target.peakMaterial.height + He.aN(null === (e = i.target.peakMaterial.tip) || void 0 === e ? void 0 : e.height), n = i.target.rotation, o = {
                    x: i.target.position.x,
                    y: 0,
                    z: i.target.position.z
                }, s = {
                    x: 0,
                    y: 0,
                    z: 0
                }, l = 0;
                switch (i.target.blockMaterial.block.type) {
                case "corner":
                    1 === i.status && (l -= i.target.width / 2 + i.target.points.r.x),
                    2 === i.status && (t = i.target.depth,
                    n -= Mt.degreesToRotation(i.target.calcAngle()),
                    l += i.target.depth / 2 + i.target.points.r.x);
                    var r = Mt.rotatePoint({
                        x: l,
                        z: 0
                    }, n);
                    o.x += r.x,
                    o.z += r.z
                }
                var c = Mt.rotatePoint({
                    x: 0,
                    z: -(i.target.getBlockDepth() + 1)
                }, n);
                return s.x = o.x + c.x,
                s.y = o.y + a / 2,
                s.z = o.z + c.z,
                {
                    width: t,
                    height: a,
                    rotation: n,
                    position: o,
                    center: s
                }
            }
            ,
            this.do = function() {
                i.instance.window && "none" !== i.instance.window && (i.doPole(),
                i.doPeak(),
                i.doDimensionWidthShape(),
                i.doDimensionWidthDescription(),
                i.doDimensionHeightShape(),
                i.doDimensionHeightDescription())
            }
            ,
            this.update = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                !1 !== e && (i.status = i.target.config.virtual ? 0 : e),
                i.data = i.setData(),
                i.do()
            }
            ,
            this.remove = function() {
                i.three.scenes["2d"].remove(i.objects.pole),
                i.three.scenes["2d"].remove(i.objects.peak),
                i.three.scenes["2d"].remove(i.objects.dimension.width.shape),
                i.three.scenes["2d"].remove(i.objects.dimension.width.description),
                i.three.scenes["2d"].remove(i.objects.dimension.height.shape),
                i.three.scenes["2d"].remove(i.objects.dimension.height.description)
            }
            ,
            this.doPole = function() {
                var e;
                switch (i.target.blockMaterial.block.type) {
                case "cuboid":
                    e = i.target.doPoleTypeCuboid(i.status);
                    break;
                case "corner":
                    e = i.target.doPoleTypeCorner(i.status)
                }
                e && (i.objects.pole ? (i.objects.pole.geometry = e.geometry,
                i.objects.pole.material = e.material) : (i.objects.pole = new yt.Mesh(e.geometry,e.material),
                i.three.scenes["2d"].add(i.objects.pole)),
                i.objects.pole.position.set(i.target.position.x, i.target.calcPolePositionY() + i.start, i.target.position.z),
                i.objects.pole.rotation.y = i.target.rotation,
                i.objects.pole.visible = !!i.status)
            }
            ,
            this.doPeak = function() {
                var e;
                switch (i.target.blockMaterial.block.type) {
                case "cuboid":
                    e = i.target.doPeakTypeCuboid(i.status);
                    break;
                case "corner":
                    e = i.target.doPeakTypeCorner(i.status)
                }
                e && (i.objects.peak ? (i.objects.peak.geometry = e.geometry,
                i.objects.peak.material = e.material) : (i.objects.peak = new yt.Mesh(e.geometry,e.material),
                i.three.scenes["2d"].add(i.objects.peak)),
                i.objects.peak.position.set(i.target.position.x, i.target.calcPeakPositionY() + i.start, i.target.position.z),
                i.objects.peak.rotation.y = i.target.rotation,
                i.objects.peak.visible = !!i.status)
            }
            ,
            this.doDimensionWidthShape = function() {
                var e = [new yt.MeshBasicMaterial({
                    color: i.instance.params.dimension.color
                })]
                  , t = new Ea(i.data.width,i.instance.params.dimension.depth,i.instance.params.dimension.arrows);
                i.objects.dimension.width.shape ? (i.objects.dimension.width.shape.geometry = t,
                i.objects.dimension.width.shape.material = e) : (i.objects.dimension.width.shape = new yt.Mesh(t,e),
                i.three.scenes["2d"].add(i.objects.dimension.width.shape)),
                i.objects.dimension.width.shape.position.set(i.data.position.x, i.data.position.y + i.start - i.instance.params.dimension.distance.technical, i.data.position.z),
                i.objects.dimension.width.shape.rotation.y = i.data.rotation,
                i.objects.dimension.width.shape.visible = !!i.status
            }
            ,
            this.doDimensionWidthDescription = function() {
                i.objects.dimension.width.description || (i.objects.dimension.width.description = new Qt.a({
                    fontWeight: i.instance.font.weight,
                    fontSize: .16,
                    fontFamily: i.instance.font.family,
                    fillStyle: i.instance.font.color
                }),
                i.three.scenes["2d"].add(i.objects.dimension.width.description)),
                i.objects.dimension.width.description.material.map.text = He.numberFormat(i.data.width, 2),
                i.objects.dimension.width.description.position.set(i.data.position.x, i.data.position.y + i.start - i.instance.params.dimension.distance.technical - 2 * i.instance.params.dimension.arrows, i.data.position.z),
                i.objects.dimension.width.description.visible = !!i.status
            }
            ,
            this.doDimensionHeightShape = function() {
                var e = [new yt.MeshBasicMaterial({
                    color: i.instance.params.dimension.color
                })]
                  , t = new Ea(i.data.height,i.instance.params.dimension.depth,i.instance.params.dimension.arrows);
                i.objects.dimension.height.shape ? (i.objects.dimension.height.shape.geometry = t,
                i.objects.dimension.height.shape.material = e) : (i.objects.dimension.height.shape = new yt.Mesh(t,e),
                i.three.scenes["2d"].add(i.objects.dimension.height.shape)),
                i.objects.dimension.height.shape.position.set(i.data.center.x, i.data.center.y + i.start, i.data.center.z),
                i.objects.dimension.height.shape.rotation.y = i.data.rotation,
                i.objects.dimension.height.shape.rotation.z = Math.PI / 2,
                i.objects.dimension.height.shape.visible = !!i.status
            }
            ,
            this.doDimensionHeightDescription = function() {
                i.objects.dimension.height.description || (i.objects.dimension.height.description = new Qt.a({
                    fontWeight: i.instance.font.weight,
                    fontSize: .16,
                    fontFamily: i.instance.font.family,
                    fillStyle: "#ffffff",
                    strokeColor: "#000000",
                    strokeWidth: .2
                }),
                i.three.scenes["2d"].add(i.objects.dimension.height.description)),
                i.objects.dimension.height.description.material.map.text = He.numberFormat(i.data.height, 2),
                i.objects.dimension.height.description.position.set(i.data.center.x, i.data.center.y + i.start, i.data.center.z),
                i.objects.dimension.height.description.visible = !!i.status
            }
            ,
            this.instance = t,
            this.three = t.threeHelper,
            this.start = -.5,
            this.objects = {
                pole: null,
                peak: null,
                dimension: {
                    width: {
                        shape: null,
                        description: null
                    },
                    height: {
                        shape: null,
                        description: null
                    }
                }
            },
            this.target = a,
            this.status = 0,
            this.data = this.setData(),
            this.do()
        }
        ))
          , Sa = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.blockMaterial = function(e) {
                i.target.setBlockMaterialId(e),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.kind = function(e) {
                i.target.setKind(e),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.heightPlus = function() {
                i.target.resizeHeight(i.target.config.size.height + 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.heightMinus = function() {
                i.target.resizeHeight(i.target.config.size.height - 1),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.combo = function(e) {
                i.target.config.combo = e,
                i.target.combo.update(),
                i.target.fencing.update(),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.fencing = function(e) {
                i.target.config.fencing = e,
                i.target.combo.update(),
                i.target.fencing.update(),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.fencingHeight = function(e) {
                i.target.config.fencingHeight = e,
                i.target.fencing.update(),
                i.target.displayOptions(),
                i.instance.setModified()
            }
            ,
            this.remove = function() {
                ot(W("Usun\u0105\u0107 ?"), (function() {
                    i.target.setKind("space"),
                    i.target.displayOptions(),
                    i.instance.setModified()
                }
                ))
            }
            ,
            this.instance = t,
            this.target = a
        }
        ))
          , Pa = Object(r.a)((function e(t, a, i, n, o, s, r) {
            var c = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : {
                a: 0,
                b: 0,
                c: 0,
                d: 0
            };
            Object(l.a)(this, e);
            var p = new yt.Geometry;
            p.points = Ot.ParallelogramCut(t, i, n, o, s, r, c),
            p.vertices = [new yt.Vector3(p.points.a.x,0,p.points.a.y), new yt.Vector3(p.points.b.x,0,p.points.b.y), new yt.Vector3(p.points.c.x,0,p.points.c.y), new yt.Vector3(p.points.d.x,0,p.points.d.y), new yt.Vector3(p.points.a.x,a,p.points.a.y), new yt.Vector3(p.points.b.x,a,p.points.b.y), new yt.Vector3(p.points.c.x,a,p.points.c.y), new yt.Vector3(p.points.d.x,a,p.points.d.y)],
            p.faces = [new yt.Face3(1,0,3), new yt.Face3(1,3,2), new yt.Face3(1,6,5), new yt.Face3(1,2,6), new yt.Face3(0,4,7), new yt.Face3(0,7,3), new yt.Face3(0,5,4), new yt.Face3(0,1,5), new yt.Face3(3,7,6), new yt.Face3(3,6,2), new yt.Face3(5,7,4), new yt.Face3(5,6,7)],
            p.faces[0].materialIndex = 0,
            p.faces[1].materialIndex = 0,
            p.faces[2].materialIndex = 1,
            p.faces[3].materialIndex = 1,
            p.faces[4].materialIndex = 2,
            p.faces[5].materialIndex = 2,
            p.faces[6].materialIndex = 3,
            p.faces[7].materialIndex = 3,
            p.faces[8].materialIndex = 4,
            p.faces[9].materialIndex = 4,
            p.faces[10].materialIndex = 5,
            p.faces[11].materialIndex = 5;
            var d = [];
            return d.push(new yt.Vector2(0,0)),
            d.push(new yt.Vector2(1,0)),
            d.push(new yt.Vector2(1,1)),
            d.push(new yt.Vector2(0,1)),
            p.faceVertexUvs[0] = [[new yt.Vector2(p.points.ib / t,0), new yt.Vector2(p.points.ia / t,1), new yt.Vector2(1 - p.points.id / t,1)], [new yt.Vector2(p.points.ib / t,0), new yt.Vector2(1 - p.points.id / t,1), new yt.Vector2(1 - p.points.ic / t,0)], [new yt.Vector2(p.points.ib / t,0), new yt.Vector2(1 - p.points.ic / t,1), new yt.Vector2(p.points.ib / t,1)], [new yt.Vector2(p.points.ib / t,0), new yt.Vector2(1 - p.points.ic / t,0), new yt.Vector2(1 - p.points.ic / t,1)], [new yt.Vector2(p.points.ia / t,0), new yt.Vector2(p.points.ia / t,1), new yt.Vector2(1 - p.points.id / t,1)], [new yt.Vector2(p.points.ia / t,0), new yt.Vector2(1 - p.points.id / t,1), new yt.Vector2(1 - p.points.id / t,0)], [d[0], d[2], d[3]], [d[0], d[1], d[2]], [d[0], d[3], d[2]], [d[0], d[2], d[1]], [new yt.Vector2(p.points.ib / t,0), new yt.Vector2(1 - p.points.id / t,1), new yt.Vector2(p.points.ia / t,1)], [new yt.Vector2(p.points.ib / t,0), new yt.Vector2(1 - p.points.ic / t,0), new yt.Vector2(1 - p.points.id / t,1)]],
            p.computeFaceNormals(),
            p
        }
        ))
          , Ca = Object(r.a)((function e(t, a, i, n, o, s, r) {
            Object(l.a)(this, e);
            var c = new yt.Geometry;
            c.points = Ot.PeakParallelogram(t, i, o, s, r),
            c.vertices = [new yt.Vector3(c.points.a.x,0,c.points.a.y), new yt.Vector3(c.points.b.x,0,c.points.b.y), new yt.Vector3(c.points.c.x,0,c.points.c.y), new yt.Vector3(c.points.d.x,0,c.points.d.y), new yt.Vector3(c.points.a.x,a,c.points.a.y), new yt.Vector3(c.points.b.x,a,c.points.b.y), new yt.Vector3(c.points.c.x,a,c.points.c.y), new yt.Vector3(c.points.d.x,a,c.points.d.y), new yt.Vector3(c.points.a1.x,a + n,c.points.a1.y), new yt.Vector3(c.points.b1.x,a + n,c.points.b1.y), new yt.Vector3(c.points.c1.x,a + n,c.points.c1.y), new yt.Vector3(c.points.d1.x,a + n,c.points.d1.y)],
            c.faces = [new yt.Face3(1,0,3), new yt.Face3(1,3,2), new yt.Face3(1,6,5), new yt.Face3(1,2,6), new yt.Face3(0,4,7), new yt.Face3(0,7,3), new yt.Face3(0,5,4), new yt.Face3(0,1,5), new yt.Face3(3,7,6), new yt.Face3(3,6,2), new yt.Face3(5,10,9), new yt.Face3(5,6,10), new yt.Face3(4,8,11), new yt.Face3(4,11,7), new yt.Face3(4,9,8), new yt.Face3(4,5,9), new yt.Face3(7,11,10), new yt.Face3(7,10,6), new yt.Face3(9,11,8), new yt.Face3(9,10,11)],
            c.faces[0].materialIndex = 0,
            c.faces[1].materialIndex = 0,
            c.faces[2].materialIndex = 1,
            c.faces[3].materialIndex = 1,
            c.faces[4].materialIndex = 2,
            c.faces[5].materialIndex = 2,
            c.faces[6].materialIndex = 3,
            c.faces[7].materialIndex = 3,
            c.faces[8].materialIndex = 4,
            c.faces[9].materialIndex = 4,
            c.faces[10].materialIndex = 5,
            c.faces[11].materialIndex = 5,
            c.faces[12].materialIndex = 6,
            c.faces[13].materialIndex = 6,
            c.faces[14].materialIndex = 7,
            c.faces[15].materialIndex = 7,
            c.faces[16].materialIndex = 8,
            c.faces[17].materialIndex = 8,
            c.faces[18].materialIndex = 9,
            c.faces[19].materialIndex = 9;
            var p = [];
            p.push(new yt.Vector2(0,0)),
            p.push(new yt.Vector2(1,0)),
            p.push(new yt.Vector2(1,1)),
            p.push(new yt.Vector2(0,1));
            var d = Mt.getDistance(c.points.a, c.points.b)
              , h = Mt.getDistance(c.points.a1, c.points.b1);
            return c.faceVertexUvs[0] = [[new yt.Vector2(c.points.ib / t,0), new yt.Vector2(c.points.ia / t,1), new yt.Vector2(1 - c.points.id / t,1)], [new yt.Vector2(c.points.ib / t,0), new yt.Vector2(1 - c.points.id / t,1), new yt.Vector2(1 - c.points.ic / t,0)], [new yt.Vector2(c.points.ib / t,0), new yt.Vector2(1 - c.points.ic / t,1), new yt.Vector2(c.points.ib / t,1)], [new yt.Vector2(c.points.ib / t,0), new yt.Vector2(1 - c.points.ic / t,0), new yt.Vector2(1 - c.points.ic / t,1)], [new yt.Vector2(c.points.ia / t,0), new yt.Vector2(c.points.ia / t,1), new yt.Vector2(1 - c.points.id / t,1)], [new yt.Vector2(c.points.ia / t,0), new yt.Vector2(1 - c.points.id / t,1), new yt.Vector2(1 - c.points.id / t,0)], [p[0], p[2], p[3]], [p[0], p[1], p[2]], [p[0], p[3], p[2]], [p[0], p[2], p[1]], [new yt.Vector2(c.points.ib / t,0), new yt.Vector2(1 - c.points.ic1 / t,1), new yt.Vector2(c.points.ib1 / t,1)], [new yt.Vector2(c.points.ib / t,0), new yt.Vector2(1 - c.points.ic / t,0), new yt.Vector2(1 - c.points.ic1 / t,1)], [new yt.Vector2(c.points.ia / t,0), new yt.Vector2(c.points.ia1 / t,1), new yt.Vector2(1 - c.points.id1 / t,1)], [new yt.Vector2(c.points.ia / t,0), new yt.Vector2(1 - c.points.id1 / t,1), new yt.Vector2(1 - c.points.id / t,0)], [p[0], new yt.Vector2((d - (d - h) / 2) / d,1), new yt.Vector2((d - h) / 2 / d,1)], [p[0], new yt.Vector2(1,0), new yt.Vector2((d - (d - h) / 2) / d,1)], [p[0], new yt.Vector2((d - h) / 2 / d,1), new yt.Vector2((d - (d - h) / 2) / d,1)], [p[0], new yt.Vector2((d - (d - h) / 2) / d,1), new yt.Vector2(1,0)], [new yt.Vector2(c.points.ib1 / t,0), new yt.Vector2(1 - c.points.id1 / t,1), new yt.Vector2(c.points.ia1 / t,1)], [new yt.Vector2(c.points.ib1 / t,0), new yt.Vector2(1 - c.points.ic1 / t,0), new yt.Vector2(1 - c.points.id1 / t,1)]],
            c.computeFaceNormals(),
            c
        }
        ))
          , Da = Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doSketch = function() {
                var e, a;
                if (t.error)
                    e = .04,
                    a = [!1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                        color: 16711680
                    })];
                else
                    switch (t.config.kind) {
                    case "wall":
                        e = t.depth,
                        a = [!1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                            color: t.sketchColor
                        })];
                        break;
                    case "wicket":
                    case "gate":
                        e = .04,
                        a = [!1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                            color: t.instance.colors.sketchManufacture
                        })];
                        break;
                    case "space":
                        e = .02,
                        a = [!1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                            color: t.instance.colors.sketchSpace
                        })]
                    }
                var i = new Pa(t.width + Math.abs(t.data.normal.indent1 * t.depth / 2) + Math.abs(t.data.normal.indent2 * t.depth / 2),.001,e,t.data.normal.indent1 * t.depth,t.data.normal.indent2 * t.depth,0,0);
                t.objects.sketch ? (t.objects.sketch.geometry = i,
                t.objects.sketch.material = a) : (t.objects.sketch = new yt.Mesh(i,a),
                t.three.scenes["2d"].add(t.objects.sketch),
                t.eventsSketch(t.objects.sketch)),
                t.objects.sketch.position.set(t.position.normal.x, t.instance.dpsi(1, 0), t.position.normal.z),
                t.objects.sketch.rotation.y = t.rotation.normal,
                t.objects.sketch.visible = t.status
            }
            ,
            this.doDescription = function() {
                t.doDescriptionTextSprite()
            }
            ,
            this.doDescriptionShape = function() {
                var e = new ta(t.instance.fonts.bold,"".concat(He.numberFormat(t.descriptionWallWidth, 2), " m"));
                if (t.objects.description)
                    t.objects.description.geometry = e;
                else {
                    var a = new yt.MeshBasicMaterial({
                        color: 0
                    });
                    t.objects.description = new yt.Mesh(e,a),
                    t.objects.description.rotation.x = -Math.PI / 2,
                    t.three.scenes["2d"].add(t.objects.description),
                    t.eventsDescription(t.objects.description)
                }
                t.objects.description.position.set(t.position.normal.x, t.instance.dpsi(2), t.position.normal.z - .02),
                t.objects.description.visible = t.status
            }
            ,
            this.doDescriptionTextSprite = function() {
                t.objects.description || (t.objects.description = new Qt.a({
                    fontWeight: t.instance.font.weight,
                    fontSize: t.instance.font.size,
                    fontFamily: t.instance.font.family,
                    fillStyle: t.instance.font.color
                }),
                t.three.scenes["2d"].add(t.objects.description),
                t.eventsDescription(t.objects.description)),
                t.objects.description.material.map.text = "".concat(He.numberFormat(t.descriptionWallWidth, 2), " m"),
                t.objects.description.position.set(t.position.normal.x, t.instance.dpsi(2), t.position.normal.z + .015),
                t.objects.description.visible = t.status
            }
            ,
            this.doWall = function() {
                var e = 0;
                if (t.blockMaterial.block.schedule) {
                    var a = (t.offset + t.wallWidth) / t.blockMaterial.block.width / (t.blockMaterial.block.texture.width1.x / t.blockMaterial.block.width) % 1 * t.blockMaterial.block.width * (t.blockMaterial.block.texture.width1.x / t.blockMaterial.block.width);
                    e = 1,
                    P.entries(t.blockMaterial.block.schedule).forEach((function(t) {
                        var i = Object(N.a)(t, 2)
                          , n = i[0]
                          , o = i[1];
                        a >= o && (e = parseInt(n, 10) + 2)
                    }
                    )),
                    e > 4 && (e = 1)
                }
                t.schedule = e,
                P.keys(t.objects.wall).forEach((function(e) {
                    var a;
                    ("wall" === e || "add1" === e && t.pole1 && "corner" === t.pole1.blockMaterial.block.type && t.pole1.seating || "add2" === e && t.pole2 && "corner" === t.pole2.blockMaterial.block.type && t.pole2.seating) && (a = t.doWallPart(e)),
                    a ? (t.objects.wall[e] ? (t.objects.wall[e].geometry = a.geometry,
                    t.objects.wall[e].material = a.material) : (t.objects.wall[e] = new yt.Mesh(a.geometry,a.material),
                    t.objects.wall[e].castShadow = !0,
                    t.three.scenes["3d"].add(t.objects.wall[e]),
                    t.eventsWall(t.objects.wall[e], e)),
                    t.objects.wall[e].position.set(t.position.full.x, t.position.full.y + t.data.elements[e].positionY, t.position.full.z),
                    t.objects.wall[e].rotation.y = t.rotation.full,
                    t.objects.wall[e].visible = "wall" !== e || "wall" === t.config.kind && t.status && !t.error) : t.objects.wall[e] && (t.objects.wall[e].visible = !1)
                }
                ))
            }
            ,
            this.doWallPart = function(e) {
                var a, i, n, o = t.data.elements[e].height, s = "add2" !== e ? t.offset : Math.ceil(t.width / t.blockMaterial.block.width) * t.blockMaterial.block.width - t.width, l = t.getWallTextures().width1.clone();
                l.needsUpdate = !0,
                l.wrapS = yt.RepeatWrapping,
                l.wrapT = yt.RepeatWrapping,
                l.repeat.set(t.wallWidth / t.blockMaterial.block.texture.width1.x, o / t.blockMaterial.block.texture.width1.y),
                l.offset.x = s / t.blockMaterial.block.texture.width1.x,
                l.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.width1.y / t.blockMaterial.block.height) : 0,
                l.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.width2 ? ((n = t.getWallTextures().width2.clone()).needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set(t.wallWidth / t.blockMaterial.block.texture.width2.x, o / t.blockMaterial.block.texture.width2.y),
                n.offset.x = s / t.blockMaterial.block.texture.width2.x,
                n.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.width2.y / t.blockMaterial.block.height) : 0,
                n.anisotropy = t.instance.details.anisotropy) : n = l;
                var r, c = t.getWallTextures().depth1.clone();
                c.needsUpdate = !0,
                c.wrapS = yt.RepeatWrapping,
                c.wrapT = yt.RepeatWrapping,
                c.repeat.set(t.depth / t.blockMaterial.block.texture.depth1.x, o / t.blockMaterial.block.texture.depth1.y),
                c.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.depth1.y / t.blockMaterial.block.height) : 0,
                c.anisotropy = t.instance.details.anisotropy,
                t.blockMaterial.block.texture.depth2 ? ((r = t.getWallTextures().depth2.clone()).needsUpdate = !0,
                r.wrapS = yt.RepeatWrapping,
                r.wrapT = yt.RepeatWrapping,
                r.repeat.set(t.depth / t.blockMaterial.block.texture.depth2.x, o / t.blockMaterial.block.texture.depth2.y),
                r.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.depth2.y / t.blockMaterial.block.height) : 0,
                r.anisotropy = t.instance.details.anisotropy) : r = c,
                t.blockMaterial.block.texture.depth3 && 2 === t.schedule && ((r = t.getWallTextures().depth3.clone()).needsUpdate = !0,
                r.wrapS = yt.RepeatWrapping,
                r.wrapT = yt.RepeatWrapping,
                r.repeat.set(t.depth / t.blockMaterial.block.texture.depth3.x, o / t.blockMaterial.block.texture.depth3.y),
                r.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.depth3.y / t.blockMaterial.block.height) : 0,
                r.anisotropy = t.instance.details.anisotropy),
                t.blockMaterial.block.texture.depth5 && 3 === t.schedule && ((r = t.getWallTextures().depth5.clone()).needsUpdate = !0,
                r.wrapS = yt.RepeatWrapping,
                r.wrapT = yt.RepeatWrapping,
                r.repeat.set(t.depth / t.blockMaterial.block.texture.depth5.x, o / t.blockMaterial.block.texture.depth5.y),
                r.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.depth5.y / t.blockMaterial.block.height) : 0,
                r.anisotropy = t.instance.details.anisotropy),
                t.blockMaterial.block.texture.depth7 && 4 === t.schedule && ((r = t.getWallTextures().depth7.clone()).needsUpdate = !0,
                r.wrapS = yt.RepeatWrapping,
                r.wrapT = yt.RepeatWrapping,
                r.repeat.set(t.depth / t.blockMaterial.block.texture.depth7.x, o / t.blockMaterial.block.texture.depth7.y),
                r.offset.y = "add1" === e || "add2" === e ? t.data.elements[e].sizePositionY / (t.blockMaterial.block.texture.depth7.y / t.blockMaterial.block.height) : 0,
                r.anisotropy = t.instance.details.anisotropy);
                var p = !1
                  , d = !1;
                ("wall" === e && (t.pole1.config.virtual || "corner" !== t.pole1.blockMaterial.block.type) || "add2" === e) && (p = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: c,
                    aoMap: c
                }))),
                ("wall" === e && (t.pole2.config.virtual || "corner" !== t.pole2.blockMaterial.block.type) || "add1" === e) && (d = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: r,
                    aoMap: r
                })));
                var h = t.depth;
                "add1" === e && (h = t.pole1.getBlockDepth()),
                "add2" === e && (h = t.pole2.getBlockDepth());
                var u = {
                    a: 0,
                    b: 0,
                    c: 0,
                    d: 0
                };
                (null === (a = t.pole1) || void 0 === a ? void 0 : a.points) && (t.pole1.seating && t.pole1.angle > 0 && t.pole1.angle < 90 && (u.a = -t.pole1.points.r.x),
                t.pole1.seating && t.pole1.angle < 0 && t.pole1.angle > -90 && (u.b = -t.pole1.points.r.x)),
                (null === (i = t.pole2) || void 0 === i ? void 0 : i.points) && (t.pole2.seating && t.pole2.angle < 0 && t.pole2.angle > -90 && (u.c = -t.pole2.points.r.x),
                t.pole2.seating && t.pole2.angle > 0 && t.pole2.angle < 90 && (u.d = -t.pole2.points.r.x));
                var m, g = [new yt.MeshBasicMaterial({
                    color: 7829367
                }), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: l,
                    aoMap: l
                })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                    map: n,
                    aoMap: n
                })), p, d, !1];
                if ("add1" !== e && "add2" !== e)
                    m = new Pa(t.wallWidth,o,h,t.data.full.indent1 * t.depth,t.data.full.indent2 * t.depth,t.data.elements[e].cut1,t.data.elements[e].cut2,u);
                else {
                    var f = t.data.full.indent1 * t.depth + t.data.full.indent2 * t.depth;
                    m = new Pa(t.wallWidth + f / 2,o,h,0,0,t.data.elements[e].cut1,t.data.elements[e].cut2,u)
                }
                return {
                    material: g,
                    geometry: m
                }
            }
            ,
            this.doPeak = function() {
                var e;
                switch (t.peakMaterial.type) {
                case "peak2":
                    e = t.doPeakTypePeak();
                    break;
                case "flat2":
                case "flat4":
                    e = t.doPeakTypeFlat()
                }
                e && (t.objects.peak ? (t.objects.peak.geometry = e.geometry,
                t.objects.peak.material = e.material) : (t.objects.peak = new yt.Mesh(e.geometry,e.material),
                t.objects.peak.castShadow = !0,
                t.three.scenes["3d"].add(t.objects.peak),
                t.eventsPeak(t.objects.peak)),
                t.objects.peak.position.set(t.position.normal.x, t.height, t.position.normal.z),
                t.objects.peak.rotation.y = t.rotation.normal,
                t.objects.peak.visible = "wall" === t.config.kind && t.status && !t.error)
            }
            ,
            this.doPeakTypePeak = function() {
                var e = t.getPeakTextures().universal.clone();
                e.needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.universal.x, t.peakMaterial.height / t.peakMaterial.texture.universal.y),
                e.anisotropy = t.instance.details.anisotropy;
                var a = t.getPeakTextures().universal.clone();
                return a.needsUpdate = !0,
                a.wrapS = yt.RepeatWrapping,
                a.wrapT = yt.RepeatWrapping,
                a.repeat.set(t.peakWidth / t.peakMaterial.texture.universal.x, t.peakMaterial.depth / 2 / t.peakMaterial.texture.universal.y),
                a.anisotropy = t.instance.details.anisotropy,
                {
                    material: [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a,
                        aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: e,
                        aoMap: e
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: e,
                        aoMap: e
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: e,
                        aoMap: e
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: e,
                        aoMap: e
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a,
                        aoMapIntensity: t.instance.params.texture.aoMapIntensity + .1
                    }))],
                    geometry: new Ca(t.peakWidth,t.peakMaterial.height,t.peakMaterial.depth,t.peakMaterial.tip.height,t.peakMaterial.tip.depth,t.data.normal.indent1 * t.peakMaterial.depth,t.data.normal.indent2 * t.peakMaterial.depth)
                }
            }
            ,
            this.doPeakTypeFlat = function() {
                var e, a = t.getPeakTextures().width1.clone();
                a.needsUpdate = !0,
                a.wrapS = yt.RepeatWrapping,
                a.wrapT = yt.RepeatWrapping,
                a.repeat.set(t.peakWidth / t.peakMaterial.texture.width1.x, t.peakMaterial.height / t.peakMaterial.texture.width1.y),
                a.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.width2 ? ((e = t.getPeakTextures().width2.clone()).needsUpdate = !0,
                e.wrapS = yt.RepeatWrapping,
                e.wrapT = yt.RepeatWrapping,
                e.repeat.set(t.peakWidth / t.peakMaterial.texture.width2.x, t.peakMaterial.height / t.peakMaterial.texture.width2.y),
                e.anisotropy = t.instance.details.anisotropy) : e = a;
                var i, n = t.getPeakTextures().depth1.clone();
                n.needsUpdate = !0,
                n.wrapS = yt.RepeatWrapping,
                n.wrapT = yt.RepeatWrapping,
                n.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth1.x, t.peakMaterial.height / t.peakMaterial.texture.depth1.y),
                n.anisotropy = t.instance.details.anisotropy,
                t.peakMaterial.texture.depth2 ? ((i = t.getPeakTextures().depth2.clone()).needsUpdate = !0,
                i.wrapS = yt.RepeatWrapping,
                i.wrapT = yt.RepeatWrapping,
                i.repeat.set(t.peakMaterial.depth / t.peakMaterial.texture.depth2.x, t.peakMaterial.height / t.peakMaterial.texture.depth2.y),
                i.anisotropy = t.instance.details.anisotropy) : i = n;
                var o = t.getPeakTextures().top.clone();
                return o.needsUpdate = !0,
                o.wrapS = yt.RepeatWrapping,
                o.wrapT = yt.RepeatWrapping,
                o.repeat.set(t.peakWidth / t.peakMaterial.texture.top.x, t.peakMaterial.depth / t.peakMaterial.texture.top.y),
                o.anisotropy = t.instance.details.anisotropy,
                {
                    material: [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: o,
                        aoMap: o
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: a,
                        aoMap: a
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: e,
                        aoMap: e
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: n,
                        aoMap: n
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: i,
                        aoMap: i
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.texture), {}, {
                        map: o,
                        aoMap: o
                    }))],
                    geometry: new Pa(t.peakWidth,t.peakMaterial.height,t.peakMaterial.depth,t.data.full.indent1 * t.peakMaterial.depth,t.data.full.indent2 * t.peakMaterial.depth,0,0)
                }
            }
            ,
            this.doHighlight2d = function() {
                var e = t.doHighlight();
                e && (t.objects.highlight2d ? (t.objects.highlight2d.geometry = e.geometry,
                t.objects.highlight2d.material = e.material) : (t.objects.highlight2d = new yt.Mesh(e.geometry,e.material),
                t.objects.highlight2d.visible = !1,
                t.three.scenes["2d"].add(t.objects.highlight2d)),
                t.objects.highlight2d.position.set(t.position.normal.x, t.instance.dpsi(0, 1), t.position.normal.z),
                t.objects.highlight2d.rotation.y = t.rotation.normal)
            }
            ,
            this.doHighlight3d = function() {
                var e = t.doHighlight();
                e && (t.objects.highlight3d ? (t.objects.highlight3d.geometry = e.geometry,
                t.objects.highlight3d.material = e.material) : (t.objects.highlight3d = new yt.Mesh(e.geometry,e.material),
                t.objects.highlight3d.visible = !1,
                t.three.scenes["3d"].add(t.objects.highlight3d)),
                t.objects.highlight3d.position.set(t.position.normal.x, t.instance.dpsi(0, 1), t.position.normal.z),
                t.objects.highlight3d.rotation.y = t.rotation.normal)
            }
            ,
            this.doHighlight = function() {
                return {
                    material: [!1, !1, !1, !1, !1, new yt.MeshBasicMaterial({
                        color: t.highlightColor,
                        opacity: t.highlightOpacity,
                        transparent: 1
                    })],
                    geometry: new Pa(t.width + Math.abs(t.data.normal.indent1 * (t.depth + t.highlightSize) / 2) + Math.abs(t.data.normal.indent2 * (t.depth + t.highlightSize) / 2),.001,t.depth + t.highlightSize,t.data.normal.indent1 * (t.depth + t.highlightSize),t.data.normal.indent2 * (t.depth + t.highlightSize),0,0)
                }
            }
            ,
            this.eventsSketch = function(e) {
                t.instance.editMode() && (e.drag = new _t.a([e],{
                    moveable: !1
                },t.three.cameras["2d"],t.three.render.domElement),
                ["click", "touchend"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function() {
                        t.instance.isDragging() || t.displayOptions()
                    }
                    ))
                }
                )))
            }
            ,
            this.eventsDescription = function(e) {
                t.instance.editMode() && (e.drag = new _t.a([e],{
                    moveable: !1
                },t.three.cameras["2d"],t.three.render.domElement),
                ["click", "touchend"].forEach((function(a) {
                    return e.drag.addEventListener(a, (function() {
                        t.instance.isDragging() || t.displayOptions()
                    }
                    ))
                }
                )))
            }
            ,
            this.eventsWall = function(e, a) {
                t.instance.debug && ["rightdown", "rightup"].forEach((function(a) {
                    return e.on(a, (function() {
                        P.values(e.material).forEach((function(e) {
                            e && (e.aoMapIntensity = "rightdown" === a ? t.instance.params.texture.aoMapIntensity - .3 : t.instance.params.texture.aoMapIntensity)
                        }
                        ))
                    }
                    ))
                }
                )),
                t.instance.editMode() && t.instance.editMode() && t.instance.onClick(e, (function() {
                    switch (a) {
                    case "wall":
                        t.displayOptions();
                        break;
                    case "add1":
                        t.pole1.wall.displayOptions();
                        break;
                    case "add2":
                        t.pole2.next.wall.displayOptions()
                    }
                }
                ))
            }
            ,
            this.eventsPeak = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        ))
          , Ra = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.setStatus = function() {
                if (!1 !== i.instance.technical.rotation.value && !i.target.error)
                    switch (i.target.config.kind) {
                    case "wall":
                    case "wicket":
                    case "gate":
                        if (i.instance.isTolerance(i.target.rotation.normal, i.instance.technical.rotation.value, i.instance.technical.rotation.tolerance) && i.instance.isTolerance(Mt.pointsInLine({
                            x: i.target.position.normal.x,
                            y: i.target.position.normal.z
                        }, {
                            x: i.instance.technical.position.value.x,
                            y: i.instance.technical.position.value.z
                        }, {
                            x: i.instance.technical.position.value.rx,
                            y: i.instance.technical.position.value.rz
                        }, !0), 0, i.instance.technical.position.tolerance))
                            return 1
                    }
                return 0
            }
            ,
            this.setData = function() {
                var e, t = i.target.descriptionWallWidth, a = i.target.height + i.target.peakMaterial.height + He.aN(null === (e = i.target.peakMaterial.tip) || void 0 === e ? void 0 : e.height), n = i.target.rotation.normal, o = {
                    x: i.target.position.normal.x,
                    y: 0,
                    z: i.target.position.normal.z
                }, s = {
                    x: 0,
                    y: 0,
                    z: 0
                }, l = Mt.rotatePoint({
                    x: 0,
                    z: -(i.target.depth + 1)
                }, n);
                return s.x = o.x + l.x,
                s.y = o.y + a / 2,
                s.z = o.z + l.z,
                {
                    width: t,
                    height: a,
                    rotation: n,
                    position: o,
                    center: s
                }
            }
            ,
            this.do = function() {
                i.instance.window && "none" !== i.instance.window && (i.doWall(),
                i.doPeak(),
                i.doDimensionWidthShape(),
                i.doDimensionWidthDescription(),
                i.doDimensionHeightShape(),
                i.doDimensionHeightDescription())
            }
            ,
            this.update = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                !1 !== e && (i.status = i.target.error || "space" === i.target.config.kind ? 0 : e),
                i.data = i.setData(),
                i.do()
            }
            ,
            this.remove = function() {
                i.three.scenes["2d"].remove(i.objects.wall.wall),
                i.three.scenes["2d"].remove(i.objects.wall.add1),
                i.three.scenes["2d"].remove(i.objects.wall.add2),
                i.three.scenes["2d"].remove(i.objects.peak),
                i.three.scenes["2d"].remove(i.objects.dimension.width.shape),
                i.three.scenes["2d"].remove(i.objects.dimension.width.description),
                i.three.scenes["2d"].remove(i.objects.dimension.height.shape),
                i.three.scenes["2d"].remove(i.objects.dimension.height.description)
            }
            ,
            this.doWall = function() {
                P.keys(i.objects.wall).forEach((function(e) {
                    var t = i.target.doWallPart(e);
                    t && (i.objects.wall[e] ? (i.objects.wall[e].geometry = t.geometry,
                    i.objects.wall[e].material = t.material) : (i.objects.wall[e] = new yt.Mesh(t.geometry,t.material),
                    i.three.scenes["2d"].add(i.objects.wall[e])),
                    i.objects.wall[e].position.set(i.target.position.full.x, i.target.position.full.y + i.target.data.elements[e].positionY + i.start, i.target.position.full.z),
                    i.objects.wall[e].rotation.y = i.target.rotation.full,
                    i.objects.wall[e].visible = 1 === i.status && ("wall" !== e || "wall" === i.target.config.kind && i.target.status && !i.target.error))
                }
                ))
            }
            ,
            this.doPeak = function() {
                var e;
                switch (i.target.peakMaterial.type) {
                case "peak2":
                    e = i.target.doPeakTypePeak();
                    break;
                case "flat2":
                case "flat4":
                    e = i.target.doPeakTypeFlat()
                }
                e && (i.objects.peak ? (i.objects.peak.geometry = e.geometry,
                i.objects.peak.material = e.material) : (i.objects.peak = new yt.Mesh(e.geometry,e.material),
                i.three.scenes["2d"].add(i.objects.peak)),
                i.objects.peak.position.set(i.target.position.normal.x, i.target.height + i.start, i.target.position.normal.z),
                i.objects.peak.rotation.y = i.target.rotation.normal,
                i.objects.peak.visible = 1 === i.status && "wall" === i.target.config.kind && i.target.status && !i.target.error)
            }
            ,
            this.doDimensionWidthShape = function() {
                var e = [new yt.MeshBasicMaterial({
                    color: i.instance.params.dimension.color
                })]
                  , t = new Ea(i.data.width,i.instance.params.dimension.depth,i.instance.params.dimension.arrows);
                i.objects.dimension.width.shape ? (i.objects.dimension.width.shape.geometry = t,
                i.objects.dimension.width.shape.material = e) : (i.objects.dimension.width.shape = new yt.Mesh(t,e),
                i.three.scenes["2d"].add(i.objects.dimension.width.shape)),
                i.objects.dimension.width.shape.position.set(i.data.position.x, i.data.position.y + i.start - i.instance.params.dimension.distance.technical, i.data.position.z),
                i.objects.dimension.width.shape.rotation.y = i.data.rotation,
                i.objects.dimension.width.shape.visible = !!i.status
            }
            ,
            this.doDimensionWidthDescription = function() {
                i.objects.dimension.width.description || (i.objects.dimension.width.description = new Qt.a({
                    fontWeight: i.instance.font.weight,
                    fontSize: .16,
                    fontFamily: i.instance.font.family,
                    fillStyle: i.instance.font.color
                }),
                i.three.scenes["2d"].add(i.objects.dimension.width.description)),
                i.objects.dimension.width.description.material.map.text = He.numberFormat(i.data.width, 2),
                i.objects.dimension.width.description.position.set(i.data.position.x, i.data.position.y + i.start - i.instance.params.dimension.distance.technical - 2 * i.instance.params.dimension.arrows, i.data.position.z),
                i.objects.dimension.width.description.visible = !!i.status
            }
            ,
            this.doDimensionHeightShape = function() {
                var e = [new yt.MeshBasicMaterial({
                    color: i.instance.params.dimension.color
                })]
                  , t = new Ea(i.data.height,i.instance.params.dimension.depth,i.instance.params.dimension.arrows);
                i.objects.dimension.height.shape ? (i.objects.dimension.height.shape.geometry = t,
                i.objects.dimension.height.shape.material = e) : (i.objects.dimension.height.shape = new yt.Mesh(t,e),
                i.three.scenes["2d"].add(i.objects.dimension.height.shape)),
                i.objects.dimension.height.shape.position.set(i.data.center.x, i.data.center.y + i.start, i.data.center.z),
                i.objects.dimension.height.shape.rotation.y = i.data.rotation,
                i.objects.dimension.height.shape.rotation.z = Math.PI / 2,
                i.objects.dimension.height.shape.visible = "wall" === i.target.config.kind && !!i.status
            }
            ,
            this.doDimensionHeightDescription = function() {
                i.objects.dimension.height.description || (i.objects.dimension.height.description = new Qt.a({
                    fontWeight: i.instance.font.weight,
                    fontSize: .16,
                    fontFamily: i.instance.font.family,
                    fillStyle: "#ffffff",
                    strokeColor: "#000000",
                    strokeWidth: .2
                }),
                i.three.scenes["2d"].add(i.objects.dimension.height.description)),
                i.objects.dimension.height.description.material.map.text = He.numberFormat(i.data.height, 2),
                i.objects.dimension.height.description.position.set(i.data.center.x, i.data.center.y + i.start, i.data.center.z),
                i.objects.dimension.height.description.visible = "wall" === i.target.config.kind && !!i.status
            }
            ,
            this.instance = t,
            this.three = t.threeHelper,
            this.start = -.5,
            this.objects = {
                wall: {
                    wall: null,
                    add1: null,
                    add2: null
                },
                peak: null,
                dimension: {
                    width: {
                        shape: null,
                        description: null
                    },
                    height: {
                        shape: null,
                        description: null
                    }
                }
            },
            this.target = a,
            this.status = 0,
            this.data = this.setData(),
            this.do()
        }
        ))
          , Fa = a(31)
          , Va = a(18);
        var Ia = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).getColor = function() {
                    return Fa.a.hex(i.instance.config.combo[i.instance.combo.system].colors[i.instance.combo.color].color)
                }
                ,
                i.setStatus = function() {
                    return !("off" === i.wall.config.combo || "wall" !== i.wall.config.kind || i.wall.panels.getStatus() || !i.wall.status || i.wall.error)
                }
                ,
                i.calcPosition = function() {
                    return {
                        x: i.wall.position.normal.x,
                        y: i.getWallHeight(),
                        z: i.wall.position.normal.z
                    }
                }
                ,
                i.setMaterial = function() {
                    return i.instance.combo.status && i.instance.combo.system && i.instance.combo.variant ? i.instance.config.combo[i.instance.combo.system].variants[i.instance.combo.variant] : null
                }
                ,
                i.setDestination = function() {
                    var e = !1;
                    return i.status && i.material && i.material.destinations && P.entries(i.material.destinations).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , n = a[0]
                          , o = a[1];
                        e || i.instance.isModBackward(i.wall.width, o.destination) && (e = n)
                    }
                    )),
                    e
                }
                ,
                i.calcData = function() {
                    var e;
                    return i.material && (e = Object(k.a)(Object(k.a)({}, i.material.destinations[i.destination]), {
                        elements: i.instance.config.combo[i.instance.combo.system].elements
                    })),
                    {
                        width: i.wall.width,
                        height: {
                            normal: i.getMaxHeight(),
                            full: i.getMaxHeight() + (i.wall.blocksFamily.settings.sameAlignment ? i.wall.peakMaterial.height + (i.wall.peakMaterial.tip ? i.wall.peakMaterial.tip.height : 0) : 0)
                        },
                        material: e
                    }
                }
                ,
                i.do = function() {
                    i.instance.isLoading || i.instance.isMoving || i.doEpisode()
                }
                ,
                i.update = function() {
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.destination = i.setDestination(),
                    i.data = i.calcData(),
                    i.do()
                }
                ,
                i.reload = function() {
                    i.material = i.setMaterial(),
                    i.destination = i.setDestination(),
                    i.data = i.calcData(),
                    i.do()
                }
                ,
                i.remove = function() {
                    i.three.scenes["3d"].remove(i.objects.episode)
                }
                ,
                i.displayOptions = function() {
                    ft("wall", i.wall.config, i.wall),
                    i.instance.setHighlight(i.wall)
                }
                ,
                i.getMaxHeight = function() {
                    var e = i.getMaxPolesHeight();
                    if (e > 0 && e < 1 / 0) {
                        var t = e - i.getWallHeight();
                        return t > 0 ? t : 0
                    }
                    return 0
                }
                ,
                i.getMaxPolesHeight = function() {
                    var e = i.wall.pole1.config.virtual ? 0 : i.wall.pole1.fullHeight
                      , t = i.wall.pole2.config.virtual ? 0 : i.wall.pole2.fullHeight;
                    return !e && i.wall.pole1.prev && i.wall.pole1.prev.config.polygonBreak && (e = 1 / 0),
                    !t && i.wall.pole2.config.polygonBreak && (t = 1 / 0),
                    Math.min.apply(null, [e, t])
                }
                ,
                i.getWallHeight = function() {
                    return i.wall.height + i.wall.peakMaterial.height + (i.wall.peakMaterial.tip ? i.wall.peakMaterial.tip.height : 0)
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.objects = {
                    episode: null
                },
                i.wall = a,
                i.status = i.setStatus(),
                i.position = i.calcPosition(),
                i.material = i.setMaterial(),
                i.destination = i.setDestination(),
                i.data = i.calcData(),
                i.elements = [],
                i.lock = {
                    episode: null
                },
                i.valuation = {},
                i.do(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doEpisode = function() {
                if (t.valuation = {},
                t.status && t.destination) {
                    var e = "".concat(t.instance.combo.system, "/").concat(t.instance.combo.variant);
                    if (t.lock.episode !== e)
                        t.lock.episode = e,
                        t.three.gltf.load("/assets/img/combo/".concat(e, ".gltf"), (function(e) {
                            t.objects.episode && t.three.scenes["3d"].remove(t.objects.episode),
                            t.objects.episode = e.scene,
                            t.objects.episode.traverse((function(e) {
                                e instanceof yt.Mesh && (t.elements[e.name] = e.clone())
                            }
                            )),
                            t.objects.episode.scale.set(.01, .01, .01),
                            t.three.scenes["3d"].add(t.objects.episode),
                            t.events(t.objects.episode),
                            t.doEpisode()
                        }
                        ));
                    else if (t.objects.episode) {
                        var a, i, n, o = new yt.MeshStandardMaterial({
                            color: t.getColor(),
                            metalness: 0,
                            roughness: 1
                        }), s = t.data.material.roof ? t.data.material.elements[t.data.material.roof[0]].height : 0, l = !1, r = {
                            index: 0,
                            key: 0,
                            positionStart: 0,
                            positionEnd: 0
                        }, c = {
                            index: 0,
                            key: 0,
                            positionStart: 0,
                            positionEnd: 0
                        };
                        for ((a = t.objects.episode.remove).call.apply(a, [t.objects.episode].concat(Object(Va.a)(t.objects.episode.children))); ; ) {
                            var p = !1
                              , d = 0;
                            if (n = (i = l ? t.data.material.roof : t.data.material.structure[c.key])[r.key],
                            r.positionEnd = 0,
                            c.positionEnd += t.data.material.elements[n].height,
                            c.positionEnd <= t.data.height.normal && c.positionEnd + s <= t.data.height.full || l) {
                                for (; ; ) {
                                    if (n = i[r.key],
                                    !l) {
                                        var h = 0 === d ? t.data.material.offset[c.key] : 2 * t.data.material.offset[c.key];
                                        r.positionStart + h >= t.data.material.destination * d && (r.positionStart += h,
                                        r.positionEnd += h,
                                        d++)
                                    }
                                    if (r.positionEnd += t.data.material.elements[n].width,
                                    p = "roof" === n && r.positionEnd > t.data.width,
                                    !(r.positionStart <= t.data.width - .02 && (r.positionEnd <= t.data.width + .02 || p)))
                                        break;
                                    var u = "".concat(t.instance.combo.system, "/").concat(t.data.material.elements[n].material, "/").concat(t.instance.combo.color);
                                    t.valuation[u] ? t.valuation[u].quantity++ : t.valuation[u] = {
                                        system: t.instance.combo.system,
                                        element: t.data.material.elements[n].material,
                                        color: t.instance.combo.color,
                                        quantity: 1
                                    };
                                    var m = t.elements[n].clone();
                                    if (m.material = o,
                                    m.position.x = 100 * (-t.wall.width / 2 + r.positionStart),
                                    m.position.y += 100 * c.positionStart,
                                    m.scale.x = p ? (t.data.width - r.positionStart) / t.data.material.elements[n].width : 1,
                                    t.objects.episode.add(m),
                                    p)
                                        break;
                                    r.index++,
                                    r.key = r.index % i.length,
                                    r.positionStart = r.positionEnd
                                }
                                if (r.index = 0,
                                r.key = 0,
                                r.positionStart = 0,
                                c.index++,
                                c.key = c.index % t.data.material.structure.length,
                                c.positionStart = c.positionEnd,
                                l)
                                    break
                            } else {
                                if (!s || !c.index)
                                    break;
                                l = !0
                            }
                        }
                        t.objects.episode.position.set(t.position.x, t.position.y, t.position.z),
                        t.objects.episode.rotation.y = t.wall.rotation.normal,
                        t.objects.episode.visible = t.status
                    }
                } else
                    t.objects.episode && (t.objects.episode.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        )));
        function La(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ha = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = La(this, t, [].concat(i))).bound = function(e, t, a) {
                    switch (a) {
                    case "center":
                        switch (e) {
                        case 1:
                            return -t / 2;
                        case 2:
                            return t / 2
                        }
                        break;
                    case "left":
                    case "bottom":
                        switch (e) {
                        case 1:
                            return 0;
                        case 2:
                            return t
                        }
                        break;
                    case "right":
                    case "top":
                        switch (e) {
                        case 1:
                            return -t;
                        case 2:
                            return 0
                        }
                    }
                    return 0
                }
                ,
                e.sum = function(e) {
                    var t = 0;
                    return e.forEach((function(e) {
                        t += He.aN(e)
                    }
                    )),
                    t
                }
                ,
                e.space = function(t) {
                    var a;
                    return (null === (a = e.config.customizable) || void 0 === a ? void 0 : a.space) ? e.args.custom.space : t.structure.space
                }
                ,
                e.panels = {
                    data: function(t) {
                        var a = []
                          , i = {
                            index: 0,
                            key: 0,
                            variant: !1,
                            start: 0,
                            end: 0,
                            offset: 0
                        };
                        switch (e.config.panels.mode) {
                        case "fill":
                            i.index = 0,
                            i.key = -1,
                            i.variant = {},
                            i.start = 0,
                            i.end = t,
                            i.offset = i.end,
                            a.push(Object(k.a)({}, i));
                            break;
                        case "simple":
                            for (var n = Math.floor((t + e.space(e.config.panels.variant)) / (e.config.panels.variant.structure.size + e.space(e.config.panels.variant))), o = 1; o <= n; o++)
                                i.index = o,
                                i.key = -1,
                                i.variant = e.config.panels.variant,
                                i.start = i.offset,
                                i.end = i.start + i.variant.structure.size,
                                i.offset = i.end + e.space(i.variant),
                                a.push(Object(k.a)({}, i));
                            break;
                        case "continuous":
                            for (var s = 1; s <= 1e3 && (i.index = s,
                            i.key = (i.index - 1) % P.count(e.config.panels.variant),
                            i.variant = e.config.panels.variant[i.key],
                            i.start = i.offset,
                            i.end = i.start + i.variant.structure.size,
                            i.offset = i.end + e.space(i.variant),
                            i.end <= t); s++)
                                a.push(Object(k.a)({}, i));
                            if (!1 !== e.config.panels.end)
                                for (var l = a.length - 1; l >= 0 && a[l].key !== e.config.panels.end; l--)
                                    a.splice(-1);
                            break;
                        case "first":
                        case "last":
                            for (var r = 1; r <= 1e3 && (i.index = r,
                            i.key = i.index <= e.config.panels.count ? 0 : 1,
                            i.variant = e.config.panels.variant[i.key],
                            i.start = i.offset,
                            i.end = i.start + i.variant.structure.size,
                            i.offset = i.end + e.space(i.variant),
                            i.end <= t); r++)
                                a.push(Object(k.a)({}, i));
                            if ("last" === e.config.panels.mode && a.length) {
                                var c = a[a.length - 1].end;
                                a.reverse(),
                                a.forEach((function(t, a) {
                                    t.index = a + 1,
                                    t.start = -1 * (t.end - c),
                                    t.end = t.start + t.variant.structure.size,
                                    t.offset = t.end + e.space(t.variant)
                                }
                                ))
                            }
                        }
                        return {
                            count: a.length,
                            size: a.length ? a[a.length - 1].end : 0,
                            structure: a
                        }
                    },
                    draw: function(t, a, i, n) {
                        var o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                        e.data.panels.structure.forEach((function(s) {
                            var l, r = 0, c = {
                                type: "fill",
                                unit: {
                                    x: 1.5,
                                    y: .4
                                }
                            };
                            switch (e.config.panels.material && e.config.panels.material.forEach((function(t) {
                                var a;
                                switch (t.mode) {
                                case "all":
                                    r = t.material,
                                    c.type = t.wrap,
                                    c.unit = t.unit;
                                    break;
                                case "continuous":
                                    (a = (e.data.panels.count - s.index) % (t.variant.offset + t.variant.amount)) >= t.variant.offset && a < t.variant.offset + t.variant.amount && (r = t.material,
                                    c.type = t.wrap);
                                    break;
                                case "top":
                                    (a = e.data.panels.count - s.index) >= t.variant.offset && a < t.variant.offset + t.variant.amount && (r = t.material,
                                    c.type = t.wrap);
                                    break;
                                case "bottom":
                                    (a = s.index - 1) >= t.variant.offset && a < t.variant.offset + t.variant.amount && (r = t.material,
                                    c.type = t.wrap)
                                }
                            }
                            )),
                            e.config.type) {
                            case "horizontal":
                                e.rect(t + e.D, a - e.D, i + s.start, i + s.end, o - He.aN(s.variant.depth) / 2, o + He.aN(s.variant.depth) / 2, {
                                    rotationY: null === (l = s.variant.structure) || void 0 === l ? void 0 : l.angle
                                }, r, c);
                                break;
                            case "vertical":
                                var p = a - t
                                  , d = Math.floor((p + e.space(e.config.panels.variant)) / (e.config.panels.variant.structure.size + e.space(e.config.panels.variant)));
                                if (d) {
                                    var h, u, m = (p - e.data.panels.structure[d - 1].end) / 2;
                                    if (s.index <= d)
                                        if (e.nearestJoiner(t + m + s.start) < .08)
                                            e.rect(t + m + s.start, t + m + s.end, i - e.h1 + e.D, n + .01 - e.D, -e.config.joiners.depth / 2, e.config.joiners.depth / 2, {
                                                rotationX: null === (h = s.variant.structure) || void 0 === h ? void 0 : h.angle
                                            }, r, c);
                                        else
                                            e.rect(t + m + s.start, t + m + s.end, i + e.D, n - e.D, o - He.aN(s.variant.depth) / 2, o + He.aN(s.variant.depth) / 2, {
                                                rotationX: null === (u = s.variant.structure) || void 0 === u ? void 0 : u.angle
                                            }, r, c)
                                }
                            }
                        }
                        ))
                    }
                },
                e.nearestJoiner = function(t) {
                    var a = 1 / 0;
                    return e.joiners && e.joiners.length && e.joiners.forEach((function(e) {
                        var i = t - e.start;
                        i > 0 && a > i && (a = i)
                    }
                    )),
                    a
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this
              , a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            Object(l.a)(this, e),
            this.rect = function(e, a, i, n, o, s) {
                var l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}
                  , r = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0
                  , c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : {};
                if (l.rotationX || l.rotationY || (t.geometry.vertices.push(new yt.Vector3(e,i,o)),
                t.geometry.vertices.push(new yt.Vector3(e,i,s)),
                t.geometry.vertices.push(new yt.Vector3(a,i,s)),
                t.geometry.vertices.push(new yt.Vector3(a,i,o)),
                t.geometry.vertices.push(new yt.Vector3(e,n,o)),
                t.geometry.vertices.push(new yt.Vector3(e,n,s)),
                t.geometry.vertices.push(new yt.Vector3(a,n,s)),
                t.geometry.vertices.push(new yt.Vector3(a,n,o))),
                l.rotationX) {
                    var p = a - e
                      , d = s - o
                      , h = Mt.rotatePointDegrees({
                        x: -p / 2,
                        y: 0,
                        z: d / 2
                    }, l.rotationX)
                      , u = Mt.rotatePointDegrees({
                        x: -p / 2,
                        y: 0,
                        z: -d / 2
                    }, l.rotationX)
                      , m = Mt.rotatePointDegrees({
                        x: p / 2,
                        y: 0,
                        z: -d / 2
                    }, l.rotationX)
                      , g = Mt.rotatePointDegrees({
                        x: p / 2,
                        y: 0,
                        z: d / 2
                    }, l.rotationX);
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + h.x,i,o + d / 2 - h.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + u.x,i,o + d / 2 - u.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + m.x,i,o + d / 2 - m.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + g.x,i,o + d / 2 - g.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + h.x,n,o + d / 2 - h.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + u.x,n,o + d / 2 - u.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + m.x,n,o + d / 2 - m.z)),
                    t.geometry.vertices.push(new yt.Vector3(e + p / 2 + g.x,n,o + d / 2 - g.z))
                }
                if (l.rotationY) {
                    var f = n - i
                      , b = s - o
                      , w = Mt.rotatePointDegrees({
                        x: -f / 2,
                        y: 0,
                        z: b / 2
                    }, l.rotationY)
                      , v = Mt.rotatePointDegrees({
                        x: -f / 2,
                        y: 0,
                        z: -b / 2
                    }, l.rotationY)
                      , y = Mt.rotatePointDegrees({
                        x: f / 2,
                        y: 0,
                        z: b / 2
                    }, l.rotationY)
                      , k = Mt.rotatePointDegrees({
                        x: f / 2,
                        y: 0,
                        z: -b / 2
                    }, l.rotationY);
                    t.geometry.vertices.push(new yt.Vector3(e,i + f / 2 + w.x,o + b / 2 - w.z)),
                    t.geometry.vertices.push(new yt.Vector3(e,i + f / 2 + v.x,o + b / 2 - v.z)),
                    t.geometry.vertices.push(new yt.Vector3(a,i + f / 2 + v.x,o + b / 2 - v.z)),
                    t.geometry.vertices.push(new yt.Vector3(a,i + f / 2 + w.x,o + b / 2 - w.z)),
                    t.geometry.vertices.push(new yt.Vector3(e,i + f / 2 + y.x,o + b / 2 - y.z)),
                    t.geometry.vertices.push(new yt.Vector3(e,i + f / 2 + k.x,o + b / 2 - k.z)),
                    t.geometry.vertices.push(new yt.Vector3(a,i + f / 2 + k.x,o + b / 2 - k.z)),
                    t.geometry.vertices.push(new yt.Vector3(a,i + f / 2 + y.x,o + b / 2 - y.z))
                }
                switch (t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 2,t.vi + 1)),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 3,t.vi + 2)),
                t.geometry.faces.push(new yt.Face3(t.vi + 5,t.vi + 7,t.vi + 4)),
                t.geometry.faces.push(new yt.Face3(t.vi + 5,t.vi + 6,t.vi + 7)),
                t.geometry.faces.push(new yt.Face3(t.vi + 3,t.vi + 4,t.vi + 7)),
                t.geometry.faces.push(new yt.Face3(t.vi + 3,t.vi + 0,t.vi + 4)),
                t.geometry.faces.push(new yt.Face3(t.vi + 1,t.vi + 6,t.vi + 5)),
                t.geometry.faces.push(new yt.Face3(t.vi + 1,t.vi + 2,t.vi + 6)),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 5,t.vi + 4)),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 1,t.vi + 5)),
                t.geometry.faces.push(new yt.Face3(t.vi + 2,t.vi + 7,t.vi + 6)),
                t.geometry.faces.push(new yt.Face3(t.vi + 2,t.vi + 3,t.vi + 7)),
                t.vi += 8,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 1,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 1,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 0,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 0,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 3,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 3,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 2,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 2,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 4,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 4,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 5,
                t.geometry.faces[t.fi++].materialIndex = 6 * r + 5,
                c.type || t.unwrap.type) {
                case "fill":
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2));
                    break;
                case "wrap":
                    t.vertices = [e, a, i, n, o, s],
                    t.unit = c.unit || t.unwrap.unit,
                    t.geometry.faceVertexUvs[0].push(t.wrap(1)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(2)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(3)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(4)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(5)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(6)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(7)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(8)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(9)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(10)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(11)),
                    t.geometry.faceVertexUvs[0].push(t.wrap(12))
                }
            }
            ,
            this.quad = function(e) {
                var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0
                  , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                switch (t.geometry.vertices.push(new yt.Vector3(e[0][0],e[0][1],e[0][2])),
                t.geometry.vertices.push(new yt.Vector3(e[1][0],e[1][1],e[1][2])),
                t.geometry.vertices.push(new yt.Vector3(e[2][0],e[2][1],e[2][2])),
                t.geometry.vertices.push(new yt.Vector3(e[3][0],e[3][1],e[3][2])),
                t.geometry.vertices.push(new yt.Vector3(e[4][0],e[4][1],e[4][2])),
                t.geometry.vertices.push(new yt.Vector3(e[5][0],e[5][1],e[5][2])),
                t.geometry.vertices.push(new yt.Vector3(e[6][0],e[6][1],e[6][2])),
                t.geometry.vertices.push(new yt.Vector3(e[7][0],e[7][1],e[7][2])),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 2,t.vi + 1)),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 3,t.vi + 2)),
                t.geometry.faces.push(new yt.Face3(t.vi + 5,t.vi + 7,t.vi + 4)),
                t.geometry.faces.push(new yt.Face3(t.vi + 5,t.vi + 6,t.vi + 7)),
                t.geometry.faces.push(new yt.Face3(t.vi + 3,t.vi + 4,t.vi + 7)),
                t.geometry.faces.push(new yt.Face3(t.vi + 3,t.vi + 0,t.vi + 4)),
                t.geometry.faces.push(new yt.Face3(t.vi + 1,t.vi + 6,t.vi + 5)),
                t.geometry.faces.push(new yt.Face3(t.vi + 1,t.vi + 2,t.vi + 6)),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 5,t.vi + 4)),
                t.geometry.faces.push(new yt.Face3(t.vi + 0,t.vi + 1,t.vi + 5)),
                t.geometry.faces.push(new yt.Face3(t.vi + 2,t.vi + 7,t.vi + 6)),
                t.geometry.faces.push(new yt.Face3(t.vi + 2,t.vi + 3,t.vi + 7)),
                t.vi += 8,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 1,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 1,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 0,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 0,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 3,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 3,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 2,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 2,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 4,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 4,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 5,
                t.geometry.faces[t.fi++].materialIndex = 6 * a + 5,
                i.type || t.unwrap.type) {
                case "fill":
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 1)),
                    t.geometry.faceVertexUvs[0].push(t.fill("lb", 2))
                }
            }
            ,
            this.fill = function(e, t) {
                switch (e) {
                case "lb":
                    switch (t) {
                    case 1:
                        return [new yt.Vector2(0,0), new yt.Vector2(1,1), new yt.Vector2(0,1)];
                    case 2:
                        return [new yt.Vector2(0,0), new yt.Vector2(1,0), new yt.Vector2(1,1)]
                    }
                }
                return [new yt.Vector2(0,0), new yt.Vector2(0,0), new yt.Vector2(0,0)]
            }
            ,
            this.wrap = function(e) {
                return e >= 1 && e <= 12 ? [new yt.Vector2(t.vector(e, 1),t.vector(e, 2)), new yt.Vector2(t.vector(e, 3),t.vector(e, 4)), new yt.Vector2(t.vector(e, 5),t.vector(e, 6))] : [new yt.Vector2(0,0), new yt.Vector2(0,0), new yt.Vector2(0,0)]
            }
            ,
            this.vector = function(e, a) {
                var i = "".concat(e, "_").concat(a)
                  , n = t.args.open || 0
                  , o = 0
                  , s = 0
                  , l = t.vertices[1] - t.vertices[0]
                  , r = t.vertices[3] - t.vertices[2]
                  , c = t.vertices[5] - t.vertices[4]
                  , p = 0
                  , d = 0;
                switch (i) {
                case "1_1":
                    p = t.vertices[0] - n;
                    break;
                case "1_2":
                    p = t.vertices[2] - o + c;
                    break;
                case "1_3":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "1_4":
                    p = t.vertices[2] - o + c,
                    d = -c;
                    break;
                case "1_5":
                    p = t.vertices[0] - n;
                    break;
                case "1_6":
                    p = t.vertices[2] - o + c,
                    d = -c;
                    break;
                case "2_1":
                    p = t.vertices[0] - n;
                    break;
                case "2_2":
                    p = t.vertices[2] - o + c;
                    break;
                case "2_3":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "2_4":
                    p = t.vertices[2] - o + c;
                    break;
                case "2_5":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "2_6":
                    p = t.vertices[2] - o + c,
                    d = -c;
                    break;
                case "3_1":
                    p = t.vertices[0] - n;
                    break;
                case "3_2":
                    p = t.vertices[2] - o + r;
                    break;
                case "3_3":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "3_4":
                    p = t.vertices[2] - o + r,
                    d = c;
                    break;
                case "3_5":
                    p = t.vertices[0] - n;
                    break;
                case "3_6":
                    p = t.vertices[2] - o + r,
                    d = c;
                    break;
                case "4_1":
                    p = t.vertices[0] - n;
                    break;
                case "4_2":
                    p = t.vertices[2] - o + r;
                    break;
                case "4_3":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "4_4":
                    p = t.vertices[2] - o + r;
                    break;
                case "4_5":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "4_6":
                    p = t.vertices[2] - o + r,
                    d = c;
                    break;
                case "5_1":
                    p = t.vertices[1] - n;
                    break;
                case "5_2":
                    p = t.vertices[2] - o;
                    break;
                case "5_3":
                    p = t.vertices[1] - n,
                    d = -l;
                    break;
                case "5_4":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "5_5":
                    p = t.vertices[1] - n;
                    break;
                case "5_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "6_1":
                    p = t.vertices[1] - n;
                    break;
                case "6_2":
                    p = t.vertices[2] - o;
                    break;
                case "6_3":
                    p = t.vertices[1] - n,
                    d = -l;
                    break;
                case "6_4":
                    p = t.vertices[2] - o;
                    break;
                case "6_5":
                    p = t.vertices[1] - n,
                    d = -l;
                    break;
                case "6_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "7_1":
                    p = t.vertices[0] - n;
                    break;
                case "7_2":
                    p = t.vertices[2] - o;
                    break;
                case "7_3":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "7_4":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "7_5":
                    p = t.vertices[0] - n;
                    break;
                case "7_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "8_1":
                    p = t.vertices[0] - n;
                    break;
                case "8_2":
                    p = t.vertices[2] - o;
                    break;
                case "8_3":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "8_4":
                    p = t.vertices[2] - o;
                    break;
                case "8_5":
                    p = t.vertices[0] - n,
                    d = l;
                    break;
                case "8_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "9_1":
                    p = t.vertices[4] - s;
                    break;
                case "9_2":
                    p = t.vertices[2] - o;
                    break;
                case "9_3":
                    p = t.vertices[4] - s,
                    d = -c;
                    break;
                case "9_4":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "9_5":
                    p = t.vertices[4] - s;
                    break;
                case "9_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "10_1":
                    p = t.vertices[4] - s;
                    break;
                case "10_2":
                    p = t.vertices[2] - o;
                    break;
                case "10_3":
                    p = t.vertices[4] - s,
                    d = -c;
                    break;
                case "10_4":
                    p = t.vertices[2] - o;
                    break;
                case "10_5":
                    p = t.vertices[4] - s,
                    d = -c;
                    break;
                case "10_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "11_1":
                    p = t.vertices[0] - n + l;
                    break;
                case "11_2":
                    p = t.vertices[2] - o;
                    break;
                case "11_3":
                    p = t.vertices[0] - n + l,
                    d = c;
                    break;
                case "11_4":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "11_5":
                    p = t.vertices[0] - n + l;
                    break;
                case "11_6":
                    p = t.vertices[2] - o,
                    d = r;
                    break;
                case "12_1":
                    p = t.vertices[0] - n + l;
                    break;
                case "12_2":
                    p = t.vertices[2] - o;
                    break;
                case "12_3":
                    p = t.vertices[0] - n + l,
                    d = c;
                    break;
                case "12_4":
                    p = t.vertices[2] - o;
                    break;
                case "12_5":
                    p = t.vertices[0] - n + l,
                    d = c;
                    break;
                case "12_6":
                    p = t.vertices[2] - o,
                    d = r
                }
                var h = a % 2 === 1 ? t.unit.x : t.unit.y;
                return p / h + d / h
            }
            ,
            this.unwrap = Object(k.a)(Object(k.a)({}, {
                type: "fill",
                unit: {
                    x: 1,
                    y: 1
                }
            }), a),
            this.D = 1e-4,
            this.vi = 0,
            this.fi = 0,
            this.geometry = new yt.Geometry
        }
        )));
        var Ta = function(e) {
            function t(e, a) {
                var i, n, o, s, r, h, u, m, g, f, b, w, v, y, k, x, j, z, M, O, E, _, S, P;
                switch (Object(l.a)(this, t),
                _ = this,
                S = t,
                S = Object(d.a)(S),
                (E = Object(c.a)(_, Object(p.a)() ? Reflect.construct(S, P || [], Object(d.a)(_).constructor) : S.apply(_, P))).args = e,
                E.config = a,
                E.data = {},
                E.config.type) {
                case "horizontal":
                    E.data.span = {
                        left: 0,
                        right: 0,
                        top: E.sum([null === (i = E.config.frame) || void 0 === i || null === (n = i.top) || void 0 === n ? void 0 : n.size, null === (o = E.config.frame) || void 0 === o || null === (s = o.top) || void 0 === s ? void 0 : s.space, null === (r = E.config.slats) || void 0 === r ? void 0 : r.space[0]]),
                        bottom: E.sum([null === (h = E.config.frame) || void 0 === h || null === (u = h.bottom) || void 0 === u ? void 0 : u.size, null === (m = E.config.frame) || void 0 === m || null === (g = m.bottom) || void 0 === g ? void 0 : g.space, null === (f = E.config.slats) || void 0 === f ? void 0 : f.space[1]])
                    },
                    E.data.span.x = E.data.span.left + E.data.span.right,
                    E.data.span.y = E.data.span.top + E.data.span.bottom,
                    E.data.panels = E.panels.data(E.args.height - E.data.span.y),
                    E.data.width = E.args.width,
                    E.data.height = E.data.panels.size + E.data.span.y;
                    break;
                case "vertical":
                    E.data.span = {
                        left: E.sum([null === (b = E.config.frame) || void 0 === b || null === (w = b.left) || void 0 === w ? void 0 : w.size, null === (v = E.config.frame) || void 0 === v || null === (y = v.left) || void 0 === y ? void 0 : y.space, null === (k = E.config.slats) || void 0 === k ? void 0 : k.space[0]]),
                        right: E.sum([null === (x = E.config.frame) || void 0 === x || null === (j = x.right) || void 0 === j ? void 0 : j.size, null === (z = E.config.frame) || void 0 === z || null === (M = z.right) || void 0 === M ? void 0 : M.space, null === (O = E.config.slats) || void 0 === O ? void 0 : O.space[1]]),
                        top: 0,
                        bottom: 0
                    },
                    E.data.span.x = E.data.span.left + E.data.span.right,
                    E.data.span.y = E.data.span.top + E.data.span.bottom,
                    E.data.panels = E.panels.data(E.args.width - E.data.span.x),
                    E.data.width = E.args.width,
                    E.data.height = E.args.height
                }
                return Object(c.a)(E, E.data)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Ha);
        var Ba = function(e) {
            function t(e, a, i, n) {
                var o, s, r, h;
                return Object(l.a)(this, t),
                s = this,
                r = t,
                h = [n],
                r = Object(d.a)(r),
                (o = Object(c.a)(s, Object(p.a)() ? Reflect.construct(r, h || [], Object(d.a)(s).constructor) : r.apply(s, h))).init = function() {
                    var e, t;
                    o.w1 = o.bound(1, o.data.width, o.args.direction) + o.sum([null === (e = o.args.indent) || void 0 === e ? void 0 : e.left]),
                    o.w2 = o.bound(2, o.data.width, o.args.direction) - o.sum([null === (t = o.args.indent) || void 0 === t ? void 0 : t.right]),
                    o.h1 = 0 + o.sum([o.args.space]),
                    o.h2 = o.data.height + o.sum([o.args.space])
                }
                ,
                o.draw = function() {
                    var e, t, a, i, n, s, l, r, c, p, d, h, u, m, g, f, b, w, v, y;
                    if (o.config.frame && ["left", "right", "top", "bottom"].forEach((function(e) {
                        var t, a, i, n, s, l;
                        switch (e) {
                        case "left":
                            (null === (t = l = o.config.frame[e]) || void 0 === t ? void 0 : t.depth) && (u = o.w1,
                            m = u + l.size,
                            g = o.h1,
                            f = o.h2);
                            break;
                        case "right":
                            (null === (a = l = o.config.frame[e]) || void 0 === a ? void 0 : a.depth) && (u = o.w2 - l.size,
                            m = u + l.size,
                            g = o.h1,
                            f = o.h2);
                            break;
                        case "top":
                            (null === (i = l = o.config.frame[e]) || void 0 === i ? void 0 : i.depth) && (u = o.w1,
                            m = o.w2,
                            g = o.h2 - l.size,
                            f = g + l.size);
                            break;
                        case "bottom":
                            (null === (n = l = o.config.frame[e]) || void 0 === n ? void 0 : n.depth) && (u = o.w1,
                            m = o.w2,
                            g = o.h1,
                            f = g + l.size)
                        }
                        (null === (s = l) || void 0 === s ? void 0 : s.depth) && o.rect(u, m, g, f, -l.depth / 2, l.depth / 2, {}, 0)
                    }
                    )),
                    o.config.slats)
                        switch (b = -o.config.slats.depth / 2,
                        w = o.config.slats.depth / 2,
                        o.config.type) {
                        case "horizontal":
                            ["left", "right"].forEach((function(e) {
                                switch (e) {
                                case "left":
                                    u = o.w1;
                                    break;
                                case "right":
                                    u = o.w2 - o.config.slats.size
                                }
                                o.rect(u, u + o.config.slats.size, o.h1, o.h2, b, w, {}, 0)
                            }
                            ));
                            break;
                        case "vertical":
                            ["top", "bottom"].forEach((function(e) {
                                switch (e) {
                                case "top":
                                    g = o.h2 - o.config.slats.size;
                                    break;
                                case "bottom":
                                    g = o.h1
                                }
                                o.rect(o.w1, o.w2, g, g + o.config.slats.size, b, w, {}, 0)
                            }
                            ))
                        }
                    if (o.config.bracket1)
                        switch (o.config.type) {
                        case "vertical":
                            o.rect(((null === (e = o.config.bracket1.position) || void 0 === e ? void 0 : e.x) || 0) + o.w1, ((null === (t = o.config.bracket1.position) || void 0 === t ? void 0 : t.x) || 0) + o.w2, ((null === (a = o.config.bracket1.position) || void 0 === a ? void 0 : a.y) || 0) + o.h1, ((null === (i = o.config.bracket1.position) || void 0 === i ? void 0 : i.y) || 0) + o.h1 + o.config.bracket1.size, (-(null === (n = o.config.bracket1.position) || void 0 === n ? void 0 : n.z) || 0) - o.config.bracket1.depth / 2, (-(null === (s = o.config.bracket1.position) || void 0 === s ? void 0 : s.z) || 0) + o.config.bracket1.depth / 2, {}, 0)
                        }
                    if (o.config.bracket2)
                        switch (o.config.type) {
                        case "vertical":
                            o.rect(((null === (l = o.config.bracket2.position) || void 0 === l ? void 0 : l.x) || 0) + o.w1, ((null === (r = o.config.bracket2.position) || void 0 === r ? void 0 : r.x) || 0) + o.w2, ((null === (c = o.config.bracket2.position) || void 0 === c ? void 0 : c.y) || 0) + o.h1, ((null === (p = o.config.bracket2.position) || void 0 === p ? void 0 : p.y) || 0) + o.h1 + o.config.bracket2.size, (-(null === (d = o.config.bracket2.position) || void 0 === d ? void 0 : d.z) || 0) - o.config.bracket2.depth / 2, (-(null === (h = o.config.bracket2.position) || void 0 === h ? void 0 : h.z) || 0) + o.config.bracket2.depth / 2, {}, 0)
                        }
                    if (o.config.joiners && o.config.joiners.interval) {
                        v = Math.ceil((o.w2 - o.w1 + o.config.joiners.width) / (o.config.joiners.interval + o.config.joiners.width)) - 1;
                        for (var k = 1; k <= v; k++)
                            y = (o.w2 - o.w1) / (v + 1) * k,
                            u = o.w1 + y - o.config.joiners.width / 2,
                            m = o.w1 + y + o.config.joiners.width / 2,
                            b = -o.config.joiners.depth / 2,
                            w = o.config.joiners.depth / 2,
                            "horizontal" === o.config.type ? (o.rect(u, m, 0, o.h2, b, w, {}, 0),
                            o.config.slats && ["left", "right"].forEach((function(e) {
                                switch (e) {
                                case "left":
                                    o.rect(u - o.config.slats.size, u, o.h1, o.h2, -o.config.slats.depth / 2, o.config.slats.depth / 2, {}, 0);
                                    break;
                                case "right":
                                    o.rect(m, m + o.config.slats.size, o.h1, o.h2, -o.config.slats.depth / 2, o.config.slats.depth / 2, {}, 0)
                                }
                            }
                            ))) : o.joiners.push({
                                start: u,
                                end: m
                            })
                    }
                    u = o.w1 + o.data.span.left,
                    m = o.w2 - o.data.span.right,
                    g = o.h1 + o.data.span.bottom,
                    f = o.h2 - o.data.span.top,
                    o.panels.draw(u, m, g, f)
                }
                ,
                o.args = e,
                o.config = a,
                o.data = i,
                o.joiners = [],
                o.init(),
                o.draw(),
                o.geometry.computeFaceNormals(),
                Object(c.a)(o, o.geometry)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Ha)
          , Wa = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        Wa.data = function(e, t) {
            return new Ta(e,t)
        }
        ,
        Wa.geometry = function(e, t) {
            var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
              , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
              , n = new Ba(e,t,a,i);
            return n
        }
        ;
        var Na = Wa
          , Aa = Object(r.a)((function e(t, a, i, n) {
            var o, s, r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], c = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5], p = arguments.length > 6 ? arguments[6] : void 0;
            Object(l.a)(this, e);
            var d = 0
              , h = 0
              , u = new yt.Geometry
              , m = [];
            m.push(new yt.Vector2(0,0)),
            m.push(new yt.Vector2(1,0)),
            m.push(new yt.Vector2(1,1)),
            m.push(new yt.Vector2(0,1));
            for (var g = 1; g <= 2; g++)
                if (1 === g && r || 2 === g && c) {
                    switch (g) {
                    case 1:
                        s = (o = -t / 2 + p.left) + a;
                        break;
                    case 2:
                        o = (s = t / 2 - p.right) - a
                    }
                    u.vertices.push(new yt.Vector3(o,0,-n / 2)),
                    u.vertices.push(new yt.Vector3(o,0,n / 2)),
                    u.vertices.push(new yt.Vector3(s,0,n / 2)),
                    u.vertices.push(new yt.Vector3(s,0,-n / 2)),
                    u.vertices.push(new yt.Vector3(o,i,-n / 2)),
                    u.vertices.push(new yt.Vector3(o,i,n / 2)),
                    u.vertices.push(new yt.Vector3(s,i,n / 2)),
                    u.vertices.push(new yt.Vector3(s,i,-n / 2)),
                    u.faces.push(new yt.Face3(h + 0,h + 2,h + 1)),
                    u.faces.push(new yt.Face3(h + 0,h + 3,h + 2)),
                    u.faces.push(new yt.Face3(h + 5,h + 7,h + 4)),
                    u.faces.push(new yt.Face3(h + 5,h + 6,h + 7)),
                    u.faces.push(new yt.Face3(h + 3,h + 4,h + 7)),
                    u.faces.push(new yt.Face3(h + 3,h + 0,h + 4)),
                    u.faces.push(new yt.Face3(h + 1,h + 6,h + 5)),
                    u.faces.push(new yt.Face3(h + 1,h + 2,h + 6)),
                    u.faces.push(new yt.Face3(h + 0,h + 5,h + 4)),
                    u.faces.push(new yt.Face3(h + 0,h + 1,h + 5)),
                    u.faces.push(new yt.Face3(h + 2,h + 7,h + 6)),
                    u.faces.push(new yt.Face3(h + 2,h + 3,h + 7)),
                    h += 8,
                    u.faces[d++].materialIndex = 4,
                    u.faces[d++].materialIndex = 4,
                    u.faces[d++].materialIndex = 5,
                    u.faces[d++].materialIndex = 5,
                    u.faces[d++].materialIndex = 0,
                    u.faces[d++].materialIndex = 0,
                    u.faces[d++].materialIndex = 1,
                    u.faces[d++].materialIndex = 1,
                    u.faces[d++].materialIndex = 4,
                    u.faces[d++].materialIndex = 4,
                    u.faces[d++].materialIndex = 5,
                    u.faces[d++].materialIndex = 5,
                    u.faceVertexUvs[0].push([m[0], m[2], m[3]]),
                    u.faceVertexUvs[0].push([m[0], m[1], m[2]]),
                    u.faceVertexUvs[0].push([m[0], m[2], m[3]]),
                    u.faceVertexUvs[0].push([m[0], m[1], m[2]]),
                    u.faceVertexUvs[0].push([m[0], m[2], m[3]]),
                    u.faceVertexUvs[0].push([m[0], m[1], m[2]]),
                    u.faceVertexUvs[0].push([m[0], m[2], m[3]]),
                    u.faceVertexUvs[0].push([m[0], m[1], m[2]]),
                    u.faceVertexUvs[0].push([m[0], m[2], m[3]]),
                    u.faceVertexUvs[0].push([m[0], m[1], m[2]]),
                    u.faceVertexUvs[0].push([m[0], m[2], m[3]]),
                    u.faceVertexUvs[0].push([m[0], m[1], m[2]])
                }
            return u.computeFaceNormals(),
            u
        }
        ))
          , Ga = Object(r.a)((function e(t, a, i, n) {
            var o, s, r, c, p, d, h, u, m, g, f, b, w = this, v = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, y = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, k = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, x = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null;
            Object(l.a)(this, e),
            this.rect = function(e, t, a, i, n, o) {
                var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0;
                w.geometry.vertices.push(new yt.Vector3(e,a,n)),
                w.geometry.vertices.push(new yt.Vector3(e,a,o)),
                w.geometry.vertices.push(new yt.Vector3(t,a,o)),
                w.geometry.vertices.push(new yt.Vector3(t,a,n)),
                w.geometry.vertices.push(new yt.Vector3(e,i,n)),
                w.geometry.vertices.push(new yt.Vector3(e,i,o)),
                w.geometry.vertices.push(new yt.Vector3(t,i,o)),
                w.geometry.vertices.push(new yt.Vector3(t,i,n)),
                w.fv(s)
            }
            ,
            this.fv = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                w.geometry.faces.push(new yt.Face3(w.vi + 0,w.vi + 2,w.vi + 1)),
                w.geometry.faces.push(new yt.Face3(w.vi + 0,w.vi + 3,w.vi + 2)),
                w.geometry.faces.push(new yt.Face3(w.vi + 5,w.vi + 7,w.vi + 4)),
                w.geometry.faces.push(new yt.Face3(w.vi + 5,w.vi + 6,w.vi + 7)),
                w.geometry.faces.push(new yt.Face3(w.vi + 3,w.vi + 4,w.vi + 7)),
                w.geometry.faces.push(new yt.Face3(w.vi + 3,w.vi + 0,w.vi + 4)),
                w.geometry.faces.push(new yt.Face3(w.vi + 1,w.vi + 6,w.vi + 5)),
                w.geometry.faces.push(new yt.Face3(w.vi + 1,w.vi + 2,w.vi + 6)),
                w.geometry.faces.push(new yt.Face3(w.vi + 0,w.vi + 5,w.vi + 4)),
                w.geometry.faces.push(new yt.Face3(w.vi + 0,w.vi + 1,w.vi + 5)),
                w.geometry.faces.push(new yt.Face3(w.vi + 2,w.vi + 7,w.vi + 6)),
                w.geometry.faces.push(new yt.Face3(w.vi + 2,w.vi + 3,w.vi + 7)),
                w.vi += 8,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 1,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 1,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 0,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 0,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 3,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 3,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 2,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 2,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 4,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 4,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 5,
                w.geometry.faces[w.fi++].materialIndex = 6 * e + 5,
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[3], w.uvs[1]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[2], w.uvs[3]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[3], w.uvs[1]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[2], w.uvs[3]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[3], w.uvs[1]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[2], w.uvs[3]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[3], w.uvs[1]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[2], w.uvs[3]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[3], w.uvs[1]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[2], w.uvs[3]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[3], w.uvs[1]]),
                w.geometry.faceVertexUvs[0].push([w.uvs[0], w.uvs[2], w.uvs[3]])
            }
            ,
            this.getPanelsInfo = function(e) {
                if (P.isArray(e.height)) {
                    for (var t = 0, a = 0; a < e.height.length; a++)
                        t += e.height[a];
                    return {
                        height: t + (e.height.length - 1) * e.space,
                        multiplier: e.height.length
                    }
                }
                return {
                    height: e.height,
                    multiplier: 1
                }
            }
            ,
            this.getHeightPosition = function(e, t, a, i, n, o) {
                var s = 0;
                if (s += a.space + o,
                P.isArray(i.height)) {
                    for (var l = 1; l <= e; l++) {
                        var r = (l - 1) % i.height.length;
                        s += i.height[r] + n
                    }
                    s += i.height[t] / 2
                } else
                    s += e * (i.height + n) + i.height / 2;
                return s
            }
            ,
            this.geometry = new yt.Geometry,
            this.D = 1e-4,
            this.vi = 0,
            this.fi = 0,
            this.uvs = [new yt.Vector2(0,0), new yt.Vector2(0,1), new yt.Vector2(1,0), new yt.Vector2(1,1)],
            r = 0,
            c = a.height,
            p = -i.depth / 2,
            d = i.depth / 2;
            for (var j = 1; j <= 2; j++) {
                switch (t) {
                case "left":
                    switch (j) {
                    case 1:
                        s = (o = 0 + y) + i.width;
                        break;
                    case 2:
                        o = (s = a.width - k) - i.width
                    }
                    break;
                case "center":
                    switch (j) {
                    case 1:
                        s = (o = -a.width / 2 + y) + i.width;
                        break;
                    case 2:
                        o = (s = a.width / 2 - k) - i.width
                    }
                    break;
                case "right":
                    switch (j) {
                    case 1:
                        s = (o = -a.width + y) + i.width;
                        break;
                    case 2:
                        o = (s = 0 - k) - i.width
                    }
                }
                this.rect(o, s, r, c, p, d)
            }
            switch (t) {
            case "left":
                o = 0 + y + i.width,
                s = a.width - k - i.width;
                break;
            case "center":
                o = -a.width / 2 + y + i.width,
                s = a.width / 2 - k - i.width;
                break;
            case "right":
                o = -a.width + y + i.width,
                s = 0 - k - i.width
            }
            if (i.height)
                for (var z = 1; z <= 2; z++) {
                    switch (z) {
                    case 1:
                        r = (c = a.height) - i.height;
                        break;
                    case 2:
                        c = (r = 0) + i.height
                    }
                    this.rect(o, s, r, c, p, d)
                }
            if (x)
                h = x.structure,
                u = x.panels;
            else {
                h = n.space - .0012 * Math.sin(n.angle * Math.PI / 180);
                var M = this.getPanelsInfo(n);
                u = Math.floor((this.D + a.height - 2 * He.aN(i.height) - i.space + h) / (M.height + h)) * M.multiplier
            }
            r = He.aN(i.height) + i.space,
            p = 0;
            for (var O = 0; O < u; O++) {
                var E = O % n.height.length
                  , _ = P.isArray(n.height) ? n.height[E] : n.height
                  , S = this.getHeightPosition(O, E, i, n, h, this.D);
                m = Mt.rotatePointDegrees({
                    x: -_ / 2,
                    y: 0,
                    z: n.depth / 2
                }, n.angle),
                g = Mt.rotatePointDegrees({
                    x: -_ / 2,
                    y: 0,
                    z: -n.depth / 2
                }, n.angle),
                f = Mt.rotatePointDegrees({
                    x: _ / 2,
                    y: 0,
                    z: n.depth / 2
                }, n.angle),
                b = Mt.rotatePointDegrees({
                    x: _ / 2,
                    y: 0,
                    z: -n.depth / 2
                }, n.angle);
                var C = v ? v[O % v.length] : 0;
                c = r + S,
                this.geometry.vertices.push(new yt.Vector3(o,c + m.x,p - m.z + C)),
                this.geometry.vertices.push(new yt.Vector3(o,c + g.x,p - g.z + C)),
                this.geometry.vertices.push(new yt.Vector3(s,c + g.x,p - g.z + C)),
                this.geometry.vertices.push(new yt.Vector3(s,c + m.x,p - m.z + C)),
                this.geometry.vertices.push(new yt.Vector3(o,c + f.x,p - f.z + C)),
                this.geometry.vertices.push(new yt.Vector3(o,c + b.x,p - b.z + C)),
                this.geometry.vertices.push(new yt.Vector3(s,c + b.x,p - b.z + C)),
                this.geometry.vertices.push(new yt.Vector3(s,c + f.x,p - f.z + C)),
                this.fv()
            }
            return this.geometry.computeFaceNormals(),
            this.geometry
        }
        ));
        var Ua = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).getColor = function() {
                    return Fa.a.hex(i.instance.config.fencings[i.instance.fencings.group].systems[i.instance.fencings.system].colors[i.instance.fencings.color].color)
                }
                ,
                i.setStatus = function() {
                    return (!i.wall.combo.status || !i.wall.combo.destination) && !("off" === i.wall.config.fencing || "wall" !== i.wall.config.kind && "space" !== i.wall.config.kind || i.wall.panels.getStatus() || !i.wall.status || i.wall.error || !(i.wall.width <= 1e3))
                }
                ,
                i.calcPosition = function() {
                    return {
                        x: i.wall.position.normal.x,
                        y: i.getWallHeight(),
                        z: i.wall.position.normal.z
                    }
                }
                ,
                i.setMaterial = function() {
                    if (i.instance.fencings.status && i.instance.fencings.group && i.instance.fencings.system && i.instance.fencings.variant) {
                        var e = i.instance.config.fencings[i.instance.fencings.group].systems[i.instance.fencings.system].pattern
                          , t = i.instance.config.fencings[i.instance.fencings.group].systems[i.instance.fencings.system].variants[i.instance.fencings.variant];
                        if (t)
                            return P.merge(e, t)
                    }
                    return null
                }
                ,
                i.calcData = function() {
                    var e = {}
                      , t = 0
                      , a = 0
                      , n = 0
                      , o = {
                        left: !1,
                        right: !1
                    }
                      , s = {
                        left: 0,
                        right: 0
                    }
                      , l = {
                        left: 0,
                        right: 0
                    };
                    if (i.status) {
                        t = i.getMaxHeight();
                        var r, c, p, d, h = parseFloat(i.wall.config.fencingHeight);
                        if (h !== Number.NaN && (0 === t || h < t) && (t = h),
                        t)
                            if (e.args = {
                                direction: "center",
                                width: i.wall.width,
                                height: t - He.aN(!1 !== (null === (r = i.material) || void 0 === r ? void 0 : r.spaceable) ? null === (c = i.instance.getSystem().adds.fencings.space) || void 0 === c ? void 0 : c.top : 0) - He.aN(!1 !== (null === (p = i.material) || void 0 === p ? void 0 : p.spaceable) ? null === (d = i.instance.getSystem().adds.fencings.space) || void 0 === d ? void 0 : d.bottom : 0),
                                custom: {
                                    space: parseFloat(i.instance.fencings.space)
                                }
                            },
                            i.material && (e.data = Na.data(e.args, i.material),
                            a = e.data.height)) {
                                var u, m, g, f, b, w, v;
                                if (i.data || (i.data = []),
                                i.data.maxHeight = t,
                                i.data.height = a,
                                n = He.aN(null === (u = i.wall.peakMaterial.tip) || void 0 === u ? void 0 : u.height),
                                i.determine && (i.determine.pole1.config.virtual || i.determine.pole2.config.virtual))
                                    e.args.space = t - a - ((null === (w = i.determine) || void 0 === w ? void 0 : w.fencing.data.maxHeight) - (null === (v = i.determine) || void 0 === v ? void 0 : v.fencing.data.height)) / 2;
                                else
                                    e.args.space = (t - a) / 2;
                                if (e.args.space += n + (He.aN(!1 !== (null === (m = i.material) || void 0 === m ? void 0 : m.spaceable) ? null === (g = i.instance.getSystem().adds.fencings.space) || void 0 === g ? void 0 : g.top : 0) - He.aN(!1 !== (null === (f = i.material) || void 0 === f ? void 0 : f.spaceable) ? null === (b = i.instance.getSystem().adds.fencings.space) || void 0 === b ? void 0 : b.bottom : 0)) / 2,
                                i.wall.pole1.config.virtual && (o.left = !0,
                                i.wall.pole1 && "wicket" === i.wall.pole1.wall.config.kind && i.wall.pole1.wall.manufacture.config.status && (o.left = !1)),
                                i.wall.pole2.config.virtual) {
                                    var y = i.wall.pole2.config.polygonBreak || i.wall.pole2.isLast()
                                      , k = i.wall.pole2.next && "wall" === i.wall.pole2.next.wall.config.kind && i.wall.pole2.next.wall.height === i.wall.height;
                                    "corner" !== i.wall.pole2.blockMaterial.block.type && !y && k || (o.right = !0),
                                    i.wall.pole2.next && "wicket" === i.wall.pole2.next.wall.config.kind && i.wall.pole2.next.wall.manufacture.config.status && (o.right = !1)
                                }
                                l.left = o.left ? i.material.joiners.width : 0,
                                l.right = o.right ? i.material.joiners.width : 0,
                                i.wall.pole1.config.virtual && i.instance.isRightAngle(i.wall.pole1.angle) && (s.left -= i.material.joiners.width / 2,
                                l.left -= i.material.joiners.width / 2),
                                !1 === o.right && i.instance.isRightAngle(i.wall.pole2.angle) && (l.right += i.material.joiners.width / 2),
                                e.args.indent = l
                            }
                    }
                    return {
                        params: e,
                        maxHeight: t,
                        height: a,
                        dig: n,
                        poles: o,
                        cutPole: s,
                        cutSpan: l
                    }
                }
                ,
                i.do = function() {
                    i.instance.isLoading || i.instance.isMoving || (i.doGhost(),
                    i.doSpan(),
                    i.doPoles())
                }
                ,
                i.update = function() {
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.data = i.calcData(),
                    i.do()
                }
                ,
                i.reload = function() {
                    i.material = i.setMaterial(),
                    i.data = i.calcData(),
                    i.do()
                }
                ,
                i.remove = function() {
                    i.three.scenes["3d"].remove(i.objects.ghost),
                    i.three.scenes["3d"].remove(i.objects.span),
                    i.three.scenes["3d"].remove(i.objects.poles)
                }
                ,
                i.displayOptions = function() {
                    ft("wall", i.wall.config, i.wall),
                    i.instance.setHighlight(i.wall)
                }
                ,
                i.getMaxHeight = function() {
                    var e = i.getMaxPolesHeight();
                    if (e > 0 && e < 1 / 0) {
                        var t = e - i.getWallHeight();
                        return t > 0 ? t : 0
                    }
                    return 0
                }
                ,
                i.getMaxPolesHeight = function() {
                    var e = i.wall.pole1.config.virtual ? 0 : i.wall.pole1.fullHeight
                      , t = i.wall.pole2.config.virtual ? 0 : i.wall.pole2.fullHeight;
                    return !e && i.wall.pole1.prev && i.wall.pole1.prev.config.polygonBreak && (e = 1 / 0),
                    !t && i.wall.pole2.config.polygonBreak && (t = 1 / 0),
                    Math.min.apply(null, [e, t])
                }
                ,
                i.getWallHeight = function() {
                    var e;
                    return "wall" === i.wall.config.kind ? i.wall.height + i.wall.peakMaterial.height + He.aN(null === (e = i.wall.peakMaterial.tip) || void 0 === e ? void 0 : e.height) : 0
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.objects = {
                    ghost: null,
                    span: null,
                    poles: null
                },
                i.wall = a,
                i.status = i.setStatus(),
                i.position = i.calcPosition(),
                i.material = i.setMaterial(),
                i.data = i.calcData(),
                i.determine = !1,
                i.do(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doGhost = function() {
                if (t.status && t.data.maxHeight && !t.material) {
                    var e = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    }))]
                      , a = new Ga("center",{
                        width: t.wall.width,
                        height: t.data.maxHeight
                    },{
                        width: .02,
                        depth: .04,
                        space: 0
                    },{
                        height: .08,
                        depth: .02,
                        space: .02,
                        angle: 0
                    });
                    t.objects.ghost ? (t.objects.ghost.geometry = a,
                    t.objects.ghost.material = e) : (t.objects.ghost = new yt.Mesh(a,e),
                    t.objects.ghost.castShadow = t.instance.details.shadowsPrecision >= 100,
                    t.three.scenes["3d"].add(t.objects.ghost),
                    t.events(t.objects.ghost)),
                    t.objects.ghost.position.set(t.position.x, t.position.y, t.position.z),
                    t.objects.ghost.rotation.y = t.wall.rotation.normal,
                    t.objects.ghost.visible = !0
                } else
                    t.objects.ghost && (t.objects.ghost.visible = !1)
            }
            ,
            this.doSpan = function() {
                if (t.status && t.data.height) {
                    var e = t.instance.materials.metal(t.getColor())
                      , a = t.instance.materials.sheet(t.getColor())
                      , i = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.perfor), {}, {
                        map: t.instance.textures.perfor[t.instance.fencings.variant],
                        aoMap: t.instance.textures.perfor[t.instance.fencings.variant]
                    }))
                      , n = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.wood), {}, {
                        map: t.instance.textures.wood,
                        aoMap: t.instance.textures.wood
                    }))
                      , o = [e, e, e, e, e, e, a, a, a, a, a, a, i, i, i, i, i, i, n, n, n, n, n, n]
                      , s = Na.geometry(t.data.params.args, t.material, t.data.params.data);
                    t.objects.span ? (t.objects.span.geometry = s,
                    t.objects.span.material = o) : (t.objects.span = new yt.Mesh(s,o),
                    t.objects.span.castShadow = t.instance.details.shadowsPrecision >= 100,
                    t.three.scenes["3d"].add(t.objects.span),
                    t.events(t.objects.span)),
                    t.objects.span.position.set(t.position.x, t.position.y - t.data.dig, t.position.z),
                    t.objects.span.rotation.y = t.wall.rotation.normal,
                    t.objects.span.visible = !0
                } else
                    t.objects.span && (t.objects.span.visible = !1)
            }
            ,
            this.doPoles = function() {
                if (t.status && t.data.height) {
                    var e = t.instance.materials.metal(t.getColor())
                      , a = [e, e, e, e, e, e]
                      , i = new Aa(t.wall.width - .001,t.material.joiners.width,t.data.height + t.data.params.args.space + t.data.dig,t.material.joiners.depth,t.data.poles.left,t.data.poles.right,{
                        left: t.data.cutPole.left,
                        right: t.data.cutPole.right
                    });
                    t.objects.poles ? (t.objects.poles.geometry = i,
                    t.objects.poles.material = a) : (t.objects.poles = new yt.Mesh(i,a),
                    t.objects.poles.castShadow = !0,
                    t.three.scenes["3d"].add(t.objects.poles),
                    t.events(t.objects.poles)),
                    t.objects.poles.position.set(t.position.x, t.position.y - t.data.dig, t.position.z),
                    t.objects.poles.rotation.y = t.wall.rotation.normal,
                    t.objects.poles.visible = !0
                } else
                    t.objects.poles && (t.objects.poles.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        )));
        var Ka = function(e) {
            function t(e, a) {
                var i, n, o, s, r, h, u, m, g, f, b, w, v, y, k, x, j, z, M, O, E, _, S, P, C, D, R, F, V, I, L, H, T, B, W, N;
                switch (Object(l.a)(this, t),
                B = this,
                W = t,
                W = Object(d.a)(W),
                (T = Object(c.a)(B, Object(p.a)() ? Reflect.construct(W, N || [], Object(d.a)(B).constructor) : W.apply(B, N))).args = e,
                T.config = a,
                T.data = {},
                T.data.span = {
                    left: T.sum([null === (i = T.config.frame) || void 0 === i || null === (n = i.left) || void 0 === n ? void 0 : n.size, null === (o = T.config.frame) || void 0 === o || null === (s = o.left) || void 0 === s ? void 0 : s.space, null === (r = T.config.slats) || void 0 === r || null === (h = r.left) || void 0 === h ? void 0 : h.size, null === (u = T.config.slats) || void 0 === u || null === (m = u.left) || void 0 === m ? void 0 : m.space]),
                    right: T.sum([null === (g = T.config.frame) || void 0 === g || null === (f = g.right) || void 0 === f ? void 0 : f.size, null === (b = T.config.frame) || void 0 === b || null === (w = b.right) || void 0 === w ? void 0 : w.space, null === (v = T.config.slats) || void 0 === v || null === (y = v.right) || void 0 === y ? void 0 : y.size, null === (k = T.config.slats) || void 0 === k || null === (x = k.right) || void 0 === x ? void 0 : x.space]),
                    top: T.sum([null === (j = T.config.frame) || void 0 === j || null === (z = j.top) || void 0 === z ? void 0 : z.size, null === (M = T.config.frame) || void 0 === M || null === (O = M.top) || void 0 === O ? void 0 : O.space, null === (E = T.config.slats) || void 0 === E || null === (_ = E.top) || void 0 === _ ? void 0 : _.size, null === (S = T.config.slats) || void 0 === S || null === (P = S.top) || void 0 === P ? void 0 : P.space]),
                    bottom: T.sum([null === (C = T.config.frame) || void 0 === C || null === (D = C.bottom) || void 0 === D ? void 0 : D.size, null === (R = T.config.frame) || void 0 === R || null === (F = R.bottom) || void 0 === F ? void 0 : F.space, null === (V = T.config.slats) || void 0 === V || null === (I = V.bottom) || void 0 === I ? void 0 : I.size, null === (L = T.config.slats) || void 0 === L || null === (H = L.bottom) || void 0 === H ? void 0 : H.space])
                },
                T.data.span.x = T.data.span.left + T.data.span.right,
                T.data.span.y = T.data.span.top + T.data.span.bottom,
                T.config.type) {
                case "horizontal":
                    T.data.panels = T.panels.data(T.args.height - T.data.span.y),
                    T.data.width = T.args.width,
                    T.data.height = T.data.panels.size + T.data.span.y;
                    break;
                case "vertical":
                    T.data.panels = T.panels.data(T.args.width - T.data.span.x),
                    T.data.width = T.args.width,
                    T.data.height = T.args.height
                }
                return Object(c.a)(T, T.data)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Ha);
        var qa = function(e) {
            function t(e, a, i, n) {
                var o, s, r, h;
                return Object(l.a)(this, t),
                s = this,
                r = t,
                h = [n],
                r = Object(d.a)(r),
                (o = Object(c.a)(s, Object(p.a)() ? Reflect.construct(r, h || [], Object(d.a)(s).constructor) : r.apply(s, h))).init = function() {
                    var e, t;
                    o.w1 = o.bound(1, o.data.width, o.args.direction) + o.sum([null === (e = o.args.indent) || void 0 === e ? void 0 : e.left]),
                    o.w2 = o.bound(2, o.data.width, o.args.direction) - o.sum([null === (t = o.args.indent) || void 0 === t ? void 0 : t.right]),
                    o.h1 = 0 + o.sum([o.args.space]),
                    o.h2 = o.data.height + o.sum([o.args.space])
                }
                ,
                o.draw = function() {
                    var e, t, a, i, n, s, l, r, c, p, d, h, u, m, g, f, b, w, v, y;
                    if (o.config.frame && ["left", "right", "top", "bottom"].forEach((function(e) {
                        var t, a, i, n, s, l;
                        switch (e) {
                        case "left":
                            (null === (t = l = o.config.frame[e]) || void 0 === t ? void 0 : t.depth) && (b = o.w1,
                            w = b + l.size,
                            v = o.h1,
                            y = o.h2);
                            break;
                        case "right":
                            (null === (a = l = o.config.frame[e]) || void 0 === a ? void 0 : a.depth) && (b = o.w2 - l.size,
                            w = b + l.size,
                            v = o.h1,
                            y = o.h2);
                            break;
                        case "top":
                            (null === (i = l = o.config.frame[e]) || void 0 === i ? void 0 : i.depth) && (b = o.w1,
                            w = o.w2,
                            v = o.h2 - l.size,
                            y = v + l.size);
                            break;
                        case "bottom":
                            (null === (n = l = o.config.frame[e]) || void 0 === n ? void 0 : n.depth) && (b = o.w1,
                            w = o.w2,
                            v = o.h1,
                            y = v + l.size)
                        }
                        (null === (s = l) || void 0 === s ? void 0 : s.depth) && o.rect(b, w, v, y, -l.depth / 2, l.depth / 2, {}, 0)
                    }
                    )),
                    o.config.slats && ["left", "right", "top", "bottom"].forEach((function(e) {
                        var t, a, i, n, s, l;
                        switch (e) {
                        case "left":
                            var r, c, p, d, h, u, m, g, f, k, x, j;
                            if (null === (t = l = o.config.slats[e]) || void 0 === t ? void 0 : t.depth)
                                b = o.w1 + o.sum([null === (r = o.config.frame) || void 0 === r || null === (c = r.left) || void 0 === c ? void 0 : c.size, null === (p = o.config.frame) || void 0 === p || null === (d = p.left) || void 0 === d ? void 0 : d.space]),
                                w = b + l.size,
                                v = o.h1 + o.sum([null === (h = o.config.frame) || void 0 === h || null === (u = h.bottom) || void 0 === u ? void 0 : u.size, null === (m = o.config.frame) || void 0 === m || null === (g = m.bottom) || void 0 === g ? void 0 : g.space]),
                                y = o.h2 - o.sum([null === (f = o.config.frame) || void 0 === f || null === (k = f.top) || void 0 === k ? void 0 : k.size, null === (x = o.config.frame) || void 0 === x || null === (j = x.top) || void 0 === j ? void 0 : j.space]);
                            break;
                        case "right":
                            var z, M, O, E, _, S, P, C, D, R, F, V;
                            if (null === (a = l = o.config.slats[e]) || void 0 === a ? void 0 : a.depth)
                                b = o.w2 - l.size - o.sum([null === (z = o.config.frame) || void 0 === z || null === (M = z.right) || void 0 === M ? void 0 : M.size, null === (O = o.config.frame) || void 0 === O || null === (E = O.right) || void 0 === E ? void 0 : E.space]),
                                w = b + l.size,
                                v = o.h1 + o.sum([null === (_ = o.config.frame) || void 0 === _ || null === (S = _.bottom) || void 0 === S ? void 0 : S.size, null === (P = o.config.frame) || void 0 === P || null === (C = P.bottom) || void 0 === C ? void 0 : C.space]),
                                y = o.h2 - o.sum([null === (D = o.config.frame) || void 0 === D || null === (R = D.top) || void 0 === R ? void 0 : R.size, null === (F = o.config.frame) || void 0 === F || null === (V = F.top) || void 0 === V ? void 0 : V.space]);
                            break;
                        case "top":
                            var I, L, H, T, B, W, N, A, G, U, K, q;
                            if (null === (i = l = o.config.slats[e]) || void 0 === i ? void 0 : i.depth)
                                b = o.w1 + o.sum([null === (I = o.config.frame) || void 0 === I || null === (L = I.left) || void 0 === L ? void 0 : L.size, null === (H = o.config.frame) || void 0 === H || null === (T = H.left) || void 0 === T ? void 0 : T.space]),
                                w = o.w2 - o.sum([null === (B = o.config.frame) || void 0 === B || null === (W = B.right) || void 0 === W ? void 0 : W.size, null === (N = o.config.frame) || void 0 === N || null === (A = N.right) || void 0 === A ? void 0 : A.space]),
                                v = o.h2 - l.size - o.sum([null === (G = o.config.frame) || void 0 === G || null === (U = G.top) || void 0 === U ? void 0 : U.size, null === (K = o.config.frame) || void 0 === K || null === (q = K.top) || void 0 === q ? void 0 : q.space]),
                                y = v + l.size;
                            break;
                        case "bottom":
                            var Y, Z, X, J, Q, $, ee, te, ae, ie, ne, oe;
                            if (null === (n = l = o.config.slats[e]) || void 0 === n ? void 0 : n.depth)
                                b = o.w1 + o.sum([null === (Y = o.config.frame) || void 0 === Y || null === (Z = Y.left) || void 0 === Z ? void 0 : Z.size, null === (X = o.config.frame) || void 0 === X || null === (J = X.left) || void 0 === J ? void 0 : J.space]),
                                w = o.w2 - o.sum([null === (Q = o.config.frame) || void 0 === Q || null === ($ = Q.right) || void 0 === $ ? void 0 : $.size, null === (ee = o.config.frame) || void 0 === ee || null === (te = ee.right) || void 0 === te ? void 0 : te.space]),
                                v = o.h1 + o.sum([null === (ae = o.config.frame) || void 0 === ae || null === (ie = ae.bottom) || void 0 === ie ? void 0 : ie.size, null === (ne = o.config.frame) || void 0 === ne || null === (oe = ne.bottom) || void 0 === oe ? void 0 : oe.space]),
                                y = v + l.size
                        }
                        (null === (s = l) || void 0 === s ? void 0 : s.depth) && o.rect(b, w, v, y, -l.depth / 2, l.depth / 2, {}, 0)
                    }
                    )),
                    o.config.bracket1)
                        switch (o.config.type) {
                        case "horizontal":
                            var k = 1 * (o.h2 - o.h1) / 3;
                            o.rect(o.w1, o.w2, o.h1 + k, o.h1 + k + o.config.bracket1.size, (-(null === (e = o.config.bracket1.position) || void 0 === e ? void 0 : e.z) || 0) - o.config.bracket1.depth / 2, (-(null === (t = o.config.bracket1.position) || void 0 === t ? void 0 : t.z) || 0) + o.config.bracket1.depth / 2, {}, 0);
                            break;
                        case "vertical":
                            o.rect(((null === (a = o.config.bracket1.position) || void 0 === a ? void 0 : a.x) || 0) + o.w1, ((null === (i = o.config.bracket1.position) || void 0 === i ? void 0 : i.x) || 0) + o.w2, ((null === (n = o.config.bracket1.position) || void 0 === n ? void 0 : n.y) || 0) + o.h1, ((null === (s = o.config.bracket1.position) || void 0 === s ? void 0 : s.y) || 0) + o.h1 + o.config.bracket1.size, (-(null === (l = o.config.bracket1.position) || void 0 === l ? void 0 : l.z) || 0) - o.config.bracket1.depth / 2, (-(null === (r = o.config.bracket1.position) || void 0 === r ? void 0 : r.z) || 0) + o.config.bracket1.depth / 2, {}, 0)
                        }
                    if (o.config.bracket2)
                        switch (o.config.type) {
                        case "horizontal":
                            var x = 2 * (o.h2 - o.h1) / 3;
                            o.rect(o.w1, o.w2, o.h1 + x, o.h1 + x + o.config.bracket2.size, (-(null === (c = o.config.bracket2.position) || void 0 === c ? void 0 : c.z) || 0) - o.config.bracket2.depth / 2, (-(null === (p = o.config.bracket2.position) || void 0 === p ? void 0 : p.z) || 0) + o.config.bracket2.depth / 2, {}, 0);
                            break;
                        case "vertical":
                            o.rect(((null === (d = o.config.bracket2.position) || void 0 === d ? void 0 : d.x) || 0) + o.w1, ((null === (h = o.config.bracket2.position) || void 0 === h ? void 0 : h.x) || 0) + o.w2, ((null === (u = o.config.bracket2.position) || void 0 === u ? void 0 : u.y) || 0) + o.h1, ((null === (m = o.config.bracket2.position) || void 0 === m ? void 0 : m.y) || 0) + o.h1 + o.config.bracket2.size, (-(null === (g = o.config.bracket2.position) || void 0 === g ? void 0 : g.z) || 0) - o.config.bracket2.depth / 2, (-(null === (f = o.config.bracket2.position) || void 0 === f ? void 0 : f.z) || 0) + o.config.bracket2.depth / 2, {}, 0)
                        }
                    b = o.w1 + o.data.span.left,
                    w = o.w2 - o.data.span.right,
                    v = o.h1 + o.data.span.bottom,
                    y = o.h2 - o.data.span.top,
                    o.panels.draw(b, w, v, y)
                }
                ,
                o.args = e,
                o.config = a,
                o.data = i,
                o.init(),
                o.draw(),
                o.geometry.computeFaceNormals(),
                Object(c.a)(o, o.geometry)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Ha)
          , Ya = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        Ya.data = function(e, t) {
            return new Ka(e,t)
        }
        ,
        Ya.geometry = function(e, t) {
            var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
              , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
              , n = new qa(e,t,a,i);
            return n
        }
        ;
        var Za = Ya;
        var Xa = function(e) {
            function t(e, a) {
                var i, n, o, s, r, h, u, m, g, f, b, w, v, y, k, x, j, z, M, O, E, _, S, P, C, D, R, F, V, I, L, H, T, B, W, N, A, G, U, K, q, Y;
                switch (Object(l.a)(this, t),
                K = this,
                q = t,
                q = Object(d.a)(q),
                (U = Object(c.a)(K, Object(p.a)() ? Reflect.construct(q, Y || [], Object(d.a)(K).constructor) : q.apply(K, Y))).args = e,
                U.config = a,
                U.data = {},
                U.data.span = {
                    left: U.sum([null === (i = U.config.frame) || void 0 === i || null === (n = i.left) || void 0 === n ? void 0 : n.size, null === (o = U.config.frame) || void 0 === o || null === (s = o.left) || void 0 === s ? void 0 : s.space, null === (r = U.config.slats) || void 0 === r || null === (h = r.left) || void 0 === h ? void 0 : h.size, null === (u = U.config.slats) || void 0 === u || null === (m = u.left) || void 0 === m ? void 0 : m.space]),
                    right: U.sum([null === (g = U.config.frame) || void 0 === g || null === (f = g.right) || void 0 === f ? void 0 : f.size, null === (b = U.config.frame) || void 0 === b || null === (w = b.right) || void 0 === w ? void 0 : w.space, null === (v = U.config.slats) || void 0 === v || null === (y = v.right) || void 0 === y ? void 0 : y.size, null === (k = U.config.slats) || void 0 === k || null === (x = k.right) || void 0 === x ? void 0 : x.space]),
                    top: U.sum([null === (j = U.config.basement) || void 0 === j || null === (z = j.top) || void 0 === z ? void 0 : z.height, null === (M = U.config.frame) || void 0 === M || null === (O = M.top) || void 0 === O ? void 0 : O.size, null === (E = U.config.frame) || void 0 === E || null === (_ = E.top) || void 0 === _ ? void 0 : _.space, null === (S = U.config.slats) || void 0 === S || null === (P = S.top) || void 0 === P ? void 0 : P.size, null === (C = U.config.slats) || void 0 === C || null === (D = C.top) || void 0 === D ? void 0 : D.space]),
                    bottom: U.sum([null === (R = U.config.basement) || void 0 === R || null === (F = R.bottom) || void 0 === F ? void 0 : F.height, null === (V = U.config.basement) || void 0 === V || null === (I = V.base) || void 0 === I ? void 0 : I.height, null === (L = U.config.frame) || void 0 === L || null === (H = L.bottom) || void 0 === H ? void 0 : H.size, null === (T = U.config.frame) || void 0 === T || null === (B = T.bottom) || void 0 === B ? void 0 : B.space, null === (W = U.config.slats) || void 0 === W || null === (N = W.bottom) || void 0 === N ? void 0 : N.size, null === (A = U.config.slats) || void 0 === A || null === (G = A.bottom) || void 0 === G ? void 0 : G.space])
                },
                U.data.span.x = U.data.span.left + U.data.span.right,
                U.data.span.y = U.data.span.top + U.data.span.bottom,
                U.args.side) {
                case "front":
                    U.data.side = 1;
                    break;
                case "back":
                    U.data.side = -1
                }
                switch (U.args.direction) {
                case "left":
                    U.data.direction = -1;
                    break;
                case "right":
                    U.data.direction = 1
                }
                switch (U.config.type) {
                case "horizontal":
                    U.data.panels = U.panels.data(U.args.height - U.data.span.y),
                    U.data.width = U.args.width,
                    U.data.height = U.data.panels.size + U.data.span.y;
                    break;
                case "vertical":
                    U.data.panels = U.panels.data(U.args.width - U.data.span.x),
                    U.data.width = U.args.width,
                    U.data.height = U.args.height
                }
                return Object(c.a)(U, U.data)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Ha);
        var Ja = function(e) {
            function t(e, a, i, n) {
                var o, s, r, h;
                return Object(l.a)(this, t),
                s = this,
                r = t,
                h = [n],
                r = Object(d.a)(r),
                (o = Object(c.a)(s, Object(p.a)() ? Reflect.construct(r, h || [], Object(d.a)(s).constructor) : r.apply(s, h))).init = function() {
                    var e, t, a;
                    o.w1 = o.bound(1, o.data.width, "center") + o.sum([null === (e = o.args.indent) || void 0 === e ? void 0 : e.left]) + o.sum([o.args.open]) * o.data.direction,
                    o.w2 = o.bound(2, o.data.width, "center") - o.sum([null === (t = o.args.indent) || void 0 === t ? void 0 : t.right]) + o.sum([o.args.open]) * o.data.direction,
                    o.h1 = 0 + o.sum([o.args.space]),
                    o.h2 = o.data.height + o.sum([o.args.space]),
                    o.d = o.sum([o.args.inside, (null === (a = o.config.support) || void 0 === a ? void 0 : a.depth) / 2]) * o.data.side
                }
                ,
                o.draw = function() {
                    var e, t, a, i, n, s, l, r, c, p, d, h, u, m, g, f, b, w, v, y, k, x, j, z, M, O, E, _, S, P, C;
                    if (o.config.basement && ["top", "bottom", "base"].forEach((function(e) {
                        var t, a, i, n, s, l, r, c;
                        switch (e) {
                        case "top":
                            (null === (t = s = o.config.basement[e]) || void 0 === t ? void 0 : t.depth) && (E = o.h2 - s.height,
                            _ = E + s.height);
                            break;
                        case "bottom":
                            var p, d;
                            if (null === (a = s = o.config.basement[e]) || void 0 === a ? void 0 : a.depth)
                                E = o.h1 + o.sum([null === (p = o.config.basement) || void 0 === p || null === (d = p.base) || void 0 === d ? void 0 : d.height]),
                                _ = E + s.height;
                            break;
                        case "base":
                            (null === (i = s = o.config.basement[e]) || void 0 === i ? void 0 : i.depth) && (E = o.h1,
                            _ = E + s.height)
                        }
                        if (null === (n = s) || void 0 === n ? void 0 : n.depth)
                            switch (S = o.d - s.depth / 2 - o.sum([null === (l = s) || void 0 === l ? void 0 : l.inside]),
                            P = o.d + s.depth / 2 + o.sum([null === (r = s) || void 0 === r ? void 0 : r.outside]),
                            C = !1 === s.width ? o.sum([null === (c = o.config.extra) || void 0 === c ? void 0 : c.width]) : s.width,
                            o.args.direction) {
                            case "left":
                                o.rect(o.w1 - C, o.w2, E, _, S, P, {}, 0);
                                break;
                            case "right":
                                o.rect(o.w1, o.w2 + C, E, _, S, P, {}, 0)
                            }
                    }
                    )),
                    o.config.frame && ["left", "center", "right", "top", "bottom"].forEach((function(e) {
                        var t, a, i, n, s, l, r;
                        switch (e) {
                        case "left":
                            var c, p;
                            if (null === (t = r = o.config.frame[e]) || void 0 === t ? void 0 : t.depth)
                                M = o.w1,
                                O = M + r.size,
                                E = o.h1,
                                _ = o.h2 - o.sum([null === (c = o.config.basement) || void 0 === c || null === (p = c.top) || void 0 === p ? void 0 : p.height]);
                            break;
                        case "center":
                            var d, h;
                            if (null === (a = r = o.config.frame[e]) || void 0 === a ? void 0 : a.depth)
                                M = (o.w1 + o.w2) / 2 - r.size / 2,
                                O = M + r.size,
                                E = o.h1,
                                _ = o.h2 - o.sum([null === (d = o.config.basement) || void 0 === d || null === (h = d.top) || void 0 === h ? void 0 : h.height]);
                            break;
                        case "right":
                            var u, m;
                            if (null === (i = r = o.config.frame[e]) || void 0 === i ? void 0 : i.depth)
                                M = o.w2 - r.size,
                                O = M + r.size,
                                E = o.h1,
                                _ = o.h2 - o.sum([null === (u = o.config.basement) || void 0 === u || null === (m = u.top) || void 0 === m ? void 0 : m.height]);
                            break;
                        case "top":
                            var g, f;
                            if (null === (n = r = o.config.frame[e]) || void 0 === n ? void 0 : n.depth)
                                M = o.w1,
                                O = o.w2,
                                E = o.h2 - r.size - o.sum([null === (g = o.config.basement) || void 0 === g || null === (f = g.top) || void 0 === f ? void 0 : f.height]),
                                _ = E + r.size;
                            break;
                        case "bottom":
                            var b, w, v, y;
                            if (null === (s = r = o.config.frame[e]) || void 0 === s ? void 0 : s.depth)
                                M = o.w1,
                                O = o.w2,
                                E = o.h1 + o.sum([null === (b = o.config.basement) || void 0 === b || null === (w = b.bottom) || void 0 === w ? void 0 : w.height, null === (v = o.config.basement) || void 0 === v || null === (y = v.base) || void 0 === y ? void 0 : y.height]),
                                _ = E + r.size
                        }
                        (null === (l = r) || void 0 === l ? void 0 : l.depth) && o.rect(M, O, E, _, o.d - r.depth / 2, o.d + r.depth / 2, {}, 0)
                    }
                    )),
                    o.config.slats && ["left", "right", "top", "bottom"].forEach((function(e) {
                        var t, a, i, n, s, l;
                        switch (e) {
                        case "left":
                            var r, c, p, d, h, u, m, g, f, b, w, v, y, k, x, j, z, S;
                            if (null === (t = l = o.config.slats[e]) || void 0 === t ? void 0 : t.depth)
                                M = o.w1 + o.sum([null === (r = o.config.frame) || void 0 === r || null === (c = r.left) || void 0 === c ? void 0 : c.size, null === (p = o.config.frame) || void 0 === p || null === (d = p.left) || void 0 === d ? void 0 : d.space]),
                                O = M + l.size,
                                E = o.h1 + o.sum([null === (h = o.config.basement) || void 0 === h || null === (u = h.bottom) || void 0 === u ? void 0 : u.height, null === (m = o.config.basement) || void 0 === m || null === (g = m.base) || void 0 === g ? void 0 : g.height, null === (f = o.config.frame) || void 0 === f || null === (b = f.bottom) || void 0 === b ? void 0 : b.size, null === (w = o.config.frame) || void 0 === w || null === (v = w.bottom) || void 0 === v ? void 0 : v.space]),
                                _ = o.h2 - o.sum([null === (y = o.config.basement) || void 0 === y || null === (k = y.top) || void 0 === k ? void 0 : k.height, null === (x = o.config.frame) || void 0 === x || null === (j = x.top) || void 0 === j ? void 0 : j.size, null === (z = o.config.frame) || void 0 === z || null === (S = z.top) || void 0 === S ? void 0 : S.space]);
                            break;
                        case "right":
                            var P, C, D, R, F, V, I, L, H, T, B, W, N, A, G, U, K, q;
                            if (null === (a = l = o.config.slats[e]) || void 0 === a ? void 0 : a.depth)
                                M = o.w2 - l.size - o.sum([null === (P = o.config.frame) || void 0 === P || null === (C = P.right) || void 0 === C ? void 0 : C.size, null === (D = o.config.frame) || void 0 === D || null === (R = D.right) || void 0 === R ? void 0 : R.space]),
                                O = M + l.size,
                                E = o.h1 + o.sum([null === (F = o.config.basement) || void 0 === F || null === (V = F.bottom) || void 0 === V ? void 0 : V.height, null === (I = o.config.basement) || void 0 === I || null === (L = I.base) || void 0 === L ? void 0 : L.height, null === (H = o.config.frame) || void 0 === H || null === (T = H.bottom) || void 0 === T ? void 0 : T.size, null === (B = o.config.frame) || void 0 === B || null === (W = B.bottom) || void 0 === W ? void 0 : W.space]),
                                _ = o.h2 - o.sum([null === (N = o.config.basement) || void 0 === N || null === (A = N.top) || void 0 === A ? void 0 : A.height, null === (G = o.config.frame) || void 0 === G || null === (U = G.top) || void 0 === U ? void 0 : U.size, null === (K = o.config.frame) || void 0 === K || null === (q = K.top) || void 0 === q ? void 0 : q.space]);
                            break;
                        case "top":
                            var Y, Z, X, J, Q, $, ee, te, ae, ie, ne, oe, se, le;
                            if (null === (i = l = o.config.slats[e]) || void 0 === i ? void 0 : i.depth)
                                M = o.w1 + o.sum([null === (Y = o.config.frame) || void 0 === Y || null === (Z = Y.left) || void 0 === Z ? void 0 : Z.size, null === (X = o.config.frame) || void 0 === X || null === (J = X.left) || void 0 === J ? void 0 : J.space]),
                                O = o.w2 - o.sum([null === (Q = o.config.frame) || void 0 === Q || null === ($ = Q.right) || void 0 === $ ? void 0 : $.size, null === (ee = o.config.frame) || void 0 === ee || null === (te = ee.right) || void 0 === te ? void 0 : te.space]),
                                E = o.h2 - l.size - o.sum([null === (ae = o.config.basement) || void 0 === ae || null === (ie = ae.top) || void 0 === ie ? void 0 : ie.height, null === (ne = o.config.frame) || void 0 === ne || null === (oe = ne.top) || void 0 === oe ? void 0 : oe.size, null === (se = o.config.frame) || void 0 === se || null === (le = se.top) || void 0 === le ? void 0 : le.space]),
                                _ = E + l.size;
                            break;
                        case "bottom":
                            var re, ce, pe, de, he, ue, me, ge, fe, be, we, ve, ye, ke, xe, je;
                            if (null === (n = l = o.config.slats[e]) || void 0 === n ? void 0 : n.depth)
                                M = o.w1 + o.sum([null === (re = o.config.frame) || void 0 === re || null === (ce = re.left) || void 0 === ce ? void 0 : ce.size, null === (pe = o.config.frame) || void 0 === pe || null === (de = pe.left) || void 0 === de ? void 0 : de.space]),
                                O = o.w2 - o.sum([null === (he = o.config.frame) || void 0 === he || null === (ue = he.right) || void 0 === ue ? void 0 : ue.size, null === (me = o.config.frame) || void 0 === me || null === (ge = me.right) || void 0 === ge ? void 0 : ge.space]),
                                E = o.h1 + o.sum([null === (fe = o.config.basement) || void 0 === fe || null === (be = fe.bottom) || void 0 === be ? void 0 : be.height, null === (we = o.config.basement) || void 0 === we || null === (ve = we.base) || void 0 === ve ? void 0 : ve.height, null === (ye = o.config.frame) || void 0 === ye || null === (ke = ye.bottom) || void 0 === ke ? void 0 : ke.size, null === (xe = o.config.frame) || void 0 === xe || null === (je = xe.bottom) || void 0 === je ? void 0 : je.space]),
                                _ = E + l.size
                        }
                        (null === (s = l) || void 0 === s ? void 0 : s.depth) && o.rect(M, O, E, _, o.d - l.depth / 2, o.d + l.depth / 2, {}, 0)
                    }
                    )),
                    o.config.bracket1)
                        switch (o.config.type) {
                        case "horizontal":
                            var D = 1 * (o.h2 - o.h1) / 3;
                            o.rect(o.w1, o.w2, o.h1 + D, o.h1 + D + o.config.bracket1.size, (-(null === (e = o.config.bracket1.position) || void 0 === e ? void 0 : e.z) || 0) + o.d - o.config.bracket1.depth / 2, (-(null === (t = o.config.bracket1.position) || void 0 === t ? void 0 : t.z) || 0) + o.d + o.config.bracket1.depth / 2, {}, 0);
                            break;
                        case "vertical":
                            E = o.h1 + o.sum([null === (a = o.config.basement) || void 0 === a || null === (i = a.bottom) || void 0 === i ? void 0 : i.height, null === (n = o.config.basement) || void 0 === n || null === (s = n.base) || void 0 === s ? void 0 : s.height]),
                            o.rect(((null === (l = o.config.bracket1.position) || void 0 === l ? void 0 : l.x) || 0) + o.w1, ((null === (r = o.config.bracket1.position) || void 0 === r ? void 0 : r.x) || 0) + o.w2, ((null === (c = o.config.bracket1.position) || void 0 === c ? void 0 : c.y) || 0) + E, ((null === (p = o.config.bracket1.position) || void 0 === p ? void 0 : p.y) || 0) + E + o.config.bracket1.size, (-(null === (d = o.config.bracket1.position) || void 0 === d ? void 0 : d.z) || 0) + o.d - o.config.bracket1.depth / 2, (-(null === (h = o.config.bracket1.position) || void 0 === h ? void 0 : h.z) || 0) + o.d + o.config.bracket1.depth / 2, {}, 0)
                        }
                    if (o.config.bracket2)
                        switch (o.config.type) {
                        case "horizontal":
                            var R = 2 * (o.h2 - o.h1) / 3;
                            o.rect(o.w1, o.w2, o.h1 + R, o.h1 + R + o.config.bracket2.size, (-(null === (u = o.config.bracket2.position) || void 0 === u ? void 0 : u.z) || 0) + o.d - o.config.bracket2.depth / 2, (-(null === (m = o.config.bracket2.position) || void 0 === m ? void 0 : m.z) || 0) + o.d + o.config.bracket2.depth / 2, {}, 0);
                            break;
                        case "vertical":
                            E = o.h1 + o.sum([null === (g = o.config.basement) || void 0 === g || null === (f = g.bottom) || void 0 === f ? void 0 : f.height, null === (b = o.config.basement) || void 0 === b || null === (w = b.base) || void 0 === w ? void 0 : w.height]),
                            o.rect(((null === (v = o.config.bracket2.position) || void 0 === v ? void 0 : v.x) || 0) + o.w1, ((null === (y = o.config.bracket2.position) || void 0 === y ? void 0 : y.x) || 0) + o.w2, ((null === (k = o.config.bracket2.position) || void 0 === k ? void 0 : k.y) || 0) + E, ((null === (x = o.config.bracket2.position) || void 0 === x ? void 0 : x.y) || 0) + E + o.config.bracket2.size, (-(null === (j = o.config.bracket2.position) || void 0 === j ? void 0 : j.z) || 0) + o.d - o.config.bracket2.depth / 2, (-(null === (z = o.config.bracket2.position) || void 0 === z ? void 0 : z.z) || 0) + o.d + o.config.bracket2.depth / 2, {}, 0)
                        }
                    if (o.config.extra)
                        switch (S = o.d - o.config.extra.depth / 2,
                        P = o.d + o.config.extra.depth / 2,
                        o.config.extra.type) {
                        case "square":
                            ["top", "side", "diagonal"].forEach((function(e) {
                                var t, a, i, n, s, l, r, c;
                                switch (e) {
                                case "top":
                                    switch (E = o.h2 - o.config.extra.size,
                                    _ = E + o.config.extra.size,
                                    o.args.direction) {
                                    case "left":
                                        M = o.w1 - o.config.extra.width,
                                        O = o.w1;
                                        break;
                                    case "right":
                                        M = o.w2,
                                        O = o.w2 + o.config.extra.width
                                    }
                                    o.rect(M, O, E, _, S, P, {}, 0);
                                    break;
                                case "side":
                                    switch (E = o.h1 + o.sum([null === (t = o.config.basement) || void 0 === t || null === (a = t.bottom) || void 0 === a ? void 0 : a.height, null === (i = o.config.basement) || void 0 === i || null === (n = i.base) || void 0 === n ? void 0 : n.height]),
                                    _ = o.h2,
                                    o.args.direction) {
                                    case "left":
                                        M = o.w1 - o.config.extra.width,
                                        O = M + o.config.extra.size;
                                        break;
                                    case "right":
                                        M = o.w2 + o.config.extra.width - o.config.extra.size,
                                        O = M + o.config.extra.size
                                    }
                                    o.rect(M, O, E, _, S, P, {}, 0);
                                    break;
                                case "diagonal":
                                    var p = 0
                                      , d = 0;
                                    switch (E = o.h1 + o.sum([null === (s = o.config.basement) || void 0 === s || null === (l = s.bottom) || void 0 === l ? void 0 : l.height, null === (r = o.config.basement) || void 0 === r || null === (c = r.base) || void 0 === c ? void 0 : c.height]),
                                    _ = o.h2 - o.config.extra.size,
                                    o.args.direction) {
                                    case "left":
                                        M = o.w1 - o.config.extra.width + o.config.extra.size,
                                        O = o.w1,
                                        p = o.config.extra.size;
                                        break;
                                    case "right":
                                        M = o.w2 + o.config.extra.width - o.config.extra.size,
                                        O = o.w2,
                                        d = o.config.extra.size
                                    }
                                    o.quad([[M - d, E, S + o.D], [M - d, E, P - o.D], [M + p, E, P - o.D], [M + p, E, S + o.D], [O - p, _, S + o.D], [O - p, _, P - o.D], [O + d, _, P - o.D], [O + d, _, S + o.D]], {}, 0)
                                }
                            }
                            ));
                            break;
                        case "triangle":
                            ["diagonal"].forEach((function(e) {
                                var t, a, i, n;
                                switch (e) {
                                case "diagonal":
                                    var s = 0
                                      , l = 0;
                                    switch (E = o.h1 + o.sum([null === (t = o.config.basement) || void 0 === t || null === (a = t.bottom) || void 0 === a ? void 0 : a.height, null === (i = o.config.basement) || void 0 === i || null === (n = i.base) || void 0 === n ? void 0 : n.height]),
                                    _ = o.h2,
                                    o.args.direction) {
                                    case "left":
                                        M = o.w1 - o.config.extra.width + .02,
                                        O = o.w1 + o.config.extra.size,
                                        s = o.config.extra.size;
                                        break;
                                    case "right":
                                        M = o.w2 + o.config.extra.width - .02,
                                        O = o.w2 - o.config.extra.size,
                                        l = o.config.extra.size
                                    }
                                    o.quad([[M - l, E, S + o.D], [M - l, E, P - o.D], [M + s, E, P - o.D], [M + s, E, S + o.D], [O - s, _, S + o.D], [O - s, _, P - o.D], [O + l, _, P - o.D], [O + l, _, S + o.D]], {}, 0)
                                }
                            }
                            ))
                        }
                    M = o.w1 + o.data.span.left,
                    O = o.w2 - o.data.span.right,
                    E = o.h1 + o.data.span.bottom,
                    _ = o.h2 - o.data.span.top,
                    o.panels.draw(M, O, E, _, o.d)
                }
                ,
                o.args = e,
                o.config = a,
                o.data = i,
                o.init(),
                o.draw(),
                o.geometry.computeFaceNormals(),
                Object(c.a)(o, o.geometry)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Ha)
          , Qa = Object(r.a)((function e() {
            Object(l.a)(this, e)
        }
        ));
        Qa.data = function(e, t) {
            return new Xa(e,t)
        }
        ,
        Qa.geometry = function(e, t) {
            var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}
              , i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
              , n = new Ja(e,t,a,i);
            return n
        }
        ;
        var $a = Qa
          , ei = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                i.target.config = e,
                i.target.reload(),
                i.instance.setModified()
            }
            ,
            this.instance = t,
            this.target = a
        }
        ))
          , ti = Object(r.a)((function e(t, a, i) {
            Object(l.a)(this, e);
            var n = {
                x: 0,
                z: 0
            }
              , o = {
                x: 0,
                z: 0
            };
            "in" === a && ("left" === i && (n.x = t / 2,
            o.x = t / 2,
            o.z = -t),
            "right" === i && (n.x = -t / 2,
            o.x = -t / 2,
            o.z = -t)),
            "out" === a && ("left" === i && (n.x = -t / 2,
            o.x = -t / 2,
            o.z = t),
            "right" === i && (n.x = t / 2,
            o.x = t / 2,
            o.z = t));
            var s = new yt.Geometry;
            return s.vertices = [new yt.Vector3(n.x,0,n.z), new yt.Vector3(o.x,0,o.z)],
            s
        }
        ))
          , ai = Object(r.a)((function e(t, a, i) {
            Object(l.a)(this, e);
            var n, o;
            "in" === a && ("left" === i && (n = 1 * Math.PI,
            o = t / 2),
            "right" === i && (n = 1.5 * Math.PI,
            o = -t / 2)),
            "out" === a && ("left" === i && (n = 0,
            o = -t / 2),
            "right" === i && (n = .5 * Math.PI,
            o = t / 2));
            for (var s = new yt.Geometry, r = 0; r <= 25; r++) {
                var c = r / 25 * Math.PI / 2 + n;
                s.vertices.push(new yt.Vector3(o + Math.cos(c) * t,0,Math.sin(c) * t))
            }
            return s
        }
        ))
          , ii = Object(r.a)((function e(t, a) {
            Object(l.a)(this, e);
            var i = {
                x: 0,
                z: 0
            }
              , n = {
                x: 0,
                z: 0
            }
              , o = {
                x: 0,
                z: 0
            }
              , s = {
                x: 0,
                z: 0
            };
            "in" === a && (i.x = -t / 2,
            n.x = -t / 2,
            n.z = -t / 2,
            o.x = t / 2,
            s.x = t / 2,
            s.z = -t / 2),
            "out" === a && (i.x = t / 2,
            n.x = t / 2,
            n.z = t / 2,
            o.x = -t / 2,
            s.x = -t / 2,
            s.z = t / 2);
            var r = new yt.Geometry;
            return r.vertices = [new yt.Vector3(i.x,0,i.z), new yt.Vector3(n.x,0,n.z), new yt.Vector3(i.x,0,i.z), new yt.Vector3(o.x,0,o.z), new yt.Vector3(s.x,0,s.z)],
            r
        }
        ))
          , ni = Object(r.a)((function e(t, a) {
            Object(l.a)(this, e);
            var i, n, o, s;
            "in" === a && (i = 1.5 * Math.PI,
            n = -t / 2,
            o = 1 * Math.PI,
            s = t / 2),
            "out" === a && (i = .5 * Math.PI,
            n = t / 2,
            o = 0,
            s = -t / 2);
            for (var r = new yt.Geometry, c = 0; c <= 25; c++) {
                var p = c / 25 * Math.PI / 2 + i;
                r.vertices.push(new yt.Vector3(n + Math.cos(p) * t / 2,0,Math.sin(p) * t / 2))
            }
            for (var d = 0; d <= 25; d++) {
                var h = d / 25 * Math.PI / 2 + o;
                r.vertices.push(new yt.Vector3(s + Math.cos(h) * t / 2,0,Math.sin(h) * t / 2))
            }
            return r
        }
        ))
          , oi = Object(r.a)((function e(t, a, i) {
            Object(l.a)(this, e);
            var n = new yt.Geometry;
            n.vertices = [new yt.Vector3(-t / 2,-a / 2,-i / 2), new yt.Vector3(-t / 2,-a / 2,i / 2), new yt.Vector3(t / 2,-a / 2,i / 2), new yt.Vector3(t / 2,-a / 2,-i / 2), new yt.Vector3(-t / 2,a / 2,-i / 2), new yt.Vector3(-t / 2,a / 2,i / 2), new yt.Vector3(t / 2,a / 2,i / 2), new yt.Vector3(t / 2,a / 2,-i / 2)],
            n.faces = [new yt.Face3(0,2,1), new yt.Face3(0,3,2), new yt.Face3(5,7,4), new yt.Face3(5,6,7), new yt.Face3(0,4,7), new yt.Face3(0,7,3), new yt.Face3(1,6,5), new yt.Face3(1,2,6), new yt.Face3(1,5,4), new yt.Face3(1,4,0), new yt.Face3(2,7,6), new yt.Face3(2,3,7)],
            n.faces[0].materialIndex = 0,
            n.faces[1].materialIndex = 0,
            n.faces[2].materialIndex = 1,
            n.faces[3].materialIndex = 1,
            n.faces[4].materialIndex = 2,
            n.faces[5].materialIndex = 2,
            n.faces[6].materialIndex = 3,
            n.faces[7].materialIndex = 3,
            n.faces[8].materialIndex = 4,
            n.faces[9].materialIndex = 4,
            n.faces[10].materialIndex = 5,
            n.faces[11].materialIndex = 5;
            var o = [];
            return o.push(new yt.Vector2(0,0)),
            o.push(new yt.Vector2(1,0)),
            o.push(new yt.Vector2(1,1)),
            o.push(new yt.Vector2(0,1)),
            n.faceVertexUvs[0] = [[o[0], o[2], o[3]], [o[0], o[1], o[2]], [o[0], o[2], o[3]], [o[0], o[1], o[2]], [o[0], o[3], o[2]], [o[0], o[2], o[1]], [o[0], o[2], o[3]], [o[0], o[1], o[2]], [o[0], o[3], o[2]], [o[0], o[2], o[1]], [o[0], o[2], o[3]], [o[0], o[1], o[2]]],
            n.computeFaceNormals(),
            n
        }
        ))
          , si = Object(r.a)((function e(t, a, i, n, o) {
            var s = this;
            Object(l.a)(this, e),
            this.rect = function(e, t, a, i, n, o) {
                var l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0;
                s.geometry.vertices.push(new yt.Vector3(e,a,n)),
                s.geometry.vertices.push(new yt.Vector3(e,a,o)),
                s.geometry.vertices.push(new yt.Vector3(t,a,o)),
                s.geometry.vertices.push(new yt.Vector3(t,a,n)),
                s.geometry.vertices.push(new yt.Vector3(e,i,n)),
                s.geometry.vertices.push(new yt.Vector3(e,i,o)),
                s.geometry.vertices.push(new yt.Vector3(t,i,o)),
                s.geometry.vertices.push(new yt.Vector3(t,i,n)),
                s.fv(l)
            }
            ,
            this.fv = function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                s.geometry.faces.push(new yt.Face3(s.vi + 0,s.vi + 2,s.vi + 1)),
                s.geometry.faces.push(new yt.Face3(s.vi + 0,s.vi + 3,s.vi + 2)),
                s.geometry.faces.push(new yt.Face3(s.vi + 5,s.vi + 7,s.vi + 4)),
                s.geometry.faces.push(new yt.Face3(s.vi + 5,s.vi + 6,s.vi + 7)),
                s.geometry.faces.push(new yt.Face3(s.vi + 3,s.vi + 4,s.vi + 7)),
                s.geometry.faces.push(new yt.Face3(s.vi + 3,s.vi + 0,s.vi + 4)),
                s.geometry.faces.push(new yt.Face3(s.vi + 1,s.vi + 6,s.vi + 5)),
                s.geometry.faces.push(new yt.Face3(s.vi + 1,s.vi + 2,s.vi + 6)),
                s.geometry.faces.push(new yt.Face3(s.vi + 0,s.vi + 5,s.vi + 4)),
                s.geometry.faces.push(new yt.Face3(s.vi + 0,s.vi + 1,s.vi + 5)),
                s.geometry.faces.push(new yt.Face3(s.vi + 2,s.vi + 7,s.vi + 6)),
                s.geometry.faces.push(new yt.Face3(s.vi + 2,s.vi + 3,s.vi + 7)),
                s.vi += 8,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 1,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 1,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 0,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 0,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 3,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 3,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 2,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 2,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 4,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 4,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 5,
                s.geometry.faces[s.fi++].materialIndex = 6 * e + 5,
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[3], s.uvs[1]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[2], s.uvs[3]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[3], s.uvs[1]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[2], s.uvs[3]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[3], s.uvs[1]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[2], s.uvs[3]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[3], s.uvs[1]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[2], s.uvs[3]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[3], s.uvs[1]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[2], s.uvs[3]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[3], s.uvs[1]]),
                s.geometry.faceVertexUvs[0].push([s.uvs[0], s.uvs[2], s.uvs[3]])
            }
            ,
            this.geometry = new yt.Geometry,
            this.D = 1e-4,
            this.vi = 0,
            this.fi = 0,
            this.uvs = [new yt.Vector2(0,0), new yt.Vector2(0,1), new yt.Vector2(1,0), new yt.Vector2(1,1)];
            var r, c, p, d, h, u, m = -t / 2 - .005, g = t / 2 + .005, f = a + i.support.space + i.support.top.height, b = (i.inside + i.support.depth / 2) * n * o;
            r = g,
            c = g + i.support.pole.width,
            p = 0,
            d = a,
            h = b - i.support.pole.depth / 2,
            u = b + i.support.pole.depth / 2,
            this.rect(r, c, p, d, h, u),
            r = m - i.support.pole.width,
            c = m,
            p = 0,
            d = f - i.support.top.height;
            for (var w = 1; w <= 2; w++) {
                switch (w) {
                case 1:
                    h = b - i.support.depth / 2;
                    break;
                case 2:
                    h = b + i.support.depth / 2 - i.support.pole.depth
                }
                u = h + i.support.pole.depth,
                this.rect(r, c, p, d, h, u)
            }
            p = f - i.support.top.height,
            d = f,
            h = b - i.support.depth / 2,
            u = b + i.support.depth / 2,
            this.rect(r, c, p, d, h, u),
            c = (r = m + i.support.pole.width - i.support.bottom.width) + i.support.bottom.width,
            p = 0,
            d = i.support.bottom.height,
            h = b - i.support.depth / 2,
            u = b + i.support.depth / 2,
            this.rect(r, c, p, d, h, u);
            var v = .04
              , y = .01
              , k = .2
              , x = .02;
            return c = (r = m - i.extra) + v,
            h = b - k / 2,
            u = b + k / 2,
            this.rect(r, c, 0, y, h, u),
            c = (r = m - i.extra + .005) + v - .01,
            h = b - x / 2,
            u = b + x / 2,
            this.rect(r, c, y, i.space, h, u, 1),
            this.geometry.computeFaceNormals(),
            this.geometry
        }
        ));
        var li = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).getColor = function() {
                    if (i.config.group) {
                        var e = "".concat(i.wall.config.kind, "s");
                        return Fa.a.hex(i.instance.config[e][i.config.group].systems[i.config.system].colors[i.config.color].color)
                    }
                    return !1
                }
                ,
                i.setStatus = function() {
                    return !("wicket" !== i.wall.config.kind && "gate" !== i.wall.config.kind || !i.wall.status || i.wall.error || !(i.wall.width <= 1e3))
                }
                ,
                i.calcPosition = function() {
                    return {
                        x: i.wall.position.normal.x,
                        y: i.wall.position.normal.y,
                        z: i.wall.position.normal.z
                    }
                }
                ,
                i.setMaterial = function() {
                    if (i.config.group && i.config.system && i.config.variant) {
                        var e = "".concat(i.wall.config.kind, "s");
                        if (i.config.type) {
                            var t = i.instance.config[e][i.config.group].systems[i.config.system].types[i.config.type].pattern
                              , a = i.instance.config[e][i.config.group].systems[i.config.system].types[i.config.type].variants[i.config.variant];
                            return P.merge(t, a)
                        }
                        var n = i.instance.config[e][i.config.group].systems[i.config.system].pattern
                          , o = i.instance.config[e][i.config.group].systems[i.config.system].variants[i.config.variant];
                        return P.merge(n, o)
                    }
                    return null
                }
                ,
                i.calcData = function() {
                    var e, t, a, n, o, s, l, r, c, p, d, h, u = {}, m = 0, g = 0, f = 0, b = 0, w = {
                        rotation: 0
                    };
                    if (i.status && i.material)
                        switch (i.wall.config.kind) {
                        case "wicket":
                            var v;
                            if ("in" === i.config.directionVertical && (e = 1,
                            "left" === i.config.directionHorizontal && (t = 1),
                            "right" === i.config.directionHorizontal && (t = -1)),
                            "out" === i.config.directionVertical && (e = -1,
                            "left" === i.config.directionHorizontal && (t = -1),
                            "right" === i.config.directionHorizontal && (t = 1)),
                            m = i.getMaxHeight(i.minSpace),
                            i.wall.width >= i.material.size.minWidth && i.wall.width <= i.material.size.maxWidth && (g = i.wall.width),
                            i.wall.width > i.material.size.maxWidth && (g = i.material.size.maxWidth),
                            m && g)
                                if (u.args = {
                                    direction: t > 0 ? "right" : "left",
                                    width: g,
                                    height: m - He.aN(null === (v = i.instance.getSystem().adds.wickets) || void 0 === v ? void 0 : v.space.top),
                                    custom: {
                                        space: parseFloat(i.config.space)
                                    }
                                },
                                u.data = Za.data(u.args, i.material),
                                f = u.data.height) {
                                    var y, k, x = i.getSpaceToTop(f, He.aN(null === (y = i.instance.getSystem().adds.wickets) || void 0 === y ? void 0 : y.space.top)), j = m > Mt.round(i.wall.pole1.calcFullHeight(1)), z = m > Mt.round(i.wall.pole2.calcFullHeight(2)), M = t > 0 && j || t < 0 && z, O = t < 0 && j || t > 0 && z, E = x + .65 * f, _ = (null === (k = i.material.frame) || void 0 === k ? void 0 : k.left) || {
                                        size: .08,
                                        depth: 0
                                    };
                                    b = i.rotation / 180 * Math.PI * t * e * -1,
                                    a = {
                                        width: i.material.poles.width,
                                        depth: i.material.poles.depth,
                                        height: f + x,
                                        left: j,
                                        right: z
                                    },
                                    h = Mt.rotatePoint({
                                        x: (g / 2 - (M ? a.width : 0) - i.material.thread.width / 2) * t,
                                        y: 0,
                                        z: 0
                                    }, i.wall.rotation.normal),
                                    n = {
                                        width: i.material.thread.width,
                                        height: i.material.thread.height ? i.material.thread.height : f,
                                        depth: i.material.thread.depth,
                                        position: {
                                            x: i.position.x - h.x,
                                            y: i.position.y + i.material.thread.height ? E : f / 2 + x,
                                            z: i.position.z - h.z
                                        }
                                    },
                                    h = Mt.rotatePoint({
                                        x: (g / 2 - (O ? a.width : 0) - i.material.hinge.width / 2) * t * -1,
                                        y: 0,
                                        z: 0
                                    }, i.wall.rotation.normal),
                                    o = {
                                        width: g - (a.width * (M + O) + n.width + i.material.hinge.width / 2),
                                        height: f,
                                        position: {
                                            x: i.position.x - h.x,
                                            y: i.position.y + x,
                                            z: i.position.z - h.z
                                        }
                                    },
                                    l = {
                                        width: i.material.hinge.width,
                                        space: i.material.hinge.space,
                                        rotation: {
                                            rotation: i.wall.rotation.normal + b,
                                            model: 1 === t ? Math.PI : 0,
                                            fixed: -b
                                        },
                                        position: {
                                            x: o.position.x,
                                            y: i.position.y + x,
                                            z: o.position.z
                                        }
                                    },
                                    h = Mt.rotatePoint({
                                        x: (o.width - _.size / 2) * t,
                                        y: 0,
                                        z: _.depth / 2 * e
                                    }, i.wall.rotation.normal + b),
                                    c = {
                                        rotation: {
                                            rotation: i.wall.rotation.normal + b,
                                            model: -1 === e ? Math.PI : 0,
                                            hand: t * e === 1 ? Math.PI : 0
                                        },
                                        position: {
                                            x: o.position.x - h.x,
                                            y: i.position.y + E,
                                            z: o.position.z - h.z
                                        }
                                    },
                                    h = Mt.rotatePoint({
                                        x: (o.width - _.size / 2) * t,
                                        y: 0,
                                        z: _.depth / 2 * e * -1
                                    }, i.wall.rotation.normal + b),
                                    p = {
                                        rotation: {
                                            rotation: i.wall.rotation.normal + b,
                                            model: 1 === e ? Math.PI : 0,
                                            hand: t * e === -1 ? Math.PI : 0
                                        },
                                        position: {
                                            x: o.position.x - h.x,
                                            y: i.position.y + E,
                                            z: o.position.z - h.z
                                        }
                                    },
                                    u.args.indent = {
                                        left: t > 0 ? g - o.width : i.material.hinge.width / 2,
                                        right: t > 0 ? i.material.hinge.width / 2 : g - o.width
                                    }
                                }
                            break;
                        case "gate":
                            var S, P;
                            if ("sliding" === i.config.type)
                                if ("front" === i.config.side && (e = 1),
                                "back" === i.config.side && (e = -1),
                                "left" === i.config.directionHorizontal && (t = 1),
                                "right" === i.config.directionHorizontal && (t = -1),
                                m = i.getMaxHeight(i.material.size.bottomSpace),
                                i.wall.width >= i.material.size.minWidth && i.wall.width <= i.material.size.maxWidth && (g = i.wall.width),
                                i.wall.width > i.material.size.maxWidth && (g = i.material.size.maxWidth),
                                m && g)
                                    u.args = {
                                        side: i.config.side,
                                        direction: i.config.directionHorizontal,
                                        width: g,
                                        height: m - He.aN(null === (S = i.instance.getSystem().adds.gates) || void 0 === S ? void 0 : S.space.top),
                                        custom: {
                                            space: parseFloat(i.config.space)
                                        }
                                    },
                                    u.data = $a.data(u.args, i.material),
                                    (f = u.data.height) && (o = {
                                        position: {
                                            x: i.position.x,
                                            y: i.position.y + i.material.size.bottomSpace,
                                            z: i.position.z
                                        }
                                    },
                                    w.rotation = -1 === t ? Math.PI : 0,
                                    w.inside = Math.max.apply(null, [i.wall.pole1.getBlockDepth(), i.wall.pole2.getBlockDepth()]) / 2,
                                    i.material.lamp && (h = Mt.rotatePoint({
                                        x: -g / 2 - i.material.support.pole.depth / 2,
                                        y: 0,
                                        z: (w.inside + i.material.support.depth / 2) * t
                                    }, i.wall.rotation.normal + (-1 === t ? Math.PI : 0)),
                                    d = {
                                        light: 0,
                                        position: {
                                            x: i.position.x + h.x,
                                            y: i.position.y + i.material.size.bottomSpace + f + i.material.support.space + i.material.support.top.height,
                                            z: i.position.z + h.z
                                        }
                                    }));
                            if ("swing" === i.config.type)
                                if ("in" === i.config.directionVertical && (e = 1),
                                "out" === i.config.directionVertical && (e = -1),
                                m = i.getMaxHeight(i.minSpace),
                                i.wall.width >= i.material.size.minWidth && i.wall.width <= i.material.size.maxWidth && (g = i.wall.width),
                                i.wall.width > i.material.size.maxWidth && (g = i.material.size.maxWidth),
                                m && g)
                                    if (u.args = {
                                        width: g / 2 - i.material.thread.width / 2,
                                        height: m - He.aN(null === (P = i.instance.getSystem().adds.gates) || void 0 === P ? void 0 : P.space.top),
                                        custom: {
                                            space: parseFloat(i.config.space)
                                        }
                                    },
                                    u.data = Za.data(u.args, i.material),
                                    f = u.data.height) {
                                        var C, D, R = i.getSpaceToTop(f, He.aN(null === (C = i.instance.getSystem().adds.gates) || void 0 === C ? void 0 : C.space.top)), F = m > Mt.round(i.wall.pole1.calcFullHeight(1)), V = m > Mt.round(i.wall.pole2.calcFullHeight(2)), I = R + .65 * f, L = (null === (D = i.material.frame) || void 0 === D ? void 0 : D.left) || {
                                            size: .08,
                                            depth: 0
                                        };
                                        b = i.rotation / 180 * Math.PI * e,
                                        a = {
                                            width: i.material.poles.width,
                                            depth: i.material.poles.depth,
                                            height: f + R,
                                            left: F,
                                            right: V
                                        },
                                        n = {
                                            width: i.material.thread.width,
                                            height: i.material.thread.height,
                                            depth: i.material.thread.depth,
                                            position: {
                                                x: i.position.x,
                                                y: i.position.y + I,
                                                z: i.position.z
                                            }
                                        },
                                        h = Mt.rotatePoint({
                                            x: -1 * (-g / 2 + (F ? a.width : 0) + i.material.hinge.width / 2),
                                            y: 0,
                                            z: 0
                                        }, i.wall.rotation.normal),
                                        o = {
                                            width: (g - (F ? a.width : 0) - (V ? a.width : 0) - n.width - i.material.hinge.width) / 2,
                                            height: f,
                                            position: {
                                                x: i.position.x - h.x,
                                                y: i.position.y + R,
                                                z: i.position.z - h.z
                                            }
                                        },
                                        h = Mt.rotatePoint({
                                            x: 1 * (-g / 2 + (V ? a.width : 0) + i.material.hinge.width / 2),
                                            y: 0,
                                            z: 0
                                        }, i.wall.rotation.normal),
                                        s = {
                                            width: (g - (F ? a.width : 0) - (V ? a.width : 0) - n.width - i.material.hinge.width) / 2,
                                            height: f,
                                            position: {
                                                x: i.position.x - h.x,
                                                y: i.position.y + R,
                                                z: i.position.z - h.z
                                            }
                                        },
                                        l = {
                                            width: i.material.hinge.width,
                                            space: i.material.hinge.space,
                                            rotation: {
                                                rotation: i.wall.rotation.normal + b,
                                                model: 0,
                                                fixed: -b
                                            },
                                            position: {
                                                x: o.position.x,
                                                y: i.position.y + R,
                                                z: o.position.z
                                            }
                                        },
                                        r = {
                                            width: i.material.hinge.width,
                                            space: i.material.hinge.space,
                                            rotation: {
                                                rotation: i.wall.rotation.normal - b,
                                                model: Math.PI,
                                                fixed: b
                                            },
                                            position: {
                                                x: s.position.x,
                                                y: i.position.y + R,
                                                z: s.position.z
                                            }
                                        },
                                        h = Mt.rotatePoint({
                                            x: s.width - L.size / 2,
                                            y: 0,
                                            z: L.depth / 2
                                        }, i.wall.rotation.normal - b),
                                        c = {
                                            rotation: {
                                                rotation: i.wall.rotation.normal - b,
                                                model: 0,
                                                hand: Math.PI
                                            },
                                            position: {
                                                x: s.position.x - h.x,
                                                y: i.position.y + I,
                                                z: s.position.z - h.z
                                            }
                                        },
                                        h = Mt.rotatePoint({
                                            x: s.width - L.size / 2,
                                            y: 0,
                                            z: -L.depth / 2
                                        }, i.wall.rotation.normal - b),
                                        p = {
                                            rotation: {
                                                rotation: i.wall.rotation.normal - b,
                                                model: Math.PI,
                                                hand: 0
                                            },
                                            position: {
                                                x: s.position.x - h.x,
                                                y: i.position.y + I,
                                                z: s.position.z - h.z
                                            }
                                        },
                                        u.args.indent = {
                                            left: i.material.hinge.width / 2,
                                            right: i.material.hinge.width / 2
                                        }
                                    }
                        }
                    return {
                        outRotation: e,
                        direction: t,
                        params: u,
                        maxHeight: m,
                        width: g,
                        height: f,
                        rotation: b,
                        pole: a,
                        thread: n,
                        span1: o,
                        span2: s,
                        hinge1: l,
                        hinge2: r,
                        handle1: c,
                        handle2: p,
                        additional: w,
                        lamp: d
                    }
                }
                ,
                i.do = function() {
                    i.instance.isLoading || (i.doSketchLine(),
                    i.doSketchCircle(),
                    i.instance.isMoving || (i.doGhost(),
                    i.doFixed(),
                    i.doMoving1(),
                    i.doMoving2(),
                    i.doThread(),
                    i.doHinge1(),
                    i.doHinge2(),
                    i.doHandle1(),
                    i.doHandle2()))
                }
                ,
                i.update = function() {
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.material = i.setMaterial(),
                    i.data = i.calcData(),
                    i.do()
                }
                ,
                i.reload = function() {
                    i.material = i.setMaterial(),
                    i.data = i.calcData(),
                    i.do(),
                    i.fencingsUpdate()
                }
                ,
                i.reset = function() {
                    i.config = {
                        status: !1,
                        group: null,
                        type: null,
                        variant: null,
                        color: null,
                        side: "back",
                        directionVertical: "in",
                        directionHorizontal: "left"
                    }
                }
                ,
                i.remove = function() {
                    i.three.scenes["2d"].remove(i.objects.sketchLine),
                    i.three.scenes["2d"].remove(i.objects.sketchCircle),
                    i.three.scenes["3d"].remove(i.objects.ghost),
                    i.three.scenes["3d"].remove(i.objects.fixed),
                    i.three.scenes["3d"].remove(i.objects.moving1),
                    i.three.scenes["3d"].remove(i.objects.moving2),
                    i.three.scenes["3d"].remove(i.objects.thread),
                    i.three.scenes["3d"].remove(i.objects.hinge1),
                    i.three.scenes["3d"].remove(i.objects.hinge2),
                    i.three.scenes["3d"].remove(i.objects.handle1),
                    i.three.scenes["3d"].remove(i.objects.handle2),
                    i.three.scenes["3d"].remove(i.objects.lamp)
                }
                ,
                i.displayOptions = function() {
                    ft(i.wall.config.kind, i.config, i),
                    i.instance.setHighlight(i.wall)
                }
                ,
                i.getMaxHeight = function() {
                    var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                    return (e = parseFloat(i.config.suggestedHeight) ? i.config.suggestedHeight : Math.max.apply(null, [i.wall.pole1.calcFullHeight(1), i.wall.pole2.calcFullHeight(2)]) - t) < i.material.size.minHeight && (e = i.material.size.minHeight),
                    e > i.material.size.maxHeight && (e = i.material.size.maxHeight),
                    Mt.round(e)
                }
                ,
                i.getSpaceToTop = function(e) {
                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0
                      , a = i.getMaxHeight(0)
                      , n = a - e;
                    return (!1 === i.minSpace || n >= i.minSpace) && (!1 === i.maxSpace || n <= i.maxSpace) ? n - t : i.minSpace
                }
                ,
                i.fencingsUpdate = function() {
                    i.wall.pole1 && i.wall.pole1.wall.fencing && i.wall.pole1.wall.fencing.reload(),
                    i.wall.pole2.next && i.wall.pole2.next.wall.fencing && i.wall.pole2.next.wall.fencing.reload()
                }
                ,
                i.animations = function() {
                    i.animation = i.three.animations.cycle("manufacture-".concat(i.wall.pole2.id), (function(e) {
                        switch (i.wall.config.kind) {
                        case "wicket":
                            e.data.revert ? i.rotation = 90 * (1 - e.state) : i.rotation = 90 * e.state;
                            break;
                        case "gate":
                            "swing" === i.config.type && (e.data.revert ? i.rotation = 90 * (1 - e.state) : i.rotation = 90 * e.state,
                            i.ledblock(e))
                        }
                        switch (i.data = i.calcData(),
                        i.wall.config.kind) {
                        case "gate":
                            if ("sliding" === i.config.type) {
                                var t = i.data.width - .02;
                                e.data.revert ? i.data.params.args.open = t * (1 - e.state) : i.data.params.args.open = t * e.state,
                                i.material.lamp && (i.data.lamp.light = e.state > 0 && e.state < 1 && e.time.current % 1e3 < 500 ? -3 : 0),
                                i.ledblock(e)
                            }
                        }
                        i.doMoving1(),
                        i.doMoving2(),
                        i.doHinge1(),
                        i.doHinge2(),
                        i.doHandle1(),
                        i.doHandle2()
                    }
                    ))
                }
                ,
                i.ledblock = function(e) {
                    var t = !(Math.floor(e.time.current / 1e3) % 2 || 1 === e.state);
                    i.wall.pole1.additionals.ledblock.status && i.wall.pole1.additionals.ledblock.material.blink && i.wall.pole1.additionals.ledblock.objects.model.traverse((function(e) {
                        e instanceof yt.Mesh && "Light" === e.name && "Light" === e.material.name && (t ? (e.material.color = new yt.Color(16299127),
                        e.material.emissive = new yt.Color(16750653)) : (e.material.color = new yt.Color(14737632),
                        e.material.emissive = new yt.Color(16777215)),
                        t || i.wall.pole1.additionals.ledblock.material.light ? e.material.emissiveIntensity = "night" !== i.instance.extensions.dayNight.status ? .25 : 1 : e.material.emissiveIntensity = 0)
                    }
                    )),
                    i.wall.pole2.additionals.ledblock.status && i.wall.pole2.additionals.ledblock.material.blink && i.wall.pole2.additionals.ledblock.objects.model.traverse((function(e) {
                        e instanceof yt.Mesh && "Light" === e.name && "Light" === e.material.name && (t ? (e.material.color = new yt.Color(16299127),
                        e.material.emissive = new yt.Color(16750653)) : (e.material.color = new yt.Color(14737632),
                        e.material.emissive = new yt.Color(16777215)))
                    }
                    ))
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.actions = new ei(e,i),
                i.minSpace = .05,
                i.maxSpace = .05,
                i.directionVerticalList = {
                    in: W("Do \u015brodka"),
                    out: W("Na zewn\u0105trz")
                },
                i.directionHorizontalList = {
                    left: W("Lewe"),
                    right: W("Prawe")
                },
                i.config = {
                    status: !1,
                    group: null,
                    system: null,
                    type: null,
                    variant: null,
                    space: null,
                    color: null,
                    side: "back",
                    directionVertical: "in",
                    directionHorizontal: "left",
                    suggestedHeight: null
                },
                i.objects = {
                    sketchLine: null,
                    sketchCircle: null,
                    ghost: null,
                    fixed: null,
                    moving1: null,
                    moving2: null,
                    thread: null,
                    hinge1: null,
                    hinge2: null,
                    handle1: null,
                    handle2: null,
                    lamp: null
                },
                i.wall = a,
                i.status = i.setStatus(),
                i.position = i.calcPosition(),
                i.material = i.setMaterial(),
                i.data = i.calcData(),
                i.rotation = 0,
                i.lock = {
                    handle1: null,
                    handle2: null,
                    lamp: null
                },
                i.do(),
                i.animations(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doSketchLine = function() {
                if (t.status && t.config.status && t.data.width && t.data.height) {
                    var e = null;
                    switch (t.wall.config.kind) {
                    case "wicket":
                        e = new ti(t.data.width,t.config.directionVertical,t.config.directionHorizontal);
                        break;
                    case "gate":
                        "swing" === t.config.type && (e = new ii(t.data.width,t.config.directionVertical))
                    }
                    if (e) {
                        var a = new yt.LineBasicMaterial({
                            color: 2763306
                        });
                        t.objects.sketchLine ? (t.objects.sketchLine.geometry = e,
                        t.objects.sketchLine.material = a) : (t.objects.sketchLine = new yt.Line(e,a),
                        t.three.scenes["2d"].add(t.objects.sketchLine)),
                        t.objects.sketchLine.position.set(t.position.x, t.instance.dpsi(0, 0), t.position.z),
                        t.objects.sketchLine.rotation.y = t.wall.rotation.normal,
                        t.objects.sketchLine.visible = !0
                    } else
                        t.objects.sketchLine && (t.objects.sketchLine.visible = !1)
                } else
                    t.objects.sketchLine && (t.objects.sketchLine.visible = !1)
            }
            ,
            this.doSketchCircle = function() {
                if (t.status && t.config.status && t.data.width && t.data.height) {
                    var e = null;
                    switch (t.wall.config.kind) {
                    case "wicket":
                        e = new ai(t.data.width,t.config.directionVertical,t.config.directionHorizontal);
                        break;
                    case "gate":
                        "swing" === t.config.type && (e = new ni(t.data.width,t.config.directionVertical))
                    }
                    if (e) {
                        var a = new yt.LineDashedMaterial({
                            color: 3815994,
                            dashSize: .04,
                            gapSize: .03
                        });
                        t.objects.sketchCircle ? (t.objects.sketchCircle.geometry = e,
                        t.objects.sketchCircle.material = a) : (t.objects.sketchCircle = new yt.Line(e,a),
                        t.three.scenes["2d"].add(t.objects.sketchCircle)),
                        t.objects.sketchCircle.computeLineDistances(),
                        t.objects.sketchCircle.position.set(t.position.x, t.instance.dpsi(0, 0), t.position.z),
                        t.objects.sketchCircle.rotation.y = t.wall.rotation.normal,
                        t.objects.sketchCircle.visible = !0
                    } else
                        t.objects.sketchCircle && (t.objects.sketchCircle.visible = !1)
                } else
                    t.objects.sketchCircle && (t.objects.sketchCircle.visible = !1)
            }
            ,
            this.doGhost = function() {
                if (t.status && !t.config.status) {
                    var e = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    })), new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.ghost), {}, {
                        color: 3618615
                    }))]
                      , a = new Ga("center",{
                        width: t.wall.width,
                        height: t.wall.fullHeight
                    },{
                        width: .02,
                        depth: .04,
                        space: 0
                    },{
                        height: .08,
                        depth: .02,
                        space: .02,
                        angle: 0
                    });
                    t.objects.ghost ? (t.objects.ghost.geometry = a,
                    t.objects.ghost.material = e) : (t.objects.ghost = new yt.Mesh(a,e),
                    t.objects.ghost.castShadow = t.instance.details.shadowsPrecision >= 100,
                    t.three.scenes["3d"].add(t.objects.ghost),
                    t.instance.getSystem().adds.wickets && t.instance.getSystem().adds.gates && t.events(t.objects.ghost)),
                    t.objects.ghost.position.set(t.position.x, t.position.y, t.position.z),
                    t.objects.ghost.rotation.y = t.wall.rotation.normal,
                    t.objects.ghost.visible = !0
                } else
                    t.objects.ghost && (t.objects.ghost.visible = !1)
            }
            ,
            this.doFixed = function() {
                if (t.status && t.config.status && t.data.width && t.data.height) {
                    var e;
                    switch (t.wall.config.kind) {
                    case "wicket":
                        e = t.doFixedWicket();
                        break;
                    case "gate":
                        "sliding" === t.config.type && (e = t.doFixedGateSliding()),
                        "swing" === t.config.type && (e = t.doFixedGateSwing())
                    }
                    e ? (t.objects.fixed ? (t.objects.fixed.geometry = e.geometry,
                    t.objects.fixed.material = e.material) : (t.objects.fixed = new yt.Mesh(e.geometry,e.material),
                    t.objects.fixed.castShadow = t.instance.details.shadowsPrecision >= 100,
                    t.three.scenes["3d"].add(t.objects.fixed),
                    t.events(t.objects.fixed)),
                    t.objects.fixed.position.set(t.position.x, t.position.y, t.position.z),
                    t.objects.fixed.rotation.y = t.wall.rotation.normal + t.data.additional.rotation,
                    t.objects.fixed.visible = !0) : t.objects.fixed && (t.objects.fixed.visible = !1)
                } else
                    t.objects.fixed && (t.objects.fixed.visible = !1)
            }
            ,
            this.doFixedWicket = function() {
                var e = t.instance.materials.metal(t.getColor());
                return {
                    material: [e, e, e, e, e, e],
                    geometry: new Aa(t.data.width,t.data.pole.width,t.data.pole.height,t.data.pole.depth,t.data.pole.left,t.data.pole.right,{
                        left: 0,
                        right: 0
                    })
                }
            }
            ,
            this.doFixedGateSliding = function() {
                var e = t.instance.materials.metal(t.getColor())
                  , a = t.instance.materials.metal(12632256);
                return {
                    material: [e, e, e, e, e, e, a, a, a, a, a, a],
                    geometry: new si(t.data.width,t.data.height + t.material.size.bottomSpace,{
                        inside: t.data.additional.inside,
                        support: t.material.support,
                        extra: t.material.extra.width,
                        space: t.material.size.bottomSpace
                    },t.data.outRotation,t.data.direction)
                }
            }
            ,
            this.doFixedGateSwing = function() {
                var e = t.instance.materials.metal(t.getColor());
                return {
                    material: [e, e, e, e, e, e],
                    geometry: new Aa(t.data.width,t.data.pole.width,t.data.pole.height,t.data.pole.depth,t.data.pole.left,t.data.pole.right,{
                        left: 0,
                        right: 0
                    })
                }
            }
            ,
            this.doMoving1 = function() {
                if (t.status && t.config.status && t.data.width && t.data.height) {
                    var e;
                    switch (t.wall.config.kind) {
                    case "wicket":
                        e = t.doMovingWicket();
                        break;
                    case "gate":
                        "sliding" === t.config.type && (e = t.doMovingGateSliding()),
                        "swing" === t.config.type && (e = t.doMoving1GateSwing())
                    }
                    e ? (t.objects.moving1 ? (t.objects.moving1.geometry = e.geometry,
                    t.objects.moving1.material = e.material) : (t.objects.moving1 = new yt.Mesh(e.geometry,e.material),
                    t.objects.moving1.castShadow = t.instance.details.shadowsPrecision >= 100,
                    t.three.scenes["3d"].add(t.objects.moving1),
                    t.events(t.objects.moving1)),
                    t.objects.moving1.position.set(t.data.span1.position.x, t.data.span1.position.y, t.data.span1.position.z),
                    t.objects.moving1.rotation.y = t.wall.rotation.normal + t.data.rotation,
                    t.objects.moving1.visible = !0) : t.objects.moving1 && (t.objects.moving1.visible = !1)
                } else
                    t.objects.moving1 && (t.objects.moving1.visible = !1)
            }
            ,
            this.doMoving2 = function() {
                if (t.status && t.config.status && t.data.width && t.data.height) {
                    var e;
                    switch (t.wall.config.kind) {
                    case "gate":
                        "swing" === t.config.type && (e = t.doMoving2GateSwing())
                    }
                    e ? (t.objects.moving2 ? (t.objects.moving2.geometry = e.geometry,
                    t.objects.moving2.material = e.material) : (t.objects.moving2 = new yt.Mesh(e.geometry,e.material),
                    t.objects.moving2.castShadow = t.instance.details.shadowsPrecision >= 100,
                    t.three.scenes["3d"].add(t.objects.moving2),
                    t.events(t.objects.moving2)),
                    t.objects.moving2.position.set(t.data.span2.position.x, t.data.span2.position.y, t.data.span2.position.z),
                    t.objects.moving2.rotation.y = t.wall.rotation.normal - t.data.rotation,
                    t.objects.moving2.visible = !0) : t.objects.moving2 && (t.objects.moving2.visible = !1)
                } else
                    t.objects.moving2 && (t.objects.moving2.visible = !1)
            }
            ,
            this.doMovingWicket = function() {
                var e = t.instance.materials.metal(t.getColor())
                  , a = t.instance.materials.sheet(t.getColor())
                  , i = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.perfor), {}, {
                    map: t.instance.textures.perfor[t.config.variant],
                    aoMap: t.instance.textures.perfor[t.config.variant]
                }))
                  , n = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.wood), {}, {
                    map: t.instance.textures.wood,
                    aoMap: t.instance.textures.wood
                }));
                return {
                    material: [e, e, e, e, e, e, a, a, a, a, a, a, i, i, i, i, i, i, n, n, n, n, n, n],
                    geometry: Za.geometry(t.data.params.args, t.material, t.data.params.data)
                }
            }
            ,
            this.doMovingGateSliding = function() {
                var e = t.instance.materials.metal(t.getColor())
                  , a = t.instance.materials.sheet(t.getColor())
                  , i = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.perfor), {}, {
                    map: t.instance.textures.perfor[t.config.variant],
                    aoMap: t.instance.textures.perfor[t.config.variant]
                }))
                  , n = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.wood), {}, {
                    map: t.instance.textures.wood,
                    aoMap: t.instance.textures.wood
                }));
                return {
                    material: [e, e, e, e, e, e, a, a, a, a, a, a, i, i, i, i, i, i, n, n, n, n, n, n],
                    geometry: $a.geometry(Object(k.a)(Object(k.a)({}, t.data.params.args), {
                        inside: t.data.additional.inside
                    }), t.material, t.data.params.data)
                }
            }
            ,
            this.doMoving1GateSwing = function() {
                var e = t.instance.materials.metal(t.getColor())
                  , a = t.instance.materials.sheet(t.getColor())
                  , i = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.perfor), {}, {
                    map: t.instance.textures.perfor[t.config.variant],
                    aoMap: t.instance.textures.perfor[t.config.variant]
                }))
                  , n = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.wood), {}, {
                    map: t.instance.textures.wood,
                    aoMap: t.instance.textures.wood
                }));
                return {
                    material: [e, e, e, e, e, e, a, a, a, a, a, a, i, i, i, i, i, i, n, n, n, n, n, n],
                    geometry: Za.geometry(Object(k.a)(Object(k.a)({}, t.data.params.args), {
                        direction: "left"
                    }), t.material, t.data.params.data)
                }
            }
            ,
            this.doMoving2GateSwing = function() {
                var e = t.instance.materials.metal(t.getColor())
                  , a = t.instance.materials.sheet(t.getColor())
                  , i = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.perfor), {}, {
                    map: t.instance.textures.perfor[t.config.variant],
                    aoMap: t.instance.textures.perfor[t.config.variant]
                }))
                  , n = new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, t.instance.params.wood), {}, {
                    map: t.instance.textures.wood,
                    aoMap: t.instance.textures.wood
                }));
                return {
                    material: [e, e, e, e, e, e, a, a, a, a, a, a, i, i, i, i, i, i, n, n, n, n, n, n],
                    geometry: Za.geometry(Object(k.a)(Object(k.a)({}, t.data.params.args), {
                        direction: "right"
                    }), t.material, t.data.params.data)
                }
            }
            ,
            this.doThread = function() {
                if (t.data.thread) {
                    var e;
                    switch (t.wall.config.kind) {
                    case "wicket":
                        e = t.doThreadWicket();
                        break;
                    case "gate":
                        t.config.type
                    }
                    e ? (t.objects.thread ? (t.objects.thread.geometry = e.geometry,
                    t.objects.thread.material = e.material) : (t.objects.thread = new yt.Mesh(e.geometry,e.material),
                    t.three.scenes["3d"].add(t.objects.thread),
                    t.events(t.objects.thread)),
                    t.objects.thread.position.set(t.data.thread.position.x, t.data.thread.position.y, t.data.thread.position.z),
                    t.objects.thread.rotation.y = t.wall.rotation.normal,
                    t.objects.thread.visible = !0) : t.objects.thread && (t.objects.thread.visible = !1)
                } else
                    t.objects.thread && (t.objects.thread.visible = !1)
            }
            ,
            this.doThreadWicket = function() {
                var e = t.instance.materials.metal(t.getColor());
                return {
                    material: [e, e, e, e, e, e],
                    geometry: new oi(t.data.thread.width - .005,t.data.thread.height,t.data.thread.depth)
                }
            }
            ,
            this.doHinge1 = function() {
                t.doHinge("hinge1")
            }
            ,
            this.doHinge2 = function() {
                t.doHinge("hinge2")
            }
            ,
            this.doHinge = function(e) {
                if (t.data[e]) {
                    if ("hinge" !== t.lock[e])
                        t.lock[e] = "hinge",
                        t.three.gltf.load("/assets/img/manufactures/".concat("hinge", ".gltf"), (function(a) {
                            t.objects[e] && t.three.scenes["3d"].remove(t.objects[e]),
                            t.objects[e] = a.scene,
                            t.objects[e].traverse((function(e) {
                                if (e instanceof yt.Mesh)
                                    switch (e.name) {
                                    case "H1":
                                    case "H1T":
                                    case "H1B":
                                    case "H2":
                                    case "H2T":
                                    case "H2B":
                                        e.material = t.instance.materials.chrome;
                                        break;
                                    default:
                                        e.material.metalness = 0,
                                        e.material.roughness = .7
                                    }
                            }
                            )),
                            t.three.scenes["3d"].add(t.objects[e]),
                            t.events(t.objects[e]),
                            t.doHinge(e)
                        }
                        ));
                    else if (t.objects[e]) {
                        var a = t.data[e].width
                          , i = [t.data[e].space, t.data.height - t.data[e].space];
                        t.objects[e].traverse((function(n) {
                            if (n instanceof yt.Mesh)
                                switch (n.name) {
                                case "B1":
                                case "X1":
                                    n.position.y = 100 * i[0],
                                    n.rotation.y = t.data[e].rotation.fixed;
                                    break;
                                case "H1":
                                    n.position.y = 100 * i[0];
                                    break;
                                case "H1T":
                                    n.position.y = 100 * (i[0] + a / 2);
                                    break;
                                case "H1B":
                                    n.position.y = 100 * (i[0] - a / 2);
                                    break;
                                case "B2":
                                case "X2":
                                    n.position.y = 100 * i[1],
                                    n.rotation.y = t.data[e].rotation.fixed;
                                    break;
                                case "H2":
                                    n.position.y = 100 * i[1];
                                    break;
                                case "H2T":
                                    n.position.y = 100 * (i[1] + a / 2);
                                    break;
                                case "H2B":
                                    n.position.y = 100 * (i[1] - a / 2)
                                }
                        }
                        )),
                        t.objects[e].position.set(t.data[e].position.x, t.data[e].position.y, t.data[e].position.z),
                        t.objects[e].rotation.y = t.data[e].rotation.rotation + t.data[e].rotation.model,
                        t.objects[e].scale.set(.01, .01, .01),
                        t.objects[e].visible = t.status
                    }
                } else
                    t.objects[e] && (t.objects[e].visible = !1)
            }
            ,
            this.doHandle1 = function() {
                t.doHandle("handle1")
            }
            ,
            this.doHandle2 = function() {
                t.doHandle("handle2")
            }
            ,
            this.doHandle = function(e) {
                if (t.data[e] && t.material.handle) {
                    var a = t.material.handle;
                    t.lock[e] !== a ? (t.lock[e] = a,
                    t.three.gltf.load("/assets/img/manufactures/handle/".concat(a, ".gltf"), (function(a) {
                        t.objects[e] && t.three.scenes["3d"].remove(t.objects[e]),
                        t.objects[e] = a.scene,
                        t.objects[e].traverse((function(e) {
                            if (e instanceof yt.Mesh)
                                switch (e.name) {
                                case "Back":
                                case "Bol":
                                case "Hand":
                                    e.material = t.instance.materials.chrome;
                                    break;
                                default:
                                    e.material.metalness = 0,
                                    e.material.roughness = .7
                                }
                        }
                        )),
                        t.three.scenes["3d"].add(t.objects[e]),
                        t.events(t.objects[e]),
                        t.doHandle(e)
                    }
                    ))) : t.objects[e] && (t.objects[e].traverse((function(a) {
                        if (a instanceof yt.Mesh)
                            switch (a.name) {
                            case "Hand":
                                a.rotation.z = t.data[e].rotation.hand
                            }
                    }
                    )),
                    t.objects[e].position.set(t.data[e].position.x, t.data[e].position.y, t.data[e].position.z),
                    t.objects[e].rotation.y = t.data[e].rotation.rotation + t.data[e].rotation.model,
                    t.objects[e].visible = t.status)
                } else
                    t.objects[e] && (t.objects[e].visible = !1)
            }
            ,
            this.doLamp = function() {
                if (t.data.lamp) {
                    "lamp" !== t.lock.lamp ? (t.lock.lamp = "lamp",
                    t.three.gltf.load("/assets/img/manufactures/".concat("lamp", ".gltf"), (function(e) {
                        t.objects.lamp && t.three.scenes["3d"].remove(t.objects.lamp),
                        t.objects.lamp = e.scene,
                        t.objects.lamp.traverse((function(e) {
                            e instanceof yt.Mesh && (e.material.metalness = 0,
                            e.material.roughness = 1)
                        }
                        )),
                        t.objects.lamp.scale.set(.01, .01, .01),
                        t.three.scenes["3d"].add(t.objects.lamp),
                        t.doLamp()
                    }
                    ))) : t.objects.lamp && (t.objects.lamp.traverse((function(e) {
                        e instanceof yt.Mesh && "G" === e.name && (e.material.metalness = t.data.lamp.light)
                    }
                    )),
                    t.objects.lamp.position.set(t.data.lamp.position.x, t.data.lamp.position.y, t.data.lamp.position.z),
                    t.objects.lamp.rotation.y = t.wall.rotation.normal + t.data.additional.rotation,
                    t.objects.lamp.visible = !!t.data.lamp)
                } else
                    t.objects.lamp && (t.objects.lamp.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                )),
                e.on("rightclick", (function() {
                    if (t.status && t.config.status) {
                        var e = "wicket" === t.wall.config.kind ? 1200 : 1e3 * t.material.opentime
                          , a = "wicket" === t.wall.config.kind || "swing" === t.config.type ? t.rotation > 0 : t.data.params.args.open;
                        t.animation.start(e, {
                            revert: a
                        })
                    }
                }
                ))
            }
        }
        )))
          , ri = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                i.target.config = e,
                i.target.reload(),
                i.instance.setModified()
            }
            ,
            this.instance = t,
            this.target = a
        }
        ));
        var ci = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).setStatus = function() {
                    return !("wall" !== i.wall.config.kind && "space" !== i.wall.config.kind || !i.wall.status || i.wall.error || !(i.wall.width > i.minWidth + .095))
                }
                ,
                i.setMaterial = function() {
                    var e;
                    return i.config.group && i.config.model ? null === (e = i.instance.config.panels[i.config.group]) || void 0 === e ? void 0 : e.models[i.config.model] : null
                }
                ,
                i.calcData = function() {
                    if (i.material) {
                        var e = !i.wall.pole1.isFirst() && i.wall.pole1.config.virtual && i.wall.pole1.wall.panels.status ? 1 : 0
                          , t = !i.wall.pole2.isLast() && i.wall.pole2.config.virtual && i.wall.pole2.next.wall.panels.status ? 1 : 0
                          , a = !i.wall.pole1.isFirst() && i.wall.pole1.config.virtual && i.wall.pole1.wall.panels.status && i.wall.pole1.wall.panels.getHeight() >= i.getHeight() ? 0 : 1
                          , n = !i.wall.pole2.isLast() && i.wall.pole2.config.virtual && i.wall.pole2.next.wall.panels.status && i.wall.pole2.next.wall.panels.getHeight() > i.getHeight() ? 0 : 1
                          , o = i.material.variant.pole - 2 * i.material.variant.slip
                          , s = (a + n) * (i.material.variant.pole - i.material.variant.slip)
                          , l = i.material.variant.width + o
                          , r = i.wall.width
                          , c = {
                            start: i.material.variant.pole / 2 * e,
                            end: i.material.variant.pole / 2 * t
                        }
                          , p = r + c.start + c.end
                          , d = Math.floor((p + (o - s)) / l)
                          , h = p - (d * l + (a + n) * i.material.variant.pole / 2) - i.material.variant.slip
                          , u = i.material.variant.width
                          , m = 0;
                        return h >= .01 && (h < i.minWidth ? u = m = (u + h) / 2 : m = h),
                        {
                            start: a,
                            end: n,
                            pole: o,
                            origin: c,
                            panels: d + (h >= .02 ? 1 : 0),
                            prelast: u,
                            last: m
                        }
                    }
                    return null
                }
                ,
                i.do = function() {
                    i.instance.isLoading || i.instance.isMoving || i.doEpisode()
                }
                ,
                i.update = function() {
                    i.status = i.setStatus(),
                    i.material = i.setMaterial(),
                    i.data = i.calcData(),
                    i.do()
                }
                ,
                i.reload = function() {
                    i.material = i.setMaterial(),
                    i.data = i.calcData(),
                    i.do(),
                    i.wall.combo.update(),
                    i.wall.fencing.update(),
                    i.wall.pole1.wall.panels.update(),
                    i.wall.pole2.next.wall.panels.update()
                }
                ,
                i.reset = function() {
                    i.config = {
                        group: null,
                        model: null,
                        height: null
                    }
                }
                ,
                i.remove = function() {
                    i.three.scenes["3d"].remove(i.objects.episode)
                }
                ,
                i.displayOptions = function() {
                    ft("panels", i.config, i),
                    i.instance.setHighlight(i.wall)
                }
                ,
                i.getStatus = function() {
                    return i.config.group && i.config.model && i.config.height
                }
                ,
                i.getHeight = function() {
                    return i.config.group && i.config.model && i.config.height ? parseFloat(i.config.height.replace("_", "")) : 0
                }
                ,
                i.getWallHeight = function() {
                    return "space" === i.wall.config.kind ? 0 : i.wall.height + i.wall.peakMaterial.height + (i.wall.peakMaterial.tip ? i.wall.peakMaterial.tip.height : 0)
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.actions = new ri(e,i),
                i.minWidth = .2,
                i.config = {
                    group: null,
                    model: null,
                    height: null
                },
                i.objects = {
                    episode: null
                },
                i.wall = a,
                i.status = i.setStatus(),
                i.material = i.setMaterial(),
                i.data = i.calcData(),
                i.elements = [],
                i.lock = {
                    episode: null
                },
                i.valuation = {},
                i.do(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doEpisode = function() {
                if (t.valuation = {},
                t.status && t.material) {
                    var e = "".concat(t.config.group, "/models/").concat(t.config.model, "/model");
                    if (t.lock.episode !== "".concat(e).concat(t.config.height))
                        t.lock.episode = "".concat(e).concat(t.config.height),
                        t.three.gltf.load("/assets/new/panels/".concat(e, ".gltf"), (function(e) {
                            t.elements.panel = {},
                            e.scene.traverse((function(e) {
                                if (e instanceof yt.Mesh) {
                                    switch (e.material.name) {
                                    case "Material":
                                        e.material = t.instance.materials.panels.material;
                                        break;
                                    case "Inside":
                                        e.material = t.instance.materials.panels.inside;
                                        break;
                                    case "Mokka":
                                        e.material = t.instance.materials.panels.mokka
                                    }
                                    switch (e.parent.name) {
                                    case "Slat_L":
                                    case "Slat_R":
                                        var a = t.material.heights[t.config.height].count;
                                        a < 6 && t.cut(e, {
                                            y: [.295 * (6 - a)]
                                        }),
                                        t.elements.panel[e.parent.name.replace("Slat_", "slat")] = e.parent.clone();
                                        break;
                                    case "Adapter":
                                        t.elements.panel.adapter = e.clone();
                                        break;
                                    case "Inside":
                                        t.elements.panel.inside = e.clone();
                                        break;
                                    case "Panel_Special_22":
                                    case "Panel_Special_27":
                                        e.castShadow = !0,
                                        t.elements.panel.panel = e.clone();
                                        break;
                                    default:
                                        "Panel_Pattern" === e.name && (e.castShadow = !0,
                                        t.elements.panel.pattern = e.clone())
                                    }
                                }
                            }
                            )),
                            t.three.gltf.load("/assets/new/panels/".concat(t.config.group, "/additionals/pole_").concat(t.material.heights[t.config.height].pole, ".gltf"), (function(e) {
                                t.elements.pole = e.scene.clone(),
                                t.elements.pole.traverse((function(e) {
                                    if (e instanceof yt.Mesh)
                                        switch (e.material.name) {
                                        case "Material":
                                            e.material = t.instance.materials.panels.material;
                                            break;
                                        case "Roof":
                                            e.material = t.instance.materials.panels.roof
                                        }
                                }
                                )),
                                t.objects.episode || (t.objects.episode = new yt.Scene,
                                t.three.scenes["3d"].add(t.objects.episode),
                                t.events(t.objects.episode)),
                                t.doEpisode()
                            }
                            ))
                        }
                        ));
                    else if (t.objects.episode) {
                        var a;
                        t.objects.episode.position.set(t.wall.position.normal.x, t.getWallHeight(), t.wall.position.normal.z),
                        t.objects.episode.rotation.y = t.wall.rotation.normal,
                        t.objects.episode.visible = !0,
                        (a = t.objects.episode.remove).call.apply(a, [t.objects.episode].concat(Object(Va.a)(t.objects.episode.children)));
                        for (var i = t.data.panels, n = t.material.heights[t.config.height].count, o = {
                            w: -t.wall.width / 2 - t.data.origin.start,
                            h: t.material.variant.bottom
                        }, s = 0, l = 0, r = 1; r <= i + 1; r++) {
                            if (l = 0,
                            t.data.start && 1 === r || r > 1 && r <= i || t.data.end && r === i + 1) {
                                var c = t.elements.pole.clone();
                                c.position.x = o.w + s + t.material.variant.pole / 2,
                                t.objects.episode.add(c),
                                t.add("poles", ["pole", t.config.height.replace("_", "")], "czarny"),
                                s += t.material.variant.pole
                            } else
                                s += t.material.variant.pole / 2;
                            if (r < i || r === i && t.data.last) {
                                var p = void 0
                                  , d = void 0;
                                r === i ? (p = t.data.last,
                                d = t.material.variant.width - p) : r === i - 1 ? (p = t.data.prelast,
                                d = t.material.variant.width - p) : (p = t.material.variant.width,
                                d = 0);
                                var h = o.w + s - t.material.variant.slip
                                  , u = t.elements.panel.slatL.clone();
                                u.position.x = h + .001,
                                u.position.y = o.h + l,
                                t.objects.episode.add(u);
                                var m = t.elements.panel.slatR.clone();
                                m.position.x = h + p - .001,
                                m.position.y = o.h + l,
                                t.objects.episode.add(m);
                                for (var g = 1; g <= n + 1; g++) {
                                    var f = t.elements.panel.adapter.clone();
                                    if (f.position.x = h,
                                    f.position.y = o.h + l,
                                    t.objects.episode.add(f),
                                    d && t.cut(f, {
                                        x: [d]
                                    }),
                                    l += t.material.variant.adapter,
                                    g <= n)
                                        if (t.material.pattern && g === n - 1) {
                                            var b = t.elements.panel.pattern.clone();
                                            b.position.x = h,
                                            b.position.y = o.h + l,
                                            t.objects.episode.add(b),
                                            d && t.crop(b, {
                                                x: [d]
                                            }),
                                            l += t.material.pattern
                                        } else {
                                            var w = t.elements.panel.panel.clone();
                                            w.position.x = h,
                                            w.position.y = o.h + l,
                                            t.objects.episode.add(w),
                                            d && t.cut(w, {
                                                x: [d]
                                            }),
                                            l += t.material.panel
                                        }
                                    if (t.material.inside && g <= n - 1) {
                                        var v = t.elements.panel.adapter.clone();
                                        v.position.x = h,
                                        v.position.y = o.h + l,
                                        t.objects.episode.add(v),
                                        d && t.cut(v, {
                                            x: [d]
                                        }),
                                        l += t.material.variant.adapter;
                                        var y = t.elements.panel.inside.clone();
                                        y.position.x = h,
                                        y.position.y = o.h + l,
                                        t.objects.episode.add(y),
                                        d && t.cut(y, {
                                            x: [d]
                                        }),
                                        l += t.material.inside
                                    }
                                }
                                p > t.material.variant.width / 2 ? t.add("panels", [t.config.model, t.config.height.replace("_", ""), "150"], "mokka") : t.add("panels", [t.config.model, t.config.height.replace("_", ""), "75"], "mokka"),
                                s += p - 2 * t.material.variant.slip
                            }
                        }
                    }
                } else
                    t.objects.episode && (t.objects.episode.visible = !1)
            }
            ,
            this.doEpisodeConstant = function() {
                if (t.valuation = {},
                t.status && t.material) {
                    var e = "".concat(t.config.model, "/").concat(t.config.height.replace("_", ""));
                    if (t.lock.episode !== e)
                        t.lock.episode = e,
                        t.three.gltf.load("/assets/new/panels/".concat(t.config.group, "/models/").concat(e, "/150.gltf"), (function(a) {
                            t.elements.panel150 = a.scene.clone(),
                            t.elements.panel150.traverse((function(e) {
                                e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.panels.material),
                                "Inside" === e.material.name && (e.material = t.instance.materials.panels.inside),
                                "Mokka" === e.material.name && (e.material = t.instance.materials.panels.mokka),
                                "Slat" === e.name && (e.visible = !1))
                            }
                            )),
                            t.three.gltf.load("/assets/new/panels/".concat(t.config.group, "/models/").concat(e, "/75.gltf"), (function(e) {
                                t.elements.panel75 = e.scene.clone(),
                                t.elements.panel75.traverse((function(e) {
                                    e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.panels.material),
                                    "Inside" === e.material.name && (e.material = t.instance.materials.panels.inside),
                                    "Mokka" === e.material.name && (e.material = t.instance.materials.panels.mokka),
                                    "Slat" === e.name && (e.visible = !1))
                                }
                                )),
                                t.three.gltf.load("/assets/new/panels/".concat(t.config.group, "/additionals/pole_").concat(t.material.heights[t.config.height].pole, ".gltf"), (function(e) {
                                    t.elements.pole = e.scene.clone(),
                                    t.elements.pole.traverse((function(e) {
                                        e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.panels.material),
                                        "Roof" === e.material.name && (e.material = t.instance.materials.panels.roof))
                                    }
                                    )),
                                    t.objects.episode || (t.objects.episode = new yt.Scene,
                                    t.three.scenes["3d"].add(t.objects.episode),
                                    t.events(t.objects.episode)),
                                    t.doEpisode()
                                }
                                ))
                            }
                            ))
                        }
                        ));
                    else if (t.objects.episode) {
                        var a, i, n, o;
                        if ((a = t.objects.episode.remove).call.apply(a, [t.objects.episode].concat(Object(Va.a)(t.objects.episode.children))),
                        t.data.join)
                            i = t.wall.width,
                            n = t.wall.position.normal,
                            o = t.wall.rotation.normal;
                        else {
                            var s = t.wall.pole1.wall.panels.data.width - (t.wall.pole1.calcAngle() ? t.wall.pole1.wall.panels.material.variant.pole / 2 : 0)
                              , l = Mt.rotatePoint({
                                x: s,
                                y: 0,
                                z: 0
                            }, t.wall.pole1.wall.rotation.normal)
                              , r = t.wall.pole1.wall.data.normal.point1
                              , c = {
                                x: r.x + l.x,
                                y: 0,
                                z: r.z + l.z
                            }
                              , p = t.wall.data.normal.point2
                              , d = Mt.getCenter({
                                x: c.x,
                                y: c.z
                            }, {
                                x: p.x,
                                y: p.z
                            });
                            i = Mt.getDistance({
                                x: c.x,
                                y: c.z
                            }, {
                                x: p.x,
                                y: p.z
                            }),
                            n = {
                                x: d.x,
                                y: 0,
                                z: d.y
                            },
                            o = Mt.getRotation({
                                x: c.x,
                                y: c.z
                            }, {
                                x: p.x,
                                y: p.z
                            })
                        }
                        for (var h = t.data.intervals + t.data.rest, u = -i / 2, m = 0, g = 1; g <= h; g++) {
                            if (t.data.start || g > 1) {
                                var f = t.elements.pole.clone();
                                f.position.x = u + m + t.material.variant.pole / 2,
                                t.objects.episode.add(f),
                                m += t.material.variant.pole,
                                t.add("poles", ["pole", t.config.height.replace("_", "")], "czarny")
                            } else
                                m += t.material.variant.pole / 2;
                            if (t.data.rest && g === h) {
                                var b = t.elements.panel75.clone();
                                b.position.x = u + m - t.material.variant.slip,
                                b.position.y = .055,
                                t.objects.episode.add(b),
                                m += t.material.variant.width / 2 - 2 * t.material.variant.slip,
                                t.add("panels", [t.config.model, t.config.height.replace("_", ""), "75"], "mokka")
                            } else {
                                var w = t.elements.panel150.clone();
                                w.position.x = u + m - t.material.variant.slip,
                                w.position.y = .055,
                                t.objects.episode.add(w),
                                m += t.material.variant.width - 2 * t.material.variant.slip,
                                t.add("panels", [t.config.model, t.config.height.replace("_", ""), "150"], "mokka")
                            }
                            if (t.data.end && g === h) {
                                var v = t.elements.pole.clone();
                                v.position.x = u + m + t.material.variant.pole / 2,
                                t.objects.episode.add(v),
                                t.add("poles", ["pole", t.config.height.replace("_", "")], "czarny")
                            }
                        }
                        t.objects.episode.position.set(n.x, t.getWallHeight(), n.z),
                        t.objects.episode.rotation.y = o,
                        t.objects.episode.visible = !0
                    }
                } else
                    t.objects.episode && (t.objects.episode.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
            ,
            this.add = function(e, a, i) {
                var n = "".concat(a.join("_"), "_").concat(i);
                t.valuation[n] ? t.valuation[n].quantity++ : t.valuation[n] = {
                    subtype: e,
                    group: t.config.group,
                    element: a.join("_"),
                    color: i,
                    quantity: 1
                }
            }
            ,
            this.size = function(e) {
                return (new yt.Box3).setFromObject(e.clone()).getSize(new yt.Vector3)
            }
            ,
            this.center = function(e) {
                return (new yt.Box3).setFromObject(e.clone()).getCenter(new yt.Vector3)
            }
            ,
            this.cut = function(e) {
                var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                e.geometry = e.geometry.clone();
                for (var i = t.size(e), n = e.geometry.attributes, o = n.position, s = n.uv, l = 0; l < o.count; l++) {
                    if (a.x) {
                        var r = a.x[1] || i.x / 2
                          , c = a.x[0];
                        o.getX(l) > r && (o.setX(l, o.getX(l) - c),
                        s.setX(l, s.getX(l) - c))
                    }
                    if (a.y) {
                        var p = a.y[1] || i.y / 2
                          , d = a.y[0];
                        o.getY(l) > p && (o.setY(l, o.getY(l) - d),
                        s.setY(l, s.getY(l) - d))
                    }
                    if (a.z) {
                        var h = a.z[1] || i.z / 2
                          , u = a.z[0];
                        o.getZ(l) > h && (o.setZ(l, o.getZ(l) - u),
                        s.setZ(l, s.getZ(l) - u))
                    }
                }
            }
            ,
            this.crop = function(e) {
                var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                e.material = e.material.clone(),
                e.parent && e.parent.updateMatrixWorld();
                var i = t.size(e);
                if (a.x) {
                    var n = i.x
                      , o = a.x[0];
                    e.position.x += n - o;
                    var s = e.getWorldPosition(new yt.Vector3)
                      , l = e.getWorldQuaternion(new yt.Quaternion)
                      , r = new yt.Vector3(-1,0,0);
                    r.applyQuaternion(l),
                    e.material.clippingPlanes = [new yt.Plane(r,s.x * -r.x + s.y * -r.y + s.z * -r.z)],
                    e.material.clipShadows = !0,
                    e.position.x -= n - o
                }
            }
        }
        )));
        var pi = function(e) {
            function t(e, a, i, n) {
                var o, s, r, h;
                return Object(l.a)(this, t),
                s = this,
                r = t,
                r = Object(d.a)(r),
                (o = Object(c.a)(s, Object(p.a)() ? Reflect.construct(r, h || [], Object(d.a)(s).constructor) : r.apply(s, h))).getWallTextures = function() {
                    return o.instance.textures.systems[o.instance.system].blocks[o.instance.blocksFamily][o.instance.blocksColor].wall[o.config.blockMaterialId].texture
                }
                ,
                o.getPeakTextures = function() {
                    return o.instance.textures.systems[o.instance.system].peaks[o.instance.peaksFamily][o.instance.peaksColor][o.config.peakMaterialId].texture
                }
                ,
                o.getBlockMaterialsList = function() {
                    var e = [];
                    return P.entries(o.instance.getWallMaterialsList()).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        (!o.pole1 || o.pole1.config.virtual || P.in(o.pole1.config.blockMaterialId, n.support)) && (!o.pole2 || o.pole2.config.virtual || P.in(o.pole2.config.blockMaterialId, n.support)) && (e[i] = n.label)
                    }
                    )),
                    e
                }
                ,
                o.getBlockMaterialId = function(e, t) {
                    var a = o.blocksFamily.wall.materials[e];
                    return !a.disabled || a.disabled.colors && !P.in(t, a.disabled.colors) ? e : a.disabled.material
                }
                ,
                o.getPeakMaterialId = function(e) {
                    var t = o.peaksFamily.materials[e];
                    if (t.disabled && (!t.disabled.colors || P.in(o.instance.peaksColor, t.disabled.colors))) {
                        if (t.disabled.target) {
                            var a = o.getBlockMaterialId(o.config.blockMaterialId, o.instance.peaksColor);
                            a !== o.config.blockMaterialId && o.setBlockMaterialId(a)
                        }
                        return t.disabled.material
                    }
                    return e
                }
                ,
                o.setBlockMaterial = function() {
                    return o.blocksFamily.wall.materials[o.config.blockMaterialId]
                }
                ,
                o.setPeakMaterialId = function() {
                    var e = o.blockMaterial.peak3[o.instance.peaksFamily];
                    return o.getPeakMaterialId(e)
                }
                ,
                o.setPeakMaterial = function() {
                    return o.config.peakMaterialId = o.setPeakMaterialId(),
                    o.peaksFamily.materials[o.config.peakMaterialId]
                }
                ,
                o.setStatus = function() {
                    return (!o.instance.lastPole || o.instance.lastPole.id !== o.pole1.id) && !o.pole1.config.polygonBreak
                }
                ,
                o.calcWidth = function() {
                    return o.data.normal.distance
                }
                ,
                o.calcFullWidth = function() {
                    return o.data.full.distance
                }
                ,
                o.calcDepth = function() {
                    return o.config.size.depth * o.blockMaterial.block.depth
                }
                ,
                o.calcHeight = function() {
                    return o.config.size.height * o.blockMaterial.block.height
                }
                ,
                o.calcFullHeight = function() {
                    return Math.min.apply(null, [o.pole1.calcFullHeight(1), o.pole2.calcFullHeight(2)])
                }
                ,
                o.calcDescriptionWallWidth = function() {
                    var e = o.width;
                    return e += Math.abs(o.data.normal.indent1 * o.depth / 2),
                    e += Math.abs(o.data.normal.indent2 * o.depth / 2)
                }
                ,
                o.calcWallWidth = function() {
                    var e = o.fullWidth;
                    return e += Math.abs(o.data.full.indent1 * o.depth / 2),
                    e += Math.abs(o.data.full.indent2 * o.depth / 2)
                }
                ,
                o.calcWallElements = function() {
                    var e = o.pole1 && o.pole1.wall ? o.pole1.wall.data.elements.add2 : null
                      , t = o.pole2 && o.pole2.next && o.pole2.next.wall ? o.pole2.next.wall.data.elements.add1 : null;
                    return {
                        add1: {
                            size: {
                                height: e ? e.sizeHeight : 0
                            },
                            dimension: {
                                width: e ? e.width : 0
                            },
                            sizePosition: e ? e.sizePositionY : 0,
                            rightAngle: o.pole1 ? o.instance.isRightAngle(o.pole1.angle) : null
                        },
                        add2: {
                            size: {
                                height: t ? t.sizeHeight : 0
                            },
                            dimension: {
                                width: t ? t.width : 0
                            },
                            sizePosition: t ? t.sizePositionY : 0,
                            rightAngle: o.pole2 ? o.instance.isRightAngle(o.pole2.angle) : null
                        }
                    }
                }
                ,
                o.calcPeakWidth = function() {
                    var e = o.width;
                    return e += Math.abs(o.data.normal.indent1 * o.peakMaterial.depth / 2),
                    e += Math.abs(o.data.normal.indent2 * o.peakMaterial.depth / 2)
                }
                ,
                o.calcData = function() {
                    var e = {
                        x: (o.pole1.position.x + o.pole2.position.x) / 2,
                        y: 0,
                        z: (o.pole1.position.z + o.pole2.position.z) / 2
                    }
                      , t = o.calcDataNormal(e)
                      , a = o.calcDataFull(e)
                      , i = o.calcDataElements()
                      , n = !1;
                    return "wall" === o.config.kind ? (o.rotation && (Math.abs(o.rotation.normal - o.pole1.rotation),
                    Math.PI),
                    (a.indent1 * o.depth > o.blockMaterial.block.width || a.indent1 * o.depth < -o.blockMaterial.block.width) && (n = !0,
                    t.indent1 = 0,
                    t.indent2 = 0,
                    a.indent1 = 0,
                    a.indent2 = 0),
                    (a.indent2 * o.depth > o.blockMaterial.block.width || a.indent2 * o.depth < -o.blockMaterial.block.width) && (n = !0,
                    t.indent1 = 0,
                    t.indent2 = 0,
                    a.indent1 = 0,
                    a.indent2 = 0)) : (t.indent1 = 0,
                    t.indent2 = 0,
                    a.indent1 = 0,
                    a.indent2 = 0),
                    o.error = n,
                    {
                        normal: t,
                        full: a,
                        elements: i
                    }
                }
                ,
                o.calcDataNormal = function(e) {
                    var t = o.pole1.getHook(e, 1, !1)
                      , a = o.pole2.getHook(e, 2, !1);
                    return o.calcDataDetails(t, a)
                }
                ,
                o.calcDataFull = function(e) {
                    var t = o.pole1.getHook(e, 1, !0)
                      , a = o.pole2.getHook(e, 2, !0);
                    return o.calcDataDetails(t, a)
                }
                ,
                o.calcDataDetails = function(e, t) {
                    var a = Mt.getDistance({
                        x: e.x,
                        y: e.z
                    }, {
                        x: t.x,
                        y: t.z
                    })
                      , i = Mt.getRotation({
                        x: e.x,
                        y: e.z
                    }, {
                        x: t.x,
                        y: t.z
                    })
                      , n = 0
                      , s = 0;
                    return o.pole1.config.virtual && (0 === (n = o.pole1.angle) && (n = 180),
                    n = n > 0 ? 180 - n : -180 - n),
                    o.pole2.config.virtual && (0 === (s = o.pole2.angle) && (s = 180),
                    s = s > 0 ? 180 - s : -180 - s),
                    {
                        point1: e,
                        point2: t,
                        distance: a,
                        rotation: i,
                        indent1: -1 * Math.tan(n / 2 * Math.PI / 180),
                        indent2: 1 * Math.tan(s / 2 * Math.PI / 180)
                    }
                }
                ,
                o.calcDataElements = function() {
                    var e, t, a = o.status && "wall" === o.config.kind ? o.height : 0, i = o.status && "wall" === o.config.kind ? o.config.size.height : 0, n = {
                        width: o.fullWidth,
                        height: a,
                        sizeHeight: i,
                        cut1: 0,
                        cut2: 0,
                        positionY: 0,
                        sizePositionY: 0
                    }, s = {
                        width: 0,
                        height: 0,
                        sizeHeight: 0,
                        cut1: 0,
                        cut2: 0,
                        positionY: 0,
                        sizePositionY: 0
                    }, l = {
                        width: 0,
                        height: 0,
                        sizeHeight: 0,
                        cut1: 0,
                        cut2: 0,
                        positionY: 0,
                        sizePositionY: 0
                    };
                    return o.pole1 && !o.pole1.config.virtual && "corner" === o.pole1.blockMaterial.block.type && o.pole1.seating && (e = "wall" === o.config.kind && o.blockMaterial.block.depth !== o.pole1.getBlockDepth() ? -o.pole1.depth : 0,
                    t = o.blockMaterial.block.depth === o.pole1.getBlockDepth() ? n.height : 0,
                    s.height = o.pole1.seating - t,
                    s.sizeHeight = Math.round(s.height / o.blockMaterial.block.height),
                    s.cut1 = e,
                    s.cut2 = n.width - o.pole1.depth - e,
                    s.positionY = t,
                    s.sizePositionY = Math.round(s.positionY / o.blockMaterial.block.height),
                    s.width = n.width - s.cut1 - s.cut2),
                    o.pole2 && !o.pole2.config.virtual && "corner" === o.pole2.blockMaterial.block.type && o.pole2.seating && (e = "wall" === o.config.kind && o.blockMaterial.block.depth !== o.pole2.getBlockDepth() ? -o.pole2.width : 0,
                    t = o.blockMaterial.block.depth === o.pole2.getBlockDepth() ? n.height : 0,
                    l.height = o.pole2.seating - t,
                    l.sizeHeight = Math.round(l.height / o.blockMaterial.block.height),
                    l.cut1 = n.width - o.pole2.width - e,
                    l.cut2 = e,
                    l.positionY = t,
                    l.sizePositionY = Math.round(l.positionY / o.blockMaterial.block.height),
                    l.width = n.width - l.cut1 - l.cut2),
                    {
                        wall: n,
                        add1: s,
                        add2: l
                    }
                }
                ,
                o.calcRotation = function() {
                    return {
                        normal: o.data.normal.rotation,
                        full: o.data.full.rotation
                    }
                }
                ,
                o.calcPosition = function() {
                    return {
                        normal: {
                            x: (o.data.normal.point1.x + o.data.normal.point2.x) / 2,
                            y: 0,
                            z: (o.data.normal.point1.z + o.data.normal.point2.z) / 2
                        },
                        full: {
                            x: (o.data.full.point1.x + o.data.full.point2.x) / 2,
                            y: 0,
                            z: (o.data.full.point1.z + o.data.full.point2.z) / 2
                        }
                    }
                }
                ,
                o.do = function() {
                    o.instance.isLoading || (o.doSketch(),
                    o.doDescription(),
                    o.doHighlight2d(),
                    o.instance.isMoving || setTimeout((function() {
                        o.doWall(),
                        o.doPeak(),
                        o.doHighlight3d(),
                        o.technical.update()
                    }
                    ), 200))
                }
                ,
                o.update = function() {
                    o.status = o.setStatus(),
                    o.depth = o.calcDepth(),
                    o.height = o.calcHeight(),
                    o.fullHeight = o.calcFullHeight(),
                    o.data = o.calcData(),
                    o.width = o.calcWidth(),
                    o.fullWidth = o.calcFullWidth(),
                    o.descriptionWallWidth = o.calcDescriptionWallWidth(),
                    o.wallWidth = o.calcWallWidth(),
                    o.wallElements = o.calcWallElements(),
                    o.peakWidth = o.calcPeakWidth(),
                    o.points = o.getGeometryPoints(),
                    o.rotation = o.calcRotation(),
                    o.position = o.calcPosition(),
                    o.do(),
                    o.instance.setOffsets(),
                    o.panels.update(),
                    o.combo.update(),
                    o.fencing.update(),
                    o.manufacture.update()
                }
                ,
                o.reload = function() {
                    o.blocksFamily = o.instance.getBlocksFamily(),
                    o.peaksFamily = o.instance.getPeaksFamily(),
                    o.blockMaterial = o.setBlockMaterial(),
                    o.peakMaterial = o.setPeakMaterial();
                    var e = o.getBlockMaterialId(o.config.blockMaterialId, o.instance.blocksColor);
                    e !== o.config.blockMaterialId && o.setBlockMaterialId(e),
                    o.do()
                }
                ,
                o.remove = function() {
                    o.objects.sketch.drag.dispose(),
                    o.objects.description.drag.dispose(),
                    o.three.scenes["2d"].remove(o.objects.sketch),
                    o.three.scenes["2d"].remove(o.objects.description),
                    o.three.scenes["3d"].remove(o.objects.wall.wall),
                    o.three.scenes["3d"].remove(o.objects.wall.add1),
                    o.three.scenes["3d"].remove(o.objects.wall.add2),
                    o.three.scenes["3d"].remove(o.objects.peak),
                    o.three.scenes["2d"].remove(o.objects.highlight2d),
                    o.three.scenes["3d"].remove(o.objects.highlight3d),
                    o.technical.remove(),
                    o.panels.remove(),
                    o.combo.remove(),
                    o.fencing.remove(),
                    o.manufacture.remove()
                }
                ,
                o.displayOptions = function() {
                    ft("wall", o.config, o),
                    o.instance.setHighlight(o)
                }
                ,
                o.setKind = function(e) {
                    e !== o.config.kind && (o.panels.reset(),
                    o.manufacture.reset()),
                    o.config.kind = e,
                    o.polesUpdate(),
                    o.update(),
                    o.polesRepair(),
                    o.instance.extensions.dimensions.update()
                }
                ,
                o.setBlockMaterialId = function(e) {
                    o.config.blockMaterialId = e,
                    o.blockMaterial = o.setBlockMaterial(),
                    o.peakMaterial = o.setPeakMaterial(),
                    o.polesUpdate(),
                    o.update()
                }
                ,
                o.resizeHeight = function(e) {
                    (e >= 1 && e <= 30 && e <= o.getMaxHeight() || o.instance.isLoading) && (o.config.size.height = e,
                    o.height = o.calcHeight(),
                    o.polesUpdate(),
                    o.update())
                }
                ,
                o.getMaxHeight = function() {
                    var e = o.pole1.config.virtual ? 1 / 0 : o.pole1.fullHeight
                      , t = o.pole2.config.virtual ? 1 / 0 : o.pole2.fullHeight
                      , a = Math.min.apply(null, [e, t])
                      , i = Math.floor(a / o.blockMaterial.block.height);
                    return o.blocksFamily.settings.sameAlignment ? i : i - 1
                }
                ,
                o.getMaxPotentialHeight = function(e) {
                    var t = o.pole1.config.virtual ? 1 / 0 : o.pole1.getPotentialHeight(e, o.blockMaterial.block.height)
                      , a = o.pole2.config.virtual ? 1 / 0 : o.pole2.getPotentialHeight(e, o.blockMaterial.block.height);
                    return Math.min.apply(null, [t, a])
                }
                ,
                o.getGeometryPoints = function() {
                    return Ot.ParallelogramCut(o.wallWidth, o.depth, o.data.full.indent1 * o.depth, o.data.full.indent2 * o.depth, 0, 0, {
                        a: 0,
                        b: 0,
                        c: 0,
                        d: 0
                    })
                }
                ,
                o.polesUpdate = function() {
                    o.pole1 && o.pole1.update(),
                    o.pole2 && o.pole2.update()
                }
                ,
                o.polesRepair = function() {
                    o.pole1 && o.pole1.repair(),
                    o.pole2 && o.pole2.repair()
                }
                ,
                o.instance = e,
                o.three = e.three,
                o.actions = new Sa(e,o),
                o.sketchColor = o.instance.colors.sketchWall,
                o.highlightSize = .5,
                o.highlightColor = 16776960,
                o.highlightOpacity = .4,
                o.system = o.instance.getSystem(),
                o.blocksFamily = o.instance.getBlocksFamily(),
                o.peaksFamily = o.instance.getPeaksFamily(),
                o.kindsList = {
                    wall: W("Murek"),
                    wicket: W("Furtka"),
                    gate: W("Brama"),
                    space: W("Pusta przestrze\u0144")
                },
                o.config = {
                    size: {
                        depth: o.blocksFamily.wall.default.depth,
                        height: o.blocksFamily.wall.default.height
                    },
                    kind: n,
                    blockMaterialId: o.instance.getDefaultMaterial(o.blocksFamily.wall),
                    peakMaterialId: null,
                    combo: "on",
                    fencing: "on",
                    fencingHeight: ""
                },
                o.blockMaterial = o.setBlockMaterial(),
                o.peakMaterial = o.setPeakMaterial(),
                o.objects = {
                    sketch: null,
                    description: null,
                    wall: {
                        wall: null,
                        add1: null,
                        add2: null
                    },
                    peak: null,
                    highlight2d: null,
                    highlight3d: null
                },
                o.pole1 = a,
                o.pole2 = i,
                o.error = !1,
                o.status = o.setStatus(),
                o.depth = o.calcDepth(),
                o.height = o.calcHeight(),
                o.fullHeight = o.calcFullHeight(),
                o.data = o.calcData(),
                o.width = o.calcWidth(),
                o.fullWidth = o.calcFullWidth(),
                o.descriptionWallWidth = o.calcDescriptionWallWidth(),
                o.wallWidth = o.calcWallWidth(),
                o.wallElements = o.calcWallElements(),
                o.peakWidth = o.calcPeakWidth(),
                o.points = null,
                o.offset = 0,
                o.rotation = o.calcRotation(),
                o.position = o.calcPosition(),
                o.technical = new Ra(o.instance,o),
                o.do(),
                o.instance.setOffsets(),
                o.panels = new ci(o.instance,o),
                o.combo = new Ia(o.instance,o),
                o.fencing = new Ua(o.instance,o),
                o.manufacture = new li(o.instance,o),
                o
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Da)
          , di = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                i.target.config = e,
                i.target.reload(),
                i.instance.setModified()
            }
            ,
            this.instance = t,
            this.target = a
        }
        ));
        var hi = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).getColor = function() {
                    var e, t = null === (e = i.instance.config.mailboxes[i.config.group]) || void 0 === e ? void 0 : e.models[i.config.model].colors[i.config.color];
                    return (null === t || void 0 === t ? void 0 : t.color) ? "#".concat(t.color) : i.config.color
                }
                ,
                i.getModelsList = function(e) {
                    var t = [];
                    return P.entries(e).forEach((function(e) {
                        var a = Object(N.a)(e, 2)
                          , n = a[0]
                          , o = a[1]
                          , s = i.target.getBlockDepth();
                        s >= o.target[0] && s <= o.target[1] && (t[n] = {
                            label: o.label,
                            path: "/assets/img/mailboxes/default/models/".concat(n, ".jpg")
                        })
                    }
                    )),
                    t
                }
                ,
                i.setMaterial = function() {
                    var e, t, a, n, o, s, l;
                    return i.config.group && i.config.model ? ((null === (e = i.instance.config.mailboxes[i.config.group]) || void 0 === e || null === (t = e.models[i.config.model]) || void 0 === t || null === (a = t.additionals.frame) || void 0 === a ? void 0 : a.auto) && (i.config.frame = ""),
                    (null === (n = i.instance.config.mailboxes[i.config.group]) || void 0 === n || null === (o = n.models[i.config.model]) || void 0 === o || null === (s = o.additionals.roof) || void 0 === s ? void 0 : s.auto) && (i.config.roof = ""),
                    null === (l = i.instance.config.mailboxes[i.config.group]) || void 0 === l ? void 0 : l.models[i.config.model]) : null
                }
                ,
                i.setStatus = function() {
                    var e;
                    return !(i.target.config.virtual || (null === (e = i.target.additionals) || void 0 === e ? void 0 : e.ledblock.getOffset()) || !i.material)
                }
                ,
                i.calcPosition = function() {
                    var e, t, a, n, o, s, l = {
                        x: "corner" === i.target.blockMaterial.block.type ? i.target.width / 2 : 0,
                        y: i.target.calcPolePositionY() + i.target.height - .32,
                        z: i.target.getBlockDepth() / 2
                    }, r = Mt.rotatePoint({
                        x: l.x,
                        y: 0,
                        z: l.z
                    }, i.target.rotation), c = Mt.rotatePoint({
                        x: l.x,
                        y: 0,
                        z: -l.z
                    }, i.target.rotation), p = 0;
                    (null === (e = i.material) || void 0 === e ? void 0 : e.back.position.angle) && (p = (i.target.getBlockDepth() - i.material.target[0]) / Math.tan((null === (s = i.material) || void 0 === s ? void 0 : s.back.position.angle) * Math.PI / 180));
                    var d = {
                        x: i.target.position.x - r.x,
                        y: l.y,
                        z: i.target.position.z - r.z,
                        correct: null === (t = i.material) || void 0 === t ? void 0 : t.front.position.y,
                        rotation: 0
                    }
                      , h = {
                        x: i.target.position.x - c.x,
                        y: l.y - p,
                        z: i.target.position.z - c.z,
                        correct: ((null === (a = i.material) || void 0 === a ? void 0 : a.front.height) - (null === (n = i.material) || void 0 === n ? void 0 : n.back.height)) / 2 + (null === (o = i.material) || void 0 === o ? void 0 : o.back.position.y),
                        rotation: Math.PI
                    };
                    return "front" === i.config.side ? {
                        front: {
                            x: d.x,
                            y: d.y + d.correct,
                            z: d.z,
                            rotation: d.rotation
                        },
                        back: {
                            x: h.x,
                            y: h.y + h.correct,
                            z: h.z,
                            rotation: h.rotation
                        }
                    } : {
                        front: {
                            x: h.x,
                            y: h.y + d.correct,
                            z: h.z,
                            rotation: h.rotation
                        },
                        back: {
                            x: d.x,
                            y: d.y + h.correct,
                            z: d.z,
                            rotation: d.rotation
                        }
                    }
                }
                ,
                i.do = function() {
                    i.instance.isLoading || i.instance.isMoving || setTimeout((function() {
                        i.doFront(),
                        i.doBack(),
                        i.doFrame(),
                        i.doRoof()
                    }
                    ), 300)
                }
                ,
                i.update = function() {
                    i.secureConfigToTarget(),
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.do()
                }
                ,
                i.reload = function() {
                    var e, t;
                    i.material = i.setMaterial(),
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.do(),
                    (null === (e = i.target.additionals) || void 0 === e ? void 0 : e.lamp.config.group) && (null === (t = i.target.additionals) || void 0 === t ? void 0 : t.lamp.config.model) && i.target.additionals.lamp.reload()
                }
                ,
                i.remove = function() {
                    i.three.scenes["3d"].remove(i.objects.front),
                    i.three.scenes["3d"].remove(i.objects.back),
                    i.three.scenes["3d"].remove(i.objects.frame),
                    i.three.scenes["3d"].remove(i.objects.roof)
                }
                ,
                i.displayOptions = function() {
                    ft("mailbox", i.config, i),
                    i.instance.setHighlight(i.target)
                }
                ,
                i.secureConfigToTarget = function() {
                    var e = i.setMaterial()
                      , t = i.target.getBlockDepth();
                    if (e) {
                        if (t < e.target[0])
                            return e.targetReplacement[0] ? i.config.model = e.targetReplacement[0] : i.config = {
                                group: null,
                                model: null,
                                color: null
                            },
                            i.reload();
                        if (t > e.target[1])
                            return e.targetReplacement[1] ? i.config.model = e.targetReplacement[1] : i.config = {
                                group: null,
                                model: null,
                                color: null
                            },
                            i.reload()
                    }
                    return !1
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.actions = new di(e,i),
                i.buffer = new kt(null,(function() {
                    i.do()
                }
                )),
                i.config = {
                    group: null,
                    model: null,
                    color: null,
                    frame: "",
                    roof: "",
                    side: "front"
                },
                i.objects = {
                    front: null,
                    back: null,
                    frame: null,
                    roof: null
                },
                i.target = a,
                i.material = i.setMaterial(),
                i.status = i.setStatus(),
                i.position = i.calcPosition(),
                i.lock = {
                    front: null,
                    back: null,
                    frame: null,
                    roof: null
                },
                i.do(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doFront = function() {
                t.status && t.material.front ? t.lock.front !== t.material.front.model ? (t.lock.front = t.material.front.model,
                t.three.gltf.load("/assets/new/mailboxes/".concat(t.config.group, "/models/").concat(t.material.front.model, "/front.gltf?v=2025-05-03"), (function(e) {
                    t.objects.front && t.three.scenes["3d"].remove(t.objects.front),
                    t.objects.front = e.scene,
                    t.objects.front.traverse((function(e) {
                        e instanceof yt.Mesh && ("Button_Body" === e.material.name && (e.material.metalness /= 3),
                        "Button_Push" === e.material.name && (e.material.metalness /= 3),
                        "Button_Light" === e.material.name && (e.material = new yt.MeshPhongMaterial({
                            name: "Button Light",
                            color: 13033663,
                            emissive: 65280,
                            reflectivity: 0
                        })),
                        "Camera" === e.material.name && (e.material.metalness /= 3),
                        "Light" === e.material.name && (e.material = new yt.MeshPhongMaterial({
                            name: "Light",
                            color: 12632256,
                            emissive: 16773264,
                            reflectivity: 0
                        })),
                        e.material.envMap = t.instance.envMap)
                    }
                    )),
                    t.three.scenes["3d"].add(t.objects.front),
                    t.events(t.objects.front),
                    t.doFront()
                }
                ))) : t.objects.front && (t.objects.front.traverse((function(e) {
                    e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", t.getColor())),
                    "Button_Light" === e.material.name && ("night" !== t.instance.extensions.dayNight.status ? e.material.emissiveIntensity = 0 : e.material.emissiveIntensity = 12),
                    "Light" === e.material.name && ("night" !== t.instance.extensions.dayNight.status ? e.material.emissiveIntensity = 0 : e.material.emissiveIntensity = .5))
                }
                )),
                t.objects.front.position.set(t.position.front.x, t.position.front.y, t.position.front.z),
                t.objects.front.rotation.y = t.target.rotation + t.position.front.rotation,
                t.objects.front.visible = t.status) : t.objects.front && (t.objects.front.visible = !1)
            }
            ,
            this.doBack = function() {
                t.status && t.material.back ? t.lock.back !== t.material.back.model ? (t.lock.back = t.material.back.model,
                t.three.gltf.load("/assets/new/mailboxes/".concat(t.config.group, "/models/").concat(t.material.back.model, "/back.gltf?v=2025-05-03"), (function(e) {
                    t.objects.back && t.three.scenes["3d"].remove(t.objects.back),
                    t.objects.back = e.scene,
                    t.objects.back.traverse((function(e) {
                        e instanceof yt.Mesh && ("Key" === e.material.name && (e.material.metalness /= 3),
                        e.material.envMap = t.instance.envMap)
                    }
                    )),
                    t.three.scenes["3d"].add(t.objects.back),
                    t.events(t.objects.back),
                    t.doBack()
                }
                ))) : t.objects.back && (t.objects.back.traverse((function(e) {
                    e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", t.getColor())),
                    "Metal" === e.material.name && (e.material = t.instance.materials.mailbox("Material", t.getColor())))
                }
                )),
                t.objects.back.position.set(t.position.back.x, t.position.back.y, t.position.back.z),
                t.objects.back.rotation.y = t.target.rotation + t.position.back.rotation,
                t.objects.back.visible = t.status) : t.objects.back && (t.objects.back.visible = !1)
            }
            ,
            this.doFrame = function() {
                t.status && (t.config.frame || t.material.additionals.frame.auto) ? t.lock.frame !== t.material.additionals.frame.model ? (t.lock.frame = t.material.additionals.frame.model,
                t.three.gltf.load("/assets/new/mailboxes/".concat(t.config.group, "/additionals/frame/").concat(t.material.additionals.frame.model, ".gltf?v=2025-05-03"), (function(e) {
                    t.objects.frame && t.three.scenes["3d"].remove(t.objects.frame),
                    t.objects.frame = e.scene,
                    t.three.scenes["3d"].add(t.objects.frame),
                    t.events(t.objects.frame),
                    t.doFrame()
                }
                ))) : t.objects.frame && (t.objects.frame.traverse((function(e) {
                    e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", t.getColor())),
                    "Metal" === e.material.name && (e.material = t.instance.materials.mailbox("Metal", t.getColor())),
                    e.material.envMap = t.instance.envMap)
                }
                )),
                t.objects.frame.position.set(t.position.back.x, t.position.back.y, t.position.back.z),
                t.objects.frame.rotation.y = t.target.rotation + t.position.back.rotation,
                t.objects.frame.visible = t.status) : t.objects.frame && (t.objects.frame.visible = !1)
            }
            ,
            this.doRoof = function() {
                t.status && (t.config.roof || t.material.additionals.roof.auto) ? t.lock.roof !== t.material.additionals.roof.model ? (t.lock.roof = t.material.additionals.roof.model,
                t.three.gltf.load("/assets/new/mailboxes/".concat(t.config.group, "/additionals/roof/").concat(t.material.additionals.roof.model, ".gltf?v=2025-05-03"), (function(e) {
                    t.objects.roof && t.three.scenes["3d"].remove(t.objects.roof),
                    t.objects.roof = e.scene,
                    t.three.scenes["3d"].add(t.objects.roof),
                    t.events(t.objects.roof),
                    t.doRoof()
                }
                ))) : t.objects.roof && (t.objects.roof.traverse((function(e) {
                    e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", t.getColor())),
                    e.material.envMap = t.instance.envMap)
                }
                )),
                t.objects.roof.position.set(t.position.back.x, t.position.back.y + t.material.back.height / 2 + .02, t.position.back.z),
                t.objects.roof.rotation.y = t.target.rotation + t.position.back.rotation,
                t.objects.roof.visible = t.status) : t.objects.roof && (t.objects.roof.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        )))
          , ui = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                i.target.config = e,
                i.target.reload(),
                i.instance.setModified()
            }
            ,
            this.instance = t,
            this.target = a
        }
        ));
        var mi = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).getModelsList = function(e) {
                    var t = [];
                    return P.entries(e).forEach((function(e) {
                        var a = Object(N.a)(e, 2)
                          , i = a[0]
                          , n = a[1];
                        t[i] = {
                            label: n.label,
                            path: "/assets/img/lamps/default/models/".concat(i, ".jpg")
                        }
                    }
                    )),
                    t
                }
                ,
                i.setMaterial = function() {
                    var e;
                    return i.config.group && i.config.model ? null === (e = i.instance.config.lamps[i.config.group]) || void 0 === e ? void 0 : e.models[i.config.model] : null
                }
                ,
                i.setStatus = function() {
                    var e;
                    return !(i.target.config.virtual || (null === (e = i.target.additionals) || void 0 === e ? void 0 : e.ledblock.getOffset()) || !i.material)
                }
                ,
                i.calcPosition = function() {
                    var e, t, a, n;
                    switch (null === (e = i.material) || void 0 === e ? void 0 : e.position) {
                    case "bottom":
                        n = 1.5 * i.target.blockMaterial.block.height;
                        break;
                    default:
                        n = i.target.calcPolePositionY() + i.target.height - .32,
                        (null === (t = i.target.additionals) || void 0 === t ? void 0 : t.mailbox.config.group) && (null === (a = i.target.additionals) || void 0 === a ? void 0 : a.mailbox.config.model) && (n -= .32)
                    }
                    var o = {
                        x: "corner" === i.target.blockMaterial.block.type ? i.target.width / 2 : 0,
                        y: n,
                        z: i.target.getBlockDepth() / 2
                    }
                      , s = Mt.rotatePoint({
                        x: o.x,
                        y: 0,
                        z: o.z
                    }, i.target.rotation)
                      , l = Mt.rotatePoint({
                        x: o.x + .01,
                        y: 0,
                        z: o.z + .023
                    }, i.target.rotation);
                    return {
                        x: i.target.position.x - s.x,
                        y: o.y,
                        z: i.target.position.z - s.z,
                        text: {
                            x: i.target.position.x - l.x,
                            y: o.y - .045,
                            z: i.target.position.z - l.z
                        }
                    }
                }
                ,
                i.do = function() {
                    i.instance.isLoading || i.instance.isMoving || (i.doModel(),
                    i.doGlass(),
                    i.doLight(),
                    i.doFlash1(),
                    i.doFlash2(),
                    i.doText())
                }
                ,
                i.update = function() {
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.do()
                }
                ,
                i.reload = function() {
                    i.material = i.setMaterial(),
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.do()
                }
                ,
                i.remove = function() {
                    i.three.scenes["3d"].remove(i.objects.model),
                    i.three.scenes["3d"].remove(i.objects.glass),
                    i.three.scenes["3d"].remove(i.objects.light),
                    i.three.scenes["3d"].remove(i.objects.flash1),
                    i.three.scenes["3d"].remove(i.objects.flash2),
                    i.three.scenes["3d"].remove(i.objects.text)
                }
                ,
                i.displayOptions = function() {
                    ft("lamp", i.config, i),
                    i.instance.setHighlight(i.target)
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.actions = new ui(e,i),
                i.config = {
                    group: null,
                    model: null,
                    text: "123"
                },
                i.objects = {
                    model: null,
                    glass: null,
                    light: null,
                    flash1: null,
                    flash2: null,
                    text: null
                },
                i.target = a,
                i.material = i.setMaterial(),
                i.status = i.setStatus(),
                i.position = i.calcPosition(),
                i.lock = {
                    model: null,
                    glass: null,
                    light: null
                },
                i.do(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doModel = function() {
                t.status ? t.lock.model !== t.config.model ? (t.lock.model = t.config.model,
                t.three.gltf.load("/assets/img/lamps/".concat(t.config.group, "/models/").concat(t.config.model, "/model.gltf"), (function(e) {
                    t.objects.model && t.three.scenes["3d"].remove(t.objects.model),
                    t.objects.model = e.scene,
                    t.objects.model.traverse((function(e) {
                        e instanceof yt.Mesh && (e.material.metalness = 0,
                        e.material.roughness = .7)
                    }
                    )),
                    t.objects.model.scale.set(.01, .01, .01),
                    t.three.scenes["3d"].add(t.objects.model),
                    t.events(t.objects.model),
                    t.doModel()
                }
                ))) : t.objects.model && (t.objects.model.position.set(t.position.x, t.position.y, t.position.z),
                t.objects.model.rotation.y = t.target.rotation,
                t.objects.model.visible = t.status) : t.objects.model && (t.objects.model.visible = !1)
            }
            ,
            this.doGlass = function() {
                t.status ? t.lock.glass !== t.config.model ? (t.lock.glass = t.config.model,
                t.three.gltf.load("/assets/img/lamps/".concat(t.config.group, "/models/").concat(t.config.model, "/glass.gltf"), (function(e) {
                    t.objects.glass && t.three.scenes["3d"].remove(t.objects.glass),
                    t.objects.glass = e.scene,
                    t.objects.glass.traverse((function(e) {
                        e instanceof yt.Mesh && (e.material.metalness = 0,
                        e.material.roughness = .7)
                    }
                    )),
                    t.objects.glass.scale.set(.01, .01, .01),
                    t.three.scenes["3d"].add(t.objects.glass),
                    t.events(t.objects.glass),
                    t.doGlass()
                }
                ))) : t.objects.glass && (t.objects.glass.position.set(t.position.x, t.position.y, t.position.z),
                t.objects.glass.rotation.y = t.target.rotation,
                t.objects.glass.visible = t.status && "day" === t.instance.extensions.dayNight.status) : t.objects.glass && (t.objects.glass.visible = !1)
            }
            ,
            this.doLight = function() {
                t.status ? t.lock.light !== t.config.model ? (t.lock.light = t.config.model,
                t.three.gltf.load("/assets/img/lamps/".concat(t.config.group, "/models/").concat(t.config.model, "/light.gltf"), (function(e) {
                    t.objects.light && t.three.scenes["3d"].remove(t.objects.light),
                    t.objects.light = e.scene,
                    t.objects.light.traverse((function(e) {
                        e instanceof yt.Mesh && (e.material.metalness = -3,
                        e.material.roughness = 1)
                    }
                    )),
                    t.objects.light.scale.set(.01, .01, .01),
                    t.three.scenes["3d"].add(t.objects.light),
                    t.events(t.objects.light),
                    t.doLight()
                }
                ))) : t.objects.light && (t.objects.light.position.set(t.position.x, t.position.y, t.position.z),
                t.objects.light.rotation.y = t.target.rotation,
                t.objects.light.visible = t.status && "night" === t.instance.extensions.dayNight.status) : t.objects.light && (t.objects.light.visible = !1)
            }
            ,
            this.doFlash1 = function() {
                if (t.status && t.material.flash1) {
                    var e = t.material.flash1.width
                      , a = t.material.flash1.height
                      , i = t.position.y + t.material.flash1.position.y
                      , n = [!1, !1, !1, !1, t.instance.materials["flash-".concat(t.material.flash1.type)], !1]
                      , o = new yt.BoxGeometry(e < t.target.width ? e : t.target.width,a,.01);
                    t.objects.flash1 ? (t.objects.flash1.geometry = o,
                    t.objects.flash1.material = n) : (t.objects.flash1 = new yt.Mesh(o,n),
                    t.three.scenes["3d"].add(t.objects.flash1)),
                    t.objects.flash1.position.set(t.position.x, i, t.position.z),
                    t.objects.flash1.rotation.y = t.target.rotation,
                    t.objects.flash1.visible = t.status && "night" === t.instance.extensions.dayNight.status
                } else
                    t.objects.flash1 && (t.objects.flash1.visible = !1)
            }
            ,
            this.doFlash2 = function() {
                if (t.status && t.material.flash2) {
                    var e = t.material.flash2.width
                      , a = t.material.flash2.height
                      , i = t.position.y + t.material.flash2.position.y
                      , n = [!1, !1, !1, !1, t.instance.materials["flash-".concat(t.material.flash2.type)], !1]
                      , o = new yt.BoxGeometry(e < t.target.width ? e : t.target.width,a,.01);
                    t.objects.flash2 ? (t.objects.flash2.geometry = o,
                    t.objects.flash2.material = n) : (t.objects.flash2 = new yt.Mesh(o,n),
                    t.three.scenes["3d"].add(t.objects.flash2)),
                    t.objects.flash2.position.set(t.position.x, i, t.position.z),
                    t.objects.flash2.rotation.y = t.target.rotation,
                    t.objects.flash2.visible = t.status && "night" === t.instance.extensions.dayNight.status
                } else
                    t.objects.flash2 && (t.objects.flash2.visible = !1)
            }
            ,
            this.doText = function() {
                if (t.status && t.material.text && t.config.text) {
                    var e = new ta(t.instance.fonts.bold,t.config.text,.064,.5,0,.5);
                    if (t.objects.text)
                        t.objects.text.geometry = e;
                    else {
                        var a = new yt.MeshBasicMaterial({
                            color: 0
                        });
                        t.objects.text = new yt.Mesh(e,a),
                        t.three.scenes["3d"].add(t.objects.text),
                        t.events(t.objects.text)
                    }
                    t.objects.text.position.set(t.position.text.x, t.position.text.y, t.position.text.z),
                    t.objects.text.rotation.y = t.target.rotation,
                    t.objects.text.visible = t.status
                } else
                    t.objects.text && (t.objects.text.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        )))
          , gi = Object(r.a)((function e(t, a) {
            var i = this;
            Object(l.a)(this, e),
            this.set = function(e) {
                i.target.config = e,
                i.target.reload(),
                i.instance.setModified()
            }
            ,
            this.instance = t,
            this.target = a
        }
        ));
        var fi = function(e) {
            function t(e, a) {
                var i, n, o, s;
                return Object(l.a)(this, t),
                n = this,
                o = t,
                o = Object(d.a)(o),
                (i = Object(c.a)(n, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(n).constructor) : o.apply(n, s))).getColor = function() {
                    var e, t = null === (e = i.instance.config.ledblocks[i.config.group]) || void 0 === e ? void 0 : e.models[i.config.model].colors[i.config.color];
                    return (null === t || void 0 === t ? void 0 : t.color) ? "#".concat(t.color) : i.config.color
                }
                ,
                i.getHeight = function() {
                    return i.status && i.material ? i.material.size.height : 0
                }
                ,
                i.getOffset = function() {
                    return i.status && i.material && i.material.offset || 0
                }
                ,
                i.getModelsList = function(e) {
                    var t = [];
                    return P.entries(e).forEach((function(e) {
                        var a = Object(N.a)(e, 2)
                          , n = a[0]
                          , o = a[1];
                        i.isTarget(o) && (t[n] = "".concat(o.label, " - ").concat(o.description))
                    }
                    )),
                    t
                }
                ,
                i.setMaterial = function() {
                    var e;
                    return i.config.group && i.config.model ? null === (e = i.instance.config.ledblocks[i.config.group]) || void 0 === e ? void 0 : e.models[i.config.model] : null
                }
                ,
                i.setStatus = function() {
                    return !(i.target.config.virtual || "corner" === i.target.blockMaterial.block.type || !i.material || !i.isTarget(i.material))
                }
                ,
                i.calcPosition = function() {
                    return {
                        x: i.target.position.x,
                        y: i.target.calcPolePositionY() + i.target.height,
                        z: i.target.position.z,
                        rotation: 0
                    }
                }
                ,
                i.do = function() {
                    i.instance.isLoading || i.instance.isMoving || setTimeout((function() {
                        i.doModel(),
                        i.doFront(),
                        i.doBack(),
                        i.target.doPole()
                    }
                    ), 300)
                }
                ,
                i.update = function() {
                    i.secureConfigToTarget(),
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.do()
                }
                ,
                i.reload = function() {
                    var e, t;
                    i.material = i.setMaterial(),
                    i.status = i.setStatus(),
                    i.position = i.calcPosition(),
                    i.do(),
                    i.target.doPeak(),
                    (null === (e = i.target.additionals) || void 0 === e ? void 0 : e.mailbox.config.group) && (null === (t = i.target.additionals) || void 0 === t ? void 0 : t.mailbox.config.model) && i.target.additionals.mailbox.reload()
                }
                ,
                i.remove = function() {
                    i.three.scenes["3d"].remove(i.objects.model),
                    i.three.scenes["3d"].remove(i.objects.front),
                    i.three.scenes["3d"].remove(i.objects.back)
                }
                ,
                i.displayOptions = function() {
                    ft("ledblock", i.config, i),
                    i.instance.setHighlight(i.target)
                }
                ,
                i.isTarget = function(e) {
                    return 1 === i.target.config.size.width && e.size.width === i.target.blockMaterial.block.width && e.size.depth === i.target.getBlockDepth()
                }
                ,
                i.secureConfigToTarget = function() {
                    var e, t, a = i.setMaterial(), n = i.target.getBlockDepth();
                    if (a && n !== a.size.depth)
                        return a.targetReplacement && (null === (e = i.instance.config.ledblocks[i.config.group]) || void 0 === e || null === (t = e.models[a.targetReplacement]) || void 0 === t ? void 0 : t.size.depth) === n && (i.config.model = a.targetReplacement[0]),
                        i.reload();
                    return !1
                }
                ,
                i.instance = e,
                i.three = e.three,
                i.actions = new gi(e,i),
                i.config = {
                    group: null,
                    model: null,
                    color: null
                },
                i.objects = {
                    model: null,
                    front: null,
                    back: null
                },
                i.target = a,
                i.material = i.setMaterial(),
                i.status = i.setStatus(),
                i.position = i.calcPosition(),
                i.lock = {
                    model: null,
                    front: null,
                    back: null
                },
                i.do(),
                i
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.doModel = function() {
                t.status && t.material.model ? t.lock.model !== t.material.model ? (t.lock.model = t.material.model,
                t.three.gltf.load("/assets/new/ledblocks/".concat(t.config.group, "/models/").concat(t.material.model, "/model.gltf?v=2025-05-03"), (function(e) {
                    t.objects.model && t.three.scenes["3d"].remove(t.objects.model),
                    t.objects.model = e.scene,
                    t.objects.model.traverse((function(e) {
                        e instanceof yt.Mesh && ("Light" === e.material.name && (e.material = new yt.MeshPhongMaterial({
                            name: "Light",
                            color: 14737632,
                            emissive: 16777215,
                            reflectivity: 0
                        })),
                        "Logo" === e.material.name && (e.material.color = new yt.Color(9474192)),
                        "Panel" === e.material.name && (e.material.metalness = -1),
                        "Key" === e.material.name && (e.material.metalness /= 3),
                        "Key Freeze" === e.material.name && (e.material.metalness /= 3),
                        "Key Smooth" === e.material.name && (e.material.metalness /= 3),
                        e.material.envMap = t.instance.envMap)
                    }
                    )),
                    t.three.scenes["3d"].add(t.objects.model),
                    t.events(t.objects.model),
                    t.doModel()
                }
                ))) : t.objects.model && (t.objects.model.traverse((function(e) {
                    e instanceof yt.Mesh && ("Box_Body" === e.name && (e.castShadow = !0),
                    "Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", t.getColor())),
                    "Light" === e.material.name && (e.material.color = new yt.Color(14737632),
                    e.material.emissive = new yt.Color(16777215),
                    t.material.light ? e.material.emissiveIntensity = "night" !== t.instance.extensions.dayNight.status ? .25 : 1 : e.material.emissiveIntensity = 0))
                }
                )),
                t.objects.model.position.set(t.position.x, t.position.y, t.position.z),
                t.objects.model.rotation.y = t.target.rotation + t.position.rotation,
                t.objects.model.visible = t.status) : t.objects.model && (t.objects.model.visible = !1)
            }
            ,
            this.doFront = function() {
                if (t.status && t.material.mailbox) {
                    if (t.lock.front !== t.material.mailbox)
                        t.lock.front = t.material.mailbox,
                        t.three.gltf.load("/assets/new/mailboxes/".concat(t.config.group, "/models/").concat(t.material.mailbox, "/front.gltf"), (function(e) {
                            t.objects.front && t.three.scenes["3d"].remove(t.objects.front),
                            t.objects.front = e.scene,
                            t.objects.front.traverse((function(e) {
                                e instanceof yt.Mesh && ("Open" === e.name && (e.rotation.x = 0),
                                "Button Inside" === e.material.name && (e.material.metalness /= 3),
                                "Button Frame" === e.material.name && (e.material.metalness /= 3),
                                "Button Light" === e.material.name && (e.material = new yt.MeshPhongMaterial({
                                    name: "Button Light",
                                    color: 13033663,
                                    emissive: 65280,
                                    reflectivity: 0
                                })),
                                "Camera" === e.material.name && (e.material.metalness /= 3),
                                "Light" === e.material.name && (e.material = new yt.MeshPhongMaterial({
                                    name: "Light",
                                    color: 12632256,
                                    emissive: 16773264,
                                    reflectivity: 0
                                })),
                                e.material.envMap = t.instance.envMap)
                            }
                            )),
                            t.three.scenes["3d"].add(t.objects.front),
                            t.events(t.objects.front),
                            t.doFront()
                        }
                        ));
                    else if (t.objects.front) {
                        t.objects.front.traverse((function(e) {
                            e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", "inox")),
                            "Button Light" === e.material.name && ("night" !== t.instance.extensions.dayNight.status ? e.material.emissiveIntensity = 0 : e.material.emissiveIntensity = 12),
                            "Light" === e.material.name && ("night" !== t.instance.extensions.dayNight.status ? e.material.emissiveIntensity = 0 : e.material.emissiveIntensity = .5))
                        }
                        ));
                        var e = Mt.rotatePoint({
                            x: 0,
                            y: 0,
                            z: t.target.getBlockDepth() / 2
                        }, t.target.rotation);
                        t.objects.front.position.set(t.position.x - e.x, t.position.y - t.getOffset() / 2 - .065, t.position.z - e.z),
                        t.objects.front.rotation.y = t.target.rotation + t.position.rotation,
                        t.objects.front.visible = t.status
                    }
                } else
                    t.objects.front && (t.objects.front.visible = !1)
            }
            ,
            this.doBack = function() {
                if (t.status && t.material.mailboxBack) {
                    if (t.lock.back !== t.material.mailboxBack)
                        t.lock.back = t.material.mailboxBack,
                        t.three.gltf.load("/assets/new/mailboxes/".concat(t.config.group, "/models/").concat(t.material.mailboxBack, "/back.gltf"), (function(e) {
                            t.objects.back && t.three.scenes["3d"].remove(t.objects.back),
                            t.objects.back = e.scene,
                            t.objects.back.traverse((function(e) {
                                e instanceof yt.Mesh && ("Key" === e.material.name && (e.material.metalness /= 3),
                                e.material.envMap = t.instance.envMap)
                            }
                            )),
                            t.three.scenes["3d"].add(t.objects.back),
                            t.events(t.objects.back),
                            t.doBack()
                        }
                        ));
                    else if (t.objects.back) {
                        t.objects.back.traverse((function(e) {
                            e instanceof yt.Mesh && ("Material" === e.material.name && (e.material = t.instance.materials.mailbox("Material", "inox")),
                            "Metal" === e.material.name && (e.material = t.instance.materials.mailbox("Material", "inox")))
                        }
                        ));
                        var e = Mt.rotatePoint({
                            x: 0,
                            y: 0,
                            z: -t.target.getBlockDepth() / 2
                        }, t.target.rotation);
                        t.objects.back.position.set(t.position.x - e.x, t.position.y - t.getOffset() / 2 - .065, t.position.z - e.z),
                        t.objects.back.rotation.y = t.target.rotation + t.position.rotation + Math.PI,
                        t.objects.back.visible = t.status
                    }
                } else
                    t.objects.back && (t.objects.back.visible = !1)
            }
            ,
            this.events = function(e) {
                t.instance.editMode() && t.instance.onClick(e, (function() {
                    t.displayOptions()
                }
                ))
            }
        }
        )));
        var bi = function(e) {
            function t(e, a, i, n, o) {
                var s, r, h, u;
                return Object(l.a)(this, t),
                r = this,
                h = t,
                h = Object(d.a)(h),
                (s = Object(c.a)(r, Object(p.a)() ? Reflect.construct(h, u || [], Object(d.a)(r).constructor) : h.apply(r, u))).after = function(e) {
                    s.instance.firstPole && (s.instance.firstPole.prev = s.instance.lastPole),
                    s.instance.beforeLastPole && (s.instance.beforeLastPole.next = s.instance.lastPole),
                    s.wall = new pi(s.instance,s.prev,s,e),
                    s.instance.firstPole && (s.instance.firstPole.wall.pole1 = s.instance.lastPole),
                    s.setDirections(),
                    s.prev.repair(),
                    s.instance.isLoading || s.instance.setTechnical(s)
                }
                ,
                s.getPoleTextures = function() {
                    return s.instance.textures.systems[s.instance.system].blocks[s.instance.blocksFamily][s.instance.blocksColor].pole[s.config.blockMaterialId].texture
                }
                ,
                s.getPeakTextures = function() {
                    return s.instance.textures.systems[s.instance.system].peaks[s.instance.peaksFamily][s.instance.peaksColor][s.config.peakMaterialId].texture
                }
                ,
                s.getBlockMaterialsList = function() {
                    var e = [];
                    return P.entries(s.instance.getPoleMaterialsList()).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        if (P.in(s.modifiable, n.modifiable)) {
                            if (s.wall && s.wall.status && "wall" === s.wall.config.kind && !P.in(i, s.wall.blockMaterial.support))
                                return;
                            if (s.next && s.next.id !== s.id && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && !P.in(i, s.next.wall.blockMaterial.support))
                                return;
                            e[i] = n.label
                        }
                    }
                    )),
                    e
                }
                ,
                s.getBlockMaterialId = function(e, t) {
                    var a = s.blocksFamily.pole.materials[e];
                    return !a.disabled || a.disabled.colors && !P.in(t, a.disabled.colors) ? e : a.disabled.material
                }
                ,
                s.getPeakMaterialId = function(e) {
                    var t = s.peaksFamily.materials[e];
                    if (t.disabled && (!t.disabled.colors || P.in(s.instance.peaksColor, t.disabled.colors))) {
                        if (t.disabled.target) {
                            var a = s.getBlockMaterialId(s.config.blockMaterialId, s.instance.peaksColor);
                            a !== s.config.blockMaterialId && s.setBlockMaterialId(a, !1, !0)
                        }
                        return t.disabled.material
                    }
                    return e
                }
                ,
                s.setBlockMaterial = function() {
                    return s.blocksFamily.pole.materials[s.config.blockMaterialId]
                }
                ,
                s.setPeakMaterialId = function() {
                    var e;
                    return e = 1 === s.config.size.width ? s.instance.settings.nopeak1 ? s.blockMaterial.peak3[s.instance.peaksFamily] : s.blockMaterial.peak1[s.instance.peaksFamily] : s.blockMaterial.peak3[s.instance.peaksFamily],
                    s.getPeakMaterialId(e)
                }
                ,
                s.setPeakMaterial = function() {
                    return s.config.peakMaterialId = s.setPeakMaterialId(),
                    s.peaksFamily.materials[s.config.peakMaterialId]
                }
                ,
                s.calcWidth = function() {
                    return P.isArray(s.blockMaterial.block.width) ? s.blockMaterial.block.width[0] + (s.config.size.width - 1) * s.blockMaterial.block.width[1] : s.config.size.width * s.blockMaterial.block.width
                }
                ,
                s.calcDepth = function() {
                    return P.isArray(s.blockMaterial.block.depth) ? s.blockMaterial.block.depth[0] + (s.config.size.depth - 1) * s.blockMaterial.block.depth[1] : s.config.size.depth * s.blockMaterial.block.depth
                }
                ,
                s.calcHeight = function() {
                    if (P.isArray(s.blockMaterial.block.height)) {
                        for (var e = 0, t = 0; t < s.config.size.height; t++)
                            e += s.blockMaterial.block.height[t % s.blockMaterial.block.height.length];
                        return e
                    }
                    return s.config.size.height * s.blockMaterial.block.height
                }
                ,
                s.calcFullHeight = function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                    return s.config.virtual ? 1 === e ? s.wall && s.wall.status && "wall" === s.wall.config.kind ? s.wall.height : 0 : 2 === e ? s.next && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind ? s.next.wall.height : 0 : 1 / 0 : s.seating + s.calcHeight()
                }
                ,
                s.calcCoupler = function() {
                    return s.blockMaterial.block.coupler
                }
                ,
                s.calcPoleWidth = function() {
                    return s.width
                }
                ,
                s.calcPoleDepth = function() {
                    return s.depth
                }
                ,
                s.calcPeakWidth = function() {
                    var e;
                    switch (s.blockMaterial.block.type) {
                    case "cuboid":
                        e = s.width,
                        e += 2 * s.peakMaterial.protrude;
                        break;
                    case "corner":
                        e = s.width + s.depth,
                        e += 4 * s.peakMaterial.protrude
                    }
                    return e
                }
                ,
                s.calcPolePositionY = function() {
                    return s.position.y + s.seating
                }
                ,
                s.calcPeakPositionY = function() {
                    return s.position.y + s.seating + s.height + s.additionals.ledblock.getHeight()
                }
                ,
                s.calcAngle = function() {
                    return s.angle >= 0 ? -1 * (180 - s.angle) : 180 + s.angle
                }
                ,
                s.calcDescription = function() {
                    return "".concat(Math.round(s.calcAngle()), "\xb0")
                }
                ,
                s.setDirections = function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                    s.instance.isLoading ? (s.points = s.getGeometryPoints(),
                    0 !== e && 2 !== e || s.setSeating()) : (s.prev && s.prev.setDirection(e),
                    s.setDirection(e),
                    s.next && s.next.setDirection(e),
                    s.wallUpdate())
                }
                ,
                s.setDirection = function(e) {
                    var t, a, i = s.instance.findAngle(s.prev, s, s.next), n = s.instance.findRotation(s.prev, s, s.next);
                    if (s.angle = i,
                    s.rotation = n,
                    s.points = s.getGeometryPoints(),
                    (0 === e || 1 === e || -1 === e) && s.blocksFamily.settings.autocorner) {
                        if (s.instance.isAngle(i) ? (t = s.configTemporary.blockMaterialId.line,
                        s.modifiable = "line") : (t = s.configTemporary.blockMaterialId.corner,
                        s.modifiable = i > 89 && i < 91 || i < -89 && i > -91 ? "corner1" : "corner2"),
                        s.modifiableTemporary = s.modifiable,
                        "corner1" !== s.modifiableTemporary && "corner2" !== s.modifiableTemporary || (s.modifiableTemporary = "corner"),
                        a = s.blocksFamily.pole.materials[t],
                        !P.in(s.modifiable, a.modifiable) && a.modifiableReplacement && (t = a.modifiableReplacement),
                        (a = s.blocksFamily.pole.materials[t]).supportReplacement && (s.wall && s.wall.status && "wall" === s.wall.config.kind && !P.in(t, s.wall.blockMaterial.support) && (t = a.supportReplacement),
                        s.next && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && !P.in(t, s.next.wall.blockMaterial.support) && (t = a.supportReplacement)),
                        -1 !== e && (s.config.virtual = s.configTemporary.virtual,
                        "corner" === (a = s.blocksFamily.pole.materials[t]).block.type && s.points && Mt.getDistance(s.points.c, s.points.d) > Math.min.apply(null, [s.width, s.depth])))
                            return s.config.virtual = !0,
                            s.setDirections(-1);
                        s.setBlockMaterialId(t, !0)
                    }
                    return 0 !== e && 2 !== e || (s.setSeating(),
                    s.do()),
                    !0
                }
                ,
                s.setSeating = function() {
                    1 === s.blockMaterial.seating || 2 === s.blockMaterial.seating ? (s.seating = s.getSeating(),
                    s.seatingMaterialHeight = s.seating ? s.getSeatingMaterialHeight() : 1) : (s.seating = 0,
                    s.seatingMaterialHeight = 1),
                    s.config.size.height = Math.round(s.config.size.fullHeight - s.seating / s.seatingMaterialHeight),
                    s.height = s.calcHeight(),
                    s.fullHeight = s.calcFullHeight()
                }
                ,
                s.setBreak = function() {
                    s.break = !0,
                    s.isLast() || s.config.polygonBreak || "joniec-gorc_peak" !== s.instance.system && ("corner" === s.blockMaterial.block.type || s.config.virtual) && (s.angle > 89 && s.angle < 91 || s.angle < -89 && s.angle > -91) || s.next && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && 2 === s.blockMaterial.seating && (s.wall && s.wall.status && "wall" === s.wall.config.kind && s.getBlockDepth() === s.wall.blockMaterial.block.depth && (s.break = !1),
                    s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && s.getBlockDepth() !== s.next.wall.blockMaterial.block.depth && (s.break = !0))
                }
                ,
                s.do = function() {
                    s.instance.isLoading || (s.doSketch(),
                    s.doDescription(),
                    s.doHighlight2d(),
                    s.instance.isMoving || setTimeout((function() {
                        s.doPole(),
                        s.doPeak(),
                        s.doHighlight3d(),
                        s.technical.update()
                    }
                    ), 100),
                    s.additionals.mailbox.update(),
                    s.additionals.lamp.update(),
                    s.additionals.ledblock.update())
                }
                ,
                s.update = function() {
                    s.setSeating(),
                    s.do(),
                    s.wallUpdate()
                }
                ,
                s.reload = function() {
                    s.blocksFamily = s.instance.getBlocksFamily(),
                    s.peaksFamily = s.instance.getPeaksFamily(),
                    s.blockMaterial = s.setBlockMaterial(),
                    s.peakMaterial = s.setPeakMaterial();
                    var e = s.getBlockMaterialId(s.config.blockMaterialId, s.instance.blocksColor);
                    s.config.blockMaterialId !== e && s.setBlockMaterialId(e, !1, !0);
                    var t = s.getBlockMaterialId(s.configTemporary.blockMaterialId.line, s.instance.blocksColor);
                    s.configTemporary.blockMaterialId.line !== t && (s.configTemporary.blockMaterialId.line = t);
                    var a = s.getBlockMaterialId(s.configTemporary.blockMaterialId.corner, s.instance.blocksColor);
                    s.configTemporary.blockMaterialId.corner !== a && (s.configTemporary.blockMaterialId.corner = a),
                    s.do()
                }
                ,
                s.remove = function() {
                    s.objects.sketch.drag.dispose(),
                    s.three.scenes["2d"].remove(s.objects.sketch),
                    s.three.scenes["2d"].remove(s.objects.description),
                    s.three.scenes["3d"].remove(s.objects.pole),
                    s.three.scenes["3d"].remove(s.objects.peak),
                    s.three.scenes["2d"].remove(s.objects.highlight2d),
                    s.three.scenes["3d"].remove(s.objects.highlight3d),
                    s.technical.remove(),
                    s.additionals.mailbox.remove(),
                    s.additionals.lamp.remove(),
                    s.additionals.ledblock.remove()
                }
                ,
                s.displayOptions = function() {
                    ft("pole", s.config, s),
                    s.instance.setHighlight(s)
                }
                ,
                s.move = function(e, t) {
                    if (s.instance.settings.move) {
                        var a = Mt.round(e.position.x, 2)
                          , i = Mt.round(e.position.z, 2);
                        if (t) {
                            var n = !1;
                            if (s.isFirst() || s.prev && !s.prev.config.polygonBreak && (n = Mt.rotatePoint({
                                x: a - s.prev.position.x,
                                z: i - s.prev.position.z
                            }, s.prev.rotation)),
                            !1 !== n && Math.abs(n.z) <= .15) {
                                var o = Mt.rotatePoint({
                                    x: n.x,
                                    z: 0
                                }, -s.prev.rotation);
                                a = s.prev.position.x + o.x,
                                i = s.prev.position.z - o.z
                            }
                        } else {
                            var l = !1
                              , r = !1;
                            s.isFirst() || s.prev && !s.prev.config.polygonBreak && (l = s.prev.position.x,
                            r = s.prev.position.z),
                            !1 !== l && Math.abs(a - l) <= .15 && (a = l),
                            !1 !== r && Math.abs(i - r) <= .15 && (i = r)
                        }
                        s.position.x = a,
                        s.position.z = i,
                        s.moveUpdate(!0)
                    } else
                        s.objects.sketch.position.set(s.position.x, s.objects.sketch.position.y, s.position.z)
                }
                ,
                s.moved = function() {
                    s.instance.settings.move && s.moveUpdate(!1)
                }
                ,
                s.moveUpdate = function(e) {
                    s.objects.sketch && s.objects.sketch.position.set(s.position.x, s.objects.sketch.position.y, s.position.z),
                    s.objects.pole && s.objects.pole.position.set(s.position.x, s.objects.pole.position.y, s.position.z),
                    s.objects.peak && s.objects.peak.position.set(s.position.x, s.objects.peak.position.y, s.position.z),
                    s.setDirections(),
                    e || s.instance.setModified()
                }
                ,
                s.setPolygonBreak = function(e) {
                    s.config.polygonBreak = e,
                    s.configTemporary.polygonBreak = e,
                    s.setDirections()
                }
                ,
                s.setVirtual = function(e) {
                    if (!e) {
                        var t = s.getMinHeight();
                        s.config.size.height < t && s.resizeHeight(t)
                    }
                    s.config.virtual = e,
                    s.configTemporary.virtual = e,
                    s.setDirections()
                }
                ,
                s.setBlockMaterialId = function(e) {
                    var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                      , a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    s.config.blockMaterialId = e,
                    t || (s.configTemporary.blockMaterialId[s.modifiableTemporary] = e),
                    s.blockMaterial = s.setBlockMaterial(),
                    s.peakMaterial = s.setPeakMaterial(),
                    s.config.size.width = s.configTemporary.width[s.modifiableTemporary],
                    s.config.size.depth = s.configTemporary.depth[s.modifiableTemporary],
                    s.blockMaterial.block.resizeable.width || (s.config.size.width = s.blocksFamily.pole.default.width),
                    s.blockMaterial.block.resizeable.depth || (s.config.size.depth = s.blocksFamily.pole.default.depth),
                    s.blockMaterial.block.resizeable.height || (s.config.size.height = s.blocksFamily.pole.default.height),
                    s.config.size.width < s.blockMaterial.block.minimum.width && (s.config.size.width = s.blockMaterial.block.minimum.width),
                    s.config.size.depth < s.blockMaterial.block.minimum.depth && (s.config.size.depth = s.blockMaterial.block.minimum.depth),
                    s.width = s.calcWidth(),
                    s.depth = s.calcDepth(),
                    s.height = s.calcHeight(),
                    s.coupler = s.calcCoupler(),
                    s.poleWidth = s.calcPoleWidth(),
                    s.poleDepth = s.calcPoleDepth(),
                    s.peakWidth = s.calcPeakWidth(),
                    t || a ? (s.setDirections(3),
                    s.setDirections(2)) : (s.setDirections(1),
                    s.setDirections()),
                    s.instance.extensions.dimensions.update()
                }
                ,
                s.resizeHeight = function(e) {
                    (e >= 0 && e <= 30 && e >= s.getMinHeight() || s.instance.isLoading) && (s.config.size.height = e,
                    s.config.size.fullHeight = Math.round(e + s.seating / s.seatingMaterialHeight),
                    s.height = s.calcHeight(),
                    s.fullHeight = s.calcFullHeight(),
                    s.do(),
                    s.wallUpdate())
                }
                ,
                s.resizeWidth = function(e) {
                    e >= 1 && e <= 1 / 0 && e <= s.getMaxWidth() && (s.config.size.width = e,
                    s.configTemporary.width[s.modifiableTemporary] = e,
                    s.width = s.calcWidth(),
                    s.peakMaterial = s.setPeakMaterial(),
                    s.poleWidth = s.calcPoleWidth(),
                    s.poleDepth = s.calcPoleDepth(),
                    s.peakWidth = s.calcPeakWidth(),
                    s.setDirections())
                }
                ,
                s.resizeDepth = function(e) {
                    e >= 1 && e <= 1 / 0 && e <= s.getMaxDepth() && (s.config.size.depth = e,
                    s.configTemporary.depth[s.modifiableTemporary] = e,
                    s.depth = s.calcDepth(),
                    s.setDirections())
                }
                ,
                s.getPotentialHeight = function(e, t) {
                    return 1 === s.blockMaterial.seating || 2 === s.blockMaterial.seating ? (s.config.size.fullHeight - e) * s.blockMaterial.block.height + e * t : s.height
                }
                ,
                s.getSeating = function() {
                    var e = [0];
                    return s.prev && s.prev.id !== s.id && s.wall && s.wall.status && "wall" === s.wall.config.kind && s.getBlockDepth() === s.wall.blockMaterial.block.depth && e.push(s.wall.height),
                    s.next && s.next.id !== s.id && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && s.getBlockDepth() === s.next.wall.blockMaterial.block.depth && e.push(s.next.wall.height),
                    e.length ? Math.max.apply(null, e) : 0
                }
                ,
                s.getSeatingMaterialHeight = function() {
                    var e = 1;
                    return s.prev && s.prev.id !== s.id && s.wall && s.wall.status && "wall" === s.wall.config.kind && (e = s.wall.blockMaterial.block.height),
                    s.next && s.next.id !== s.id && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && (e = s.next.wall.blockMaterial.block.height),
                    e
                }
                ,
                s.getMinHeight = function() {
                    var e = [];
                    s.prev && s.prev.id !== s.id && s.wall && s.wall.status && "wall" === s.wall.config.kind && e.push(s.wall.height),
                    s.next && s.next.id !== s.id && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && e.push(s.next.wall.height);
                    var t = !!e.length && Math.max.apply(null, e) - s.seating
                      , a = !1 !== t ? s.getBlockSize(t) : 1;
                    return s.blocksFamily.settings.sameAlignment || !1 === t ? a : a + 1
                }
                ,
                s.getMaxWidth = function() {
                    if (s.next && s.next.id !== s.id && s.next.wall) {
                        var e = P.isArray(s.blockMaterial.block.width) ? s.blockMaterial.block.width[0] : s.blockMaterial.block.width;
                        return Math.floor(s.next.wall.width / e) + s.config.size.width
                    }
                    return 1 / 0
                }
                ,
                s.getMaxDepth = function() {
                    if (s.next && s.next.id !== s.id && s.next.wall) {
                        var e = P.isArray(s.blockMaterial.block.width) ? s.blockMaterial.block.width[0] : s.blockMaterial.block.width;
                        return Math.floor(s.next.wall.width / e) + s.config.size.depth
                    }
                    return 1 / 0
                }
                ,
                s.getHooks = function(e) {
                    if (s.instance.isLoading)
                        return [{
                            x: s.position.x,
                            z: s.position.z
                        }];
                    var t = [!1, !1, !1, !1];
                    switch (s.blockMaterial.block.type) {
                    case "cuboid":
                        "line" === s.blockMaterial.modifiable ? (t[0] = {
                            x: -s.width / 2,
                            y: 0,
                            z: 0
                        },
                        t[1] = {
                            x: s.width / 2,
                            y: 0,
                            z: 0
                        }) : (t[0] = {
                            x: -s.width / 2,
                            y: 0,
                            z: 0
                        },
                        t[1] = {
                            x: s.width / 2,
                            y: 0,
                            z: 0
                        },
                        t[2] = {
                            x: 0,
                            y: 0,
                            z: -s.depth / 2
                        },
                        t[3] = {
                            x: 0,
                            y: 0,
                            z: s.depth / 2
                        });
                        break;
                    case "corner":
                        var a;
                        s.points.status && (1 === e && (a = Mt.getCenter({
                            x: s.points.e.x,
                            y: 0,
                            z: s.points.e.y
                        }, {
                            x: s.points.f.x,
                            y: 0,
                            z: s.points.f.y
                        }),
                        t[0] = {
                            x: a.x,
                            y: a.y,
                            z: -a.z
                        },
                        a = Mt.getCenter({
                            x: s.points.point.x,
                            y: 0,
                            z: s.points.point.y
                        }, {
                            x: s.points.m2.x,
                            y: 0,
                            z: s.points.m2.y
                        }),
                        t[1] = {
                            x: a.x,
                            y: a.y,
                            z: -a.z
                        }),
                        2 === e && (a = Mt.getCenter({
                            x: s.points.a.x,
                            y: 0,
                            z: s.points.a.y
                        }, {
                            x: s.points.b.x,
                            y: 0,
                            z: s.points.b.y
                        }),
                        t[0] = {
                            x: a.x,
                            y: a.y,
                            z: -a.z
                        },
                        a = Mt.getCenter({
                            x: s.points.point.x,
                            y: 0,
                            z: s.points.point.y
                        }, {
                            x: s.points.m1.x,
                            y: 0,
                            z: s.points.m1.y
                        }),
                        t[1] = {
                            x: a.x,
                            y: a.y,
                            z: -a.z
                        }))
                    }
                    var i = [];
                    return P.keys(t).forEach((function(e) {
                        if (t[e]) {
                            var a = Mt.rotatePoint(t[e], s.rotation);
                            i.push({
                                x: s.position.x + a.x,
                                z: s.position.z + a.z
                            })
                        }
                    }
                    )),
                    i
                }
                ,
                s.getNearestHook = function(e, t) {
                    var a = !1
                      , i = 1 / 0;
                    return P.values(e).forEach((function(e) {
                        var n = Mt.getDistance({
                            x: t.x,
                            y: t.z
                        }, {
                            x: e.x,
                            y: e.z
                        });
                        n < i && (a = e,
                        i = n)
                    }
                    )),
                    a
                }
                ,
                s.getFarthestHook = function(e, t) {
                    var a = !1
                      , i = 0;
                    return P.values(e).forEach((function(e) {
                        var n = Mt.getDistance({
                            x: t.x,
                            y: t.z
                        }, {
                            x: e.x,
                            y: e.z
                        });
                        n > i && (a = e,
                        i = n)
                    }
                    )),
                    a
                }
                ,
                s.getHook = function(e, t, a) {
                    if (s.config.virtual)
                        return {
                            x: s.position.x,
                            z: s.position.z,
                            r: 0
                        };
                    var i = s.getHooks(t);
                    if (a && s.seating) {
                        if ("corner" === s.blockMaterial.block.type)
                            return 1 === t && s.next && s.next.id !== s.id && s.next.wall && s.next.wall.status && "wall" === s.next.wall.config.kind && s.getBlockDepth() !== s.next.wall.blockMaterial.block.depth || 2 === t && s.wall && s.wall.status && "wall" === s.wall.config.kind && s.getBlockDepth() !== s.wall.blockMaterial.block.depth ? s.getNearestHook(i, e) : s.getFarthestHook(i, e);
                        var n = 0
                          , o = 0;
                        if (s.prev && s.prev.id !== s.id && s.wall && s.wall.status && "wall" === s.wall.config.kind && s.getBlockDepth() === s.wall.blockMaterial.block.depth && (n = s.wall.height),
                        s.next && s.next.id !== s.id) {
                            if (!s.next.wall || !s.next.wall.status || "wall" !== s.next.wall.config.kind)
                                return s.getFarthestHook(i, e);
                            s.getBlockDepth() === s.next.wall.blockMaterial.block.depth && (o = s.next.wall.height)
                        }
                        if (1 === t && n <= o)
                            return s.getFarthestHook(i, e);
                        if (2 === t && (n > o || s.isLast()))
                            return s.getFarthestHook(i, e)
                    }
                    return s.getNearestHook(i, e)
                }
                ,
                s.getGeometryPoints = function() {
                    switch (s.blockMaterial.block.type) {
                    case "corner":
                        return Ot.Corner(s.width, s.coupler, s.depth, s.coupler, s.angle);
                    default:
                        return null
                    }
                }
                ,
                s.getLimits = function(e) {
                    var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                      , a = [];
                    if (s.config.virtual) {
                        var i;
                        s.isFirst() || s.wall && s.wall.status && (i = [],
                        "wall" === s.wall.config.kind ? (i[0] = Mt.rotatePoint({
                            x: s.wall.points.c.x,
                            y: 0,
                            z: -s.wall.points.c.y
                        }, s.wall.rotation.full),
                        i[1] = Mt.rotatePoint({
                            x: s.wall.points.d.x,
                            y: 0,
                            z: -s.wall.points.d.y
                        }, s.wall.rotation.full)) : (i[0] = Mt.rotatePoint({
                            x: s.wall.points.c.x,
                            y: 0,
                            z: 0
                        }, s.wall.rotation.full),
                        i[1] = Mt.rotatePoint({
                            x: s.wall.points.d.x,
                            y: 0,
                            z: 0
                        }, s.wall.rotation.full)),
                        P.keys(i).forEach((function(e) {
                            a.push({
                                x: Mt.round(s.wall.position.full.x + i[e].x),
                                y: 0,
                                z: Mt.round(s.wall.position.full.z + i[e].z)
                            })
                        }
                        ))),
                        s.isLast() || s.next && s.next.wall && s.next.wall.status && (i = [],
                        "wall" === s.wall.config.kind ? (i[0] = Mt.rotatePoint({
                            x: s.next.wall.points.a.x,
                            y: 0,
                            z: -s.next.wall.points.a.y
                        }, s.next.wall.rotation.full),
                        i[1] = Mt.rotatePoint({
                            x: s.next.wall.points.b.x,
                            y: 0,
                            z: -s.next.wall.points.b.y
                        }, s.next.wall.rotation.full)) : (i[0] = Mt.rotatePoint({
                            x: s.next.wall.points.a.x,
                            y: 0,
                            z: 0
                        }, s.next.wall.rotation.full),
                        i[1] = Mt.rotatePoint({
                            x: s.next.wall.points.b.x,
                            y: 0,
                            z: 0
                        }, s.next.wall.rotation.full)),
                        P.keys(i).forEach((function(e) {
                            a.push({
                                x: Mt.round(s.next.wall.position.full.x + i[e].x),
                                y: 0,
                                z: Mt.round(s.next.wall.position.full.z + i[e].z)
                            })
                        }
                        )))
                    } else {
                        switch (s.blockMaterial.block.type) {
                        case "cuboid":
                            switch (e) {
                            case "adapt":
                                t ? ("c" === t && (a.push({
                                    x: -s.width / 2,
                                    y: 0,
                                    z: s.depth / 2
                                }),
                                a.push({
                                    x: s.width / 2,
                                    y: 0,
                                    z: s.depth / 2
                                })),
                                "d" === t && (a.push({
                                    x: -s.width / 2,
                                    y: 0,
                                    z: -s.depth / 2
                                }),
                                a.push({
                                    x: s.width / 2,
                                    y: 0,
                                    z: -s.depth / 2
                                }))) : (a.push({
                                    x: -s.width / 2,
                                    y: 0,
                                    z: s.depth / 2
                                }),
                                a.push({
                                    x: s.width / 2,
                                    y: 0,
                                    z: s.depth / 2
                                }));
                                break;
                            default:
                                a.push({
                                    x: -s.width / 2,
                                    y: 0,
                                    z: -s.depth / 2
                                }),
                                a.push({
                                    x: -s.width / 2,
                                    y: 0,
                                    z: s.depth / 2
                                }),
                                a.push({
                                    x: s.width / 2,
                                    y: 0,
                                    z: s.depth / 2
                                }),
                                a.push({
                                    x: s.width / 2,
                                    y: 0,
                                    z: -s.depth / 2
                                })
                            }
                            break;
                        case "corner":
                            switch (e) {
                            case "adapt":
                            case "corner":
                                a.push({
                                    x: s.points.point.x,
                                    y: 0,
                                    z: -s.points.point.y
                                });
                                break;
                            default:
                                a.push({
                                    x: s.points.a.x,
                                    y: 0,
                                    z: -s.points.a.y
                                }),
                                a.push({
                                    x: s.points.b.x,
                                    y: 0,
                                    z: -s.points.b.y
                                }),
                                a.push({
                                    x: s.points.c.x,
                                    y: 0,
                                    z: -s.points.c.y
                                }),
                                a.push({
                                    x: s.points.d.x,
                                    y: 0,
                                    z: -s.points.d.y
                                }),
                                a.push({
                                    x: s.points.e.x,
                                    y: 0,
                                    z: -s.points.e.y
                                }),
                                a.push({
                                    x: s.points.f.x,
                                    y: 0,
                                    z: -s.points.f.y
                                })
                            }
                        }
                        P.keys(a).forEach((function(e) {
                            var t = Mt.rotatePoint(a[e], s.rotation);
                            a[e] = {
                                x: Mt.round(s.position.x + t.x),
                                y: 0,
                                z: Mt.round(s.position.z + t.z)
                            }
                        }
                        ))
                    }
                    return a
                }
                ,
                s.getBlockDepth = function() {
                    return "corner" !== s.blockMaterial.block.type ? s.blockMaterial.block.depth : s.blockMaterial.block.coupler
                }
                ,
                s.getBlockSum = function() {
                    return P.isArray(s.blockMaterial.block.height) ? s.blockMaterial.block.height.reduce((function(e, t) {
                        return e + t
                    }
                    ), 0) : s.blockMaterial.block.height
                }
                ,
                s.getBlockSize = function(e) {
                    if (P.isArray(s.blockMaterial.block.height)) {
                        for (var t = 0, a = 0; a += s.blockMaterial.block.height[t % s.blockMaterial.block.height.length],
                        t++,
                        !(a >= e); )
                            ;
                        return t
                    }
                    return Math.floor(e / s.blockMaterial.block.height)
                }
                ,
                s.isFirst = function() {
                    return s.instance.firstPole && s.instance.firstPole.id === s.id
                }
                ,
                s.isLast = function() {
                    return s.instance.lastPole && s.instance.lastPole.id === s.id
                }
                ,
                s.repair = function() {
                    var e = s.getMinHeight();
                    s.config.size.height < e && (s.config.size.height = e,
                    s.config.size.fullHeight = Math.round(e + s.seating / s.seatingMaterialHeight),
                    s.height = s.calcHeight(),
                    s.fullHeight = s.calcFullHeight(),
                    s.do())
                }
                ,
                s.wallUpdate = function() {
                    var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    s.instance.isLoading || (e && s.prev && s.prev.wall && s.prev.wall.update(),
                    s.wall && s.wall.update(),
                    e && s.next && s.next.wall && s.next.wall.update())
                }
                ,
                s.instance = e,
                s.three = e.three,
                s.actions = new ya(e,s),
                s.sketchColor = s.instance.colors.sketchPole,
                s.virtualSize = .5,
                s.highlightSize = .5,
                s.highlightColor = 16776960,
                s.highlightOpacity = .4,
                s.system = s.instance.getSystem(),
                s.blocksFamily = s.instance.getBlocksFamily(),
                s.peaksFamily = s.instance.getPeaksFamily(),
                s.config = {
                    size: {
                        width: s.blocksFamily.pole.default.width,
                        depth: s.blocksFamily.pole.default.depth,
                        height: s.blocksFamily.pole.default.height,
                        fullHeight: s.blocksFamily.pole.default.height
                    },
                    polygonBreak: !1,
                    virtual: o,
                    blockMaterialId: s.instance.getDefaultMaterial(s.blocksFamily.pole),
                    peakMaterialId: null
                },
                s.configTemporary = {
                    width: {
                        line: s.blocksFamily.pole.default.width,
                        corner: s.blocksFamily.pole.materials[s.blocksFamily.settings.autocorner].block.minimum.width
                    },
                    depth: {
                        line: s.blocksFamily.pole.default.depth,
                        corner: s.blocksFamily.pole.materials[s.blocksFamily.settings.autocorner].block.minimum.depth
                    },
                    polygonBreak: !1,
                    virtual: o,
                    blockMaterialId: {
                        line: s.instance.getDefaultMaterial(s.blocksFamily.pole),
                        corner: s.blocksFamily.settings.autocorner
                    }
                },
                s.modifiable = "line",
                s.modifiableTemporary = "line",
                s.blockMaterial = s.setBlockMaterial(),
                s.peakMaterial = s.setPeakMaterial(),
                s.objects = {
                    sketch: null,
                    description: null,
                    pole: null,
                    peak: null,
                    highlight2d: null,
                    highlight3d: null
                },
                s.id = a,
                s.prev = s.instance.lastPole,
                s.next = s.instance.firstPole,
                s.width = s.calcWidth(),
                s.depth = s.calcDepth(),
                s.height = s.calcHeight(),
                s.fullHeight = s.calcFullHeight(),
                s.coupler = s.calcCoupler(),
                s.poleWidth = s.calcPoleWidth(),
                s.poleDepth = s.calcPoleDepth(),
                s.peakWidth = s.calcPeakWidth(),
                s.points = null,
                s.break = !0,
                s.offset = 0,
                s.seating = 0,
                s.seatingMaterialHeight = 1,
                s.angle = 0,
                s.rotation = 0,
                s.position = {
                    x: i,
                    y: 0,
                    z: n
                },
                s.technical = new _a(s.instance,s),
                s.additionals = {
                    mailbox: new hi(s.instance,s),
                    lamp: new mi(s.instance,s),
                    ledblock: new fi(s.instance,s)
                },
                s
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(Oa)
          , wi = Object(r.a)((function e(t, a, i) {
            var n = this;
            Object(l.a)(this, e),
            this.do = function() {
                n.doStick(),
                n.doFlag()
            }
            ,
            this.doStick = function() {
                if (n.objects.stick)
                    n.objects.stick.position.x = n.position.x,
                    n.objects.stick.position.z = n.position.z;
                else {
                    var e = [new yt.MeshStandardMaterial({
                        color: 16777215,
                        metalness: .2,
                        roughness: .1,
                        envMap: n.instance.envMap
                    }), new yt.MeshStandardMaterial({
                        color: 16777215,
                        metalness: .2,
                        roughness: .1,
                        envMap: n.instance.envMap
                    })]
                      , t = new yt.CylinderGeometry(.05,.05,n.height + n.indent,50);
                    n.objects.stick = new yt.Mesh(t,e),
                    n.three.scenes["3d"].add(n.objects.stick),
                    n.objects.stick.position.set(n.position.x, n.position.y + (n.height + n.indent) / 2, n.position.z)
                }
            }
            ,
            this.doFlag = function() {
                if (!n.objects.flag) {
                    var e = n.three.loader.load("/assets/img/flags/flag-red.png");
                    e.wrapS = yt.RepeatWrapping,
                    e.wrapT = yt.RepeatWrapping,
                    e.repeat.set(1, 1),
                    e.anisotropy = n.instance.details.anisotropy;
                    var t = [new yt.MeshStandardMaterial(Object(k.a)(Object(k.a)({}, n.instance.params.texture), {}, {
                        map: e,
                        aoMap: e,
                        side: yt.DoubleSide
                    }))]
                      , a = new yt.PlaneGeometry(n.width,n.height,20 * n.width,10 * n.height);
                    n.objects.flag = new yt.Mesh(a,t),
                    n.three.scenes["3d"].add(n.objects.flag)
                }
                n.objects.flag.position.set(n.position.x + n.width / 2, n.position.y + n.height / 2 + n.indent, n.position.z)
            }
            ,
            this.move = function(e, t) {
                n.position.x = e,
                n.position.z = t,
                n.do()
            }
            ,
            this.show = function() {
                n.objects.stick.visible = !0,
                n.objects.flag.visible = !0
            }
            ,
            this.hide = function() {
                n.objects.stick.visible = !1,
                n.objects.flag.visible = !1
            }
            ,
            this.animations = function() {
                n.animation = n.three.animations.add("flag-".concat(n.id), (function() {
                    var e = 0;
                    n.objects.flag.geometry.vertices.forEach((function(t) {
                        var a = 1
                          , i = e % (20 * n.width + 1);
                        i < 20 * n.width / 4 && (a = .1 * i / 4),
                        t.z = a * (.03 * Math.cos(.5 * e * t.x - .005 * Date.now())),
                        e++
                    }
                    )),
                    n.objects.flag.geometry.verticesNeedUpdate = !0
                }
                ))
            }
            ,
            this.instance = t,
            this.three = t.three,
            this.objects = {
                stick: null,
                flag: null
            },
            this.id = this.instance.flags.length,
            this.width = 1,
            this.height = 4,
            this.indent = 1,
            this.position = {
                x: a,
                y: 0,
                z: i
            },
            this.do(),
            this.animations()
        }
        ));
        var vi = function(e) {
            function t(e) {
                var a, i, o, s;
                return Object(l.a)(this, t),
                i = this,
                o = t,
                s = [e],
                o = Object(d.a)(o),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(i).constructor) : o.apply(i, s))).run = function() {
                    a.addFlags(),
                    a.extensions.dimensions.addPredefined(),
                    a.id ? a.extensions.storage.load(a.project) : (a.system = a.project.data.system,
                    a.blocksFamily = a.project.data.blocksFamily,
                    a.blocksColor = a.getBlocksFamily().default.blocksColor,
                    a.peaksFamily = a.getBlocksFamily().default.peaksFamily,
                    a.peaksColor = a.getBlocksFamily().default.peaksColor,
                    a.settings.defaultDistance = a.getBlocksFamily().settings.distance.min * a.getBlocksFamily().settings.distance.default,
                    a.settings.heightPoles = a.getBlocksFamily().pole.default.height,
                    a.settings.heightWalls = a.getBlocksFamily().wall.default.height,
                    P.count(a.getBlocksFamily().options) && P.entries(a.getBlocksFamily().options).forEach((function(e) {
                        var t = Object(N.a)(e, 2)
                          , i = t[0]
                          , n = t[1];
                        a.settings[i] = n.default
                    }
                    )),
                    a.settings.chemicals = !0,
                    a.updateTextures()),
                    a.editMode() && wt("bottom-left", "window", n.a.createElement(Yt, {
                        action: function() {
                            return a.actions.switchWindow()
                        },
                        type: "window",
                        description: W("Zmie\u0144 widok")
                    })),
                    a.editMode() || wt("bottom-right", "switcher", n.a.createElement("div", {
                        className: "p-2"
                    }, n.a.createElement(fa, {
                        action: function() {
                            return a.actions.switchView()
                        },
                        text: "2D/3D"
                    }))),
                    vt("day-night", {
                        status: a.getSystem().adds.lamps
                    }),
                    a.extensions.autosave.set(a.settings.autosave),
                    a.extensions.timer.init(),
                    a.actions.switchWindow(a.window),
                    a.actions.setPanel("settings")
                }
                ,
                a.reset = function() {
                    document.getElementById("application").style.display = "";
                    var e = a.getBlocksFamily().settings.distance.min * a.getBlocksFamily().settings.distance.default;
                    a.projectClear(),
                    setTimeout((function() {
                        bt(),
                        a.system = a.project.data.system,
                        a.blocksFamily = a.project.data.blocksFamily,
                        a.blocksColor = a.getBlocksFamily().default.blocksColor,
                        a.peaksFamily = a.getBlocksFamily().default.peaksFamily,
                        a.peaksColor = a.getBlocksFamily().default.peaksColor,
                        a.settings.defaultDistance < a.getBlocksFamily().settings.distance.min && (a.settings.defaultDistance = a.getBlocksFamily().settings.distance.min),
                        a.settings.defaultDistance === e && (a.settings.defaultDistance = a.getBlocksFamily().settings.distance.min * a.getBlocksFamily().settings.distance.default),
                        a.updateTextures(),
                        vt("day-night", {
                            status: a.getSystem().adds.lamps
                        }),
                        a.actions.setPanel("settings")
                    }
                    ), 500)
                }
                ,
                a.migration = function(e, t) {
                    var i = a.extensions.storage.encode();
                    a.projectClear(),
                    setTimeout((function() {
                        var n = {
                            config: a.getSystem().migration,
                            oldSystem: a.system,
                            newSystem: e
                        }
                          , o = a.config.systems[e].blocks[t];
                        i.data.system = e,
                        i.data.blocksFamily = t,
                        i.data.blocksColor = o.default.blocksColor,
                        i.data.peaksFamily = o.default.peaksFamily,
                        i.data.peaksColor = o.default.peaksColor,
                        i.data.settings.defaultDistance = o.settings.distance.min * o.settings.distance.default,
                        P.values(i.data.poles).forEach((function(e) {
                            e && (e.blockMaterialId = a.migrate(n, "pole", e.blockMaterialId),
                            e.temporary.blockMaterialId.line = a.migrate(n, "pole", e.temporary.blockMaterialId.line),
                            e.temporary.blockMaterialId.corner = a.migrate(n, "pole", e.temporary.blockMaterialId.corner))
                        }
                        )),
                        P.values(i.data.walls).forEach((function(e) {
                            e && (e.blockMaterialId = a.migrate(n, "wall", e.blockMaterialId))
                        }
                        )),
                        a.extensions.storage.load(i),
                        a.updateTextures(),
                        vt("day-night", {
                            status: a.getSystem().adds.lamps
                        }),
                        a.actions.setPanel("settings")
                    }
                    ), 500)
                }
                ,
                a.migrate = function(e, t, i) {
                    var n;
                    return P.values(a.config.migrations[e.config][t]).forEach((function(t) {
                        n || t[e.oldSystem] && P.in(i, t[e.oldSystem]) && (n = t[e.newSystem][0])
                    }
                    )),
                    n
                }
                ,
                a.update = function() {
                    a.projectReload()
                }
                ,
                a.events = function() {
                    ["keydown"].forEach((function(e) {
                        return document.addEventListener(e, (function(e) {
                            if (46 === e.keyCode)
                                switch (gt("type")) {
                                case "pole":
                                case "wall":
                                    gt("object").actions.remove();
                                    break;
                                case "dimension":
                                    var t = gt("object");
                                    t.boundary || t.actions.remove()
                                }
                        }
                        ))
                    }
                    ))
                }
                ,
                a.addFlags = function() {
                    a.addFlag(-2, -15),
                    a.addFlag(0, -15),
                    a.addFlag(2, -15)
                }
                ,
                a.addFlag = function(e, t) {
                    a.flags.push(new wi(a,e,t))
                }
                ,
                a.moveFlags = function(e, t, i) {
                    e.z < 1 / 0 && t.z > -1 / 0 && i.z < 1 / 0 || (e = {
                        x: 0,
                        y: 0,
                        z: 0
                    },
                    t = {
                        x: 0,
                        y: 0,
                        z: 0
                    },
                    i = {
                        x: 0,
                        y: 0,
                        z: 0
                    });
                    var n = (e.x + t.x) / 2
                      , o = i.z - 15;
                    a.flags[0].move(n - 2, o),
                    a.flags[1].move(n, o),
                    a.flags[2].move(n + 2, o)
                }
                ,
                a.showFlags = function() {
                    P.values(a.flags).forEach((function(e) {
                        return e.show()
                    }
                    ))
                }
                ,
                a.hideFlags = function() {
                    P.values(a.flags).forEach((function(e) {
                        return e.hide()
                    }
                    ))
                }
                ,
                a.getSystemDir = function() {
                    return "".concat(a.config.systemsDir).concat(a.system, "/")
                }
                ,
                a.getSystem = function() {
                    return a.config.systems[a.system]
                }
                ,
                a.getBlocksFamily = function() {
                    return a.getSystem().blocks[a.blocksFamily]
                }
                ,
                a.getPeaksFamily = function() {
                    return a.getSystem().peaks[a.peaksFamily]
                }
                ,
                a.getDefaultMaterial = function(e) {
                    var t = e.default.material;
                    return e.materials[t].disabled && P.in(a.peaksColor, e.materials[t].disabled.colors) ? e.materials[t].disabled.material : t
                }
                ,
                a.updateTextures = function() {
                    a.textures.systems || (a.textures.systems = []),
                    a.system in a.textures.systems || (a.textures.systems[a.system] = {
                        blocks: {},
                        peaks: {}
                    }),
                    a.blocksFamily in a.textures.systems[a.system].blocks || (a.textures.systems[a.system].blocks[a.blocksFamily] = []),
                    a.peaksFamily in a.textures.systems[a.system].peaks || (a.textures.systems[a.system].peaks[a.peaksFamily] = []),
                    a.blocksColor in a.textures.systems[a.system].blocks[a.blocksFamily] && a.peaksColor in a.textures.systems[a.system].peaks[a.peaksFamily] && a.projectReload(),
                    a.blocksColor in a.textures.systems[a.system].blocks[a.blocksFamily] || (a.textures.systems[a.system].blocks[a.blocksFamily][a.blocksColor] = {
                        pole: {},
                        wall: {}
                    },
                    P.keys(a.getBlocksFamily().pole.materials).forEach((function(e) {
                        a.textures.systems[a.system].blocks[a.blocksFamily][a.blocksColor].pole[e] = {
                            texture: {}
                        },
                        P.entries(a.getBlocksFamily().pole.materials[e].block.texture).forEach((function(t) {
                            var i = Object(N.a)(t, 2)
                              , n = i[0]
                              , o = i[1]
                              , s = "".concat(a.getSystemDir(), "blocks/").concat(a.getBlocksFamily().path, "/").concat(a.blocksColor, "/").concat(o.src);
                            a.textures.systems[a.system].blocks[a.blocksFamily][a.blocksColor].pole[e].texture[n] = a.createTexture(s, !0)
                        }
                        ))
                    }
                    )),
                    P.keys(a.getBlocksFamily().wall.materials).forEach((function(e) {
                        a.textures.systems[a.system].blocks[a.blocksFamily][a.blocksColor].wall[e] = {
                            texture: {}
                        },
                        P.entries(a.getBlocksFamily().wall.materials[e].block.texture).forEach((function(t) {
                            var i = Object(N.a)(t, 2)
                              , n = i[0]
                              , o = i[1]
                              , s = "".concat(a.getSystemDir(), "blocks/").concat(a.getBlocksFamily().path, "/").concat(a.blocksColor, "/").concat(o.src);
                            a.textures.systems[a.system].blocks[a.blocksFamily][a.blocksColor].wall[e].texture[n] = a.createTexture(s, !0)
                        }
                        ))
                    }
                    ))),
                    a.peaksColor in a.textures.systems[a.system].peaks[a.peaksFamily] || (a.textures.systems[a.system].peaks[a.peaksFamily][a.peaksColor] = [],
                    P.keys(a.getPeaksFamily().materials).forEach((function(e) {
                        a.textures.systems[a.system].peaks[a.peaksFamily][a.peaksColor][e] = {
                            texture: {}
                        },
                        P.entries(a.getPeaksFamily().materials[e].texture).forEach((function(t) {
                            var i = Object(N.a)(t, 2)
                              , n = i[0]
                              , o = i[1]
                              , s = "".concat(a.getSystemDir(), "peaks/").concat(a.getPeaksFamily().path, "/").concat(a.peaksColor, "/").concat(o.src);
                            a.textures.systems[a.system].peaks[a.peaksFamily][a.peaksColor][e].texture[n] = a.createTexture(s, !0)
                        }
                        ))
                    }
                    )))
                }
                ,
                a.getCurrentBlocksColorsList = function() {
                    var e = [];
                    return P.entries(a.getBlocksFamily().colors).forEach((function(t) {
                        var i = Object(N.a)(t, 2)
                          , n = i[0]
                          , o = i[1]
                          , s = "".concat(a.getSystemDir(), "blocks/").concat(a.getBlocksFamily().path, "/").concat(n, ".jpg");
                        e[n] = {
                            family: a.blocksFamily,
                            label: o.label,
                            force: o.force,
                            path: s
                        }
                    }
                    )),
                    e
                }
                ,
                a.getCurrentPeaksColorsList = function() {
                    var e = [];
                    return P.entries(a.getSystem().peaks).forEach((function(t) {
                        var i = Object(N.a)(t, 2)
                          , n = i[0]
                          , o = i[1];
                        e[n] = {
                            label: o.label,
                            colors: []
                        },
                        P.entries(a.getSystem().peaks[n].colors).forEach((function(t) {
                            var i = Object(N.a)(t, 2)
                              , o = i[0]
                              , s = i[1]
                              , l = "".concat(a.getSystemDir(), "peaks/").concat(a.getSystem().peaks[n].path, "/").concat(o, ".jpg");
                            e[n].colors[o] = {
                                family: n,
                                label: s.label,
                                force: s.force,
                                path: l
                            }
                        }
                        ))
                    }
                    )),
                    e
                }
                ,
                a.getPoleMaterialsList = function() {
                    var e = [];
                    return P.entries(a.getBlocksFamily().pole.materials).forEach((function(t) {
                        var i = Object(N.a)(t, 2)
                          , n = i[0]
                          , o = i[1];
                        if (o.disabled) {
                            if (!o.disabled.colors)
                                return;
                            if (o.disabled.colors && P.in(a.blocksColor, o.disabled.colors))
                                return;
                            if (o.disabled.colors && P.in(a.peaksColor, o.disabled.colors) && o.disabled.peaks)
                                return
                        }
                        e[n] = {
                            label: o.label,
                            modifiable: o.modifiable
                        }
                    }
                    )),
                    e
                }
                ,
                a.getWallMaterialsList = function() {
                    var e = [];
                    return P.entries(a.getBlocksFamily().wall.materials).forEach((function(t) {
                        var i = Object(N.a)(t, 2)
                          , n = i[0]
                          , o = i[1];
                        if (o.disabled) {
                            if (!o.disabled.colors)
                                return;
                            if (o.disabled.colors && P.in(a.blocksColor, o.disabled.colors))
                                return;
                            if (o.disabled.colors && P.in(a.peaksColor, o.disabled.colors) && o.disabled.peaks)
                                return
                        }
                        e[n] = {
                            label: o.label,
                            support: o.support
                        }
                    }
                    )),
                    e
                }
                ,
                a.getMaterialPoles = function() {
                    var e = [];
                    return P.entries(a.getBlocksFamily().pole.materials).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        0 === i.indexOf("c2-") || 0 === i.indexOf("c1-") || n.disabled && n.disabled.material && !n.disabled.colors || (e[i] = n.label)
                    }
                    )),
                    e
                }
                ,
                a.getMaterialWalls = function() {
                    var e = [];
                    return P.entries(a.getBlocksFamily().wall.materials).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        n.disabled && n.disabled.material && !n.disabled.colors || (e[i] = n.label)
                    }
                    )),
                    e
                }
                ,
                a.getSystemOptions = function() {
                    var e = [];
                    return P.entries(a.getBlocksFamily().options).forEach((function(t) {
                        var a, i = Object(N.a)(t, 2), n = i[0], o = i[1], s = (null === (a = w.user) || void 0 === a ? void 0 : a.type) || "client";
                        o.permissions && !P.in(s, o.permissions) || (e[n] = o)
                    }
                    )),
                    e
                }
                ,
                a.addEpisode = function(e, t, i) {
                    var n = a.getBlocksFamily()
                      , o = a.getDefaultMaterial(n.pole)
                      , s = n.pole.materials[o]
                      , l = {};
                    if (a.lastPole) {
                        if (l.position = a.lastPole.position,
                        l.angle = -Mt.rotationToDegrees(a.lastPole.rotation),
                        l.diff = 0,
                        l.first = !1,
                        i) {
                            var r = Ot.Corner(a.lastPole.width, a.lastPole.depth, a.lastPole.width, a.lastPole.depth, 180 + i)
                              , c = s.block.width / 2 + r.r.x
                              , p = Mt.rotatePointDegrees({
                                x: c,
                                z: 0
                            }, -l.angle);
                            a.lastPole.position.x += p.x,
                            a.lastPole.position.z -= p.z,
                            l.diff = c
                        }
                    } else {
                        var d = (-e + s.block.width) / 2
                          , h = Mt.rotatePointDegrees({
                            x: d,
                            z: 0
                        }, i);
                        l.position = h,
                        l.angle = 0,
                        l.diff = 0,
                        l.first = !0
                    }
                    var u = l.first || l.diff ? s.block.width : 0
                      , m = Number(!l.first)
                      , g = Math.ceil((e - u - .02) / (s.block.width + t))
                      , f = {
                        last: e - u,
                        prelast: (s.block.width + t) * (g - 1)
                    };
                    f.last - f.prelast < 2 * s.block.width && (f.prelast -= (t - (f.last - f.prelast - s.block.width)) / 2);
                    for (var b = m; b <= g; b++) {
                        var w = void 0;
                        switch (b) {
                        case g:
                            w = f.last;
                            break;
                        case g - 1:
                            w = f.prelast;
                            break;
                        default:
                            w = (s.block.width + t) * b
                        }
                        var v = Mt.rotatePointDegrees({
                            x: w + l.diff,
                            z: 0
                        }, l.angle + i);
                        a.addPole(null, l.position.x + v.x, l.position.z + v.z)
                    }
                }
                ,
                a.addPole = function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null
                      , t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null
                      , i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null
                      , n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null
                      , o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "wall"
                      , s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
                    if (!e && a.highlight instanceof pi && a.restorePole(a.highlight, o, s))
                        return !1;
                    if (null === t && null === i && n) {
                        var l = 0
                          , r = 0;
                        if (a.lastPole) {
                            var c = a.getBlocksFamily().pole.materials[a.getBlocksFamily().pole.default.material].block.width
                              , p = P.isArray(c) ? c[0] : c;
                            l = a.lastPole.width / 2,
                            r = p / 2
                        }
                        n = n + l + r;
                        var d = -5
                          , h = 0;
                        if (null !== a.lastPole) {
                            var u = a.lastPole.prev.position.x - a.lastPole.position.x
                              , m = a.lastPole.prev.position.z - a.lastPole.position.z;
                            Math.abs(u) >= Math.abs(m) ? (d = u <= 0 ? a.lastPole.position.x + n : a.lastPole.position.x - n,
                            h = a.lastPole.position.z) : (d = a.lastPole.position.x,
                            h = m <= 0 ? a.lastPole.position.z + n : a.lastPole.position.z - n)
                        }
                        t = d,
                        i = h
                    }
                    e = e || (a.lastPole ? parseInt(a.lastPole.id, 10) + 1 : 0);
                    var g = !a.firstPole
                      , f = new bi(a,e,t,i,s);
                    return a.poles[e] = f,
                    null === a.firstPole && (a.firstPole = f),
                    a.lastPole = f,
                    a.beforeLastPole = f.prev,
                    a.lastPole.after(g ? "pole" : o),
                    f
                }
                ,
                a.restorePole = function(e, t, i) {
                    var n = e.pole1
                      , o = e.pole2
                      , s = parseInt(o.id, 10) - 1;
                    if (!a.poles[s]) {
                        var l = new bi(a,s,e.position.normal.x,e.position.normal.z,i);
                        return n.next = l,
                        o.prev = l,
                        o.wall.pole1 = l,
                        l.prev = n,
                        l.next = o,
                        l.wall = new pi(a,n,l,t),
                        l.setDirections(),
                        a.poles[s] = l,
                        a.extensions.dimensions.update(),
                        a.setHighlight(l.wall),
                        !0
                    }
                    return !1
                }
                ,
                a.removePole = function(e) {
                    var t = a.poles[e];
                    if (t) {
                        var i = -1;
                        P.values(a.poles).forEach((function() {
                            i++
                        }
                        )),
                        a.firstPole && a.firstPole.id === e && (a.firstPole = t.next),
                        a.lastPole && a.lastPole.id === e && (a.lastPole = t.prev,
                        a.beforeLastPole = t.prev.prev),
                        a.beforeLastPole && a.beforeLastPole.id === e && (a.beforeLastPole = t.prev),
                        t.prev && (t.prev.next = t.next),
                        t.next && (t.next.prev = t.prev),
                        t.next && t.next.wall && (t.next.wall.pole1 = t.prev),
                        t.wall && t.wall.remove(),
                        i < 1 && (a.firstPole = null),
                        i < 1 && (a.lastPole = null),
                        i < 2 && (a.beforeLastPole = null),
                        i < 2 && a.firstPole && (a.firstPole.rotation = 0,
                        a.firstPole.next && (a.firstPole.next = null)),
                        t.prev && t.prev.update(),
                        t.next && t.next.update(),
                        t.setDirections(),
                        t.remove(),
                        delete a.poles[e],
                        a.setOffsets(),
                        a.extensions.dimensions.removeDimensionByPole(e),
                        a.extensions.dimensions.update()
                    }
                }
                ,
                a.projectClear = function() {
                    P.values(a.extensions.dimensions.objects).forEach((function(e) {
                        a.extensions.dimensions.removeDimension(e.id)
                    }
                    )),
                    P.values(a.poles).forEach((function(e) {
                        a.removePole(e.id)
                    }
                    ))
                }
                ,
                a.projectReload = function() {
                    P.values(a.poles).forEach((function(e) {
                        e.reload(),
                        e.wall && e.wall.reload()
                    }
                    ))
                }
                ,
                a.comboReload = function() {
                    P.values(a.poles).forEach((function(e) {
                        e.wall && e.wall.combo && (e.wall.combo.status = e.wall.combo.setStatus(),
                        e.wall.combo.reload())
                    }
                    ))
                }
                ,
                a.fencingsReload = function() {
                    P.values(a.poles).forEach((function(e) {
                        e.wall && e.wall.fencing && (e.wall.fencing.status = e.wall.fencing.setStatus(),
                        e.wall.fencing.reload())
                    }
                    ))
                }
                ,
                a.setOffsets = function() {
                    if (!a.isMoving) {
                        var e = 0;
                        P.values(a.poles).forEach((function(t) {
                            switch (a.getBlocksFamily().settings.offsets) {
                            case "continuous":
                                if (t.setBreak(),
                                t.next && t.next.wall && t.next.wall.status) {
                                    var i = t.next.wall;
                                    i.offset = e,
                                    i.doWall(),
                                    t.next.break ? e = 0 : e += i.wallWidth
                                }
                                break;
                            case "modular-alternately":
                                if (t.offset = e,
                                t.doPole(),
                                t.config.virtual || (e += "corner" !== t.blockMaterial.block.type ? t.poleWidth : t.poleWidth + t.poleDepth),
                                a.lastPole && a.lastPole.id === t.id)
                                    break;
                                if (t.next && t.next.wall) {
                                    var n = t.next.wall;
                                    n.offset = e,
                                    n.doWall(),
                                    t.next.wall.status && "wall" === t.next.wall.config.kind && (e += n.wallWidth - Mt.fmod(n.wallWidth, n.blockMaterial.block.width) + (a.isModDual(n.wallWidth, n.blockMaterial.block.width) ? 0 : n.blockMaterial.block.width))
                                }
                            }
                        }
                        ))
                    }
                }
                ,
                a.setTechnical = function(e) {
                    if (e && a.window && "none" !== a.window) {
                        var t = !1
                          , i = !1
                          , n = !1;
                        if (e instanceof bi && (t = e,
                        i = e.rotation,
                        n = e.position),
                        e instanceof pi && (t = e.pole2,
                        i = e.rotation.normal,
                        n = e.position.normal),
                        !1 !== i && !1 !== n) {
                            var o = a.threeHelper.cameras["2d"]
                              , s = Mt.rotatePoint({
                                x: 0,
                                y: 0,
                                z: -5
                            }, i);
                            o.position.set(n.x + s.x, 0, n.z + s.z),
                            o.controls.target.set(n.x, 0, n.z),
                            o.controls.update();
                            var l, r, c, p = [];
                            r = t,
                            (c = new jt).run((function() {
                                if (!r.isFirst() && r.prev) {
                                    if ("corner" === r.prev.blockMaterial.block.type && c.break(),
                                    r.prev.config.polygonBreak)
                                        return void c.break();
                                    r = r.prev
                                } else
                                    c.break()
                            }
                            )),
                            l = "".concat(r.id),
                            p.push("".concat(r.id)),
                            (c = new jt).run((function() {
                                !r.isLast() && r.next ? ("corner" === r.next.blockMaterial.block.type && c.break(),
                                r.next.config.polygonBreak && c.break(),
                                r = r.next,
                                p.push("".concat(r.id))) : c.break()
                            }
                            )),
                            P.values(a.poles).forEach((function(e) {
                                var t = "".concat(e.id)
                                  , a = P.in(t, p) ? 1 : 0;
                                e.technical.update(t === l && "corner" === e.blockMaterial.block.type ? 2 : a),
                                e.wall && e.wall.technical.update(t === l ? 0 : a)
                            }
                            ))
                        }
                    }
                }
                ,
                a.findAngle = function(e, t, i) {
                    return e || (e = t),
                    i || (i = t),
                    a.firstPole && a.firstPole.id === t.id && (e = t),
                    a.lastPole && a.lastPole.id === t.id && (i = t),
                    e && e.config.polygonBreak && (e = t),
                    t.config.polygonBreak && (i = t),
                    Mt.findAngleBidirectional({
                        x: e.position.x,
                        y: e.position.z
                    }, {
                        x: t.position.x,
                        y: t.position.z
                    }, {
                        x: i.position.x,
                        y: i.position.z
                    })
                }
                ,
                a.findRotation = function(e, t, i) {
                    return e || (e = t),
                    i || (i = t),
                    a.firstPole && a.firstPole.id === t.id && (e = t,
                    t = i),
                    e && e.config.polygonBreak && (e = t,
                    t.config.polygonBreak || a.lastPole && a.lastPole.id === t.id || (t = i)),
                    e.id !== t.id ? Mt.getRotation({
                        x: e.position.x,
                        y: e.position.z
                    }, {
                        x: t.position.x,
                        y: t.position.z
                    }) : 0
                }
                ,
                a.isAngle = function(e) {
                    return !(e > 1 && e < 179 || e < -1 && e > -179)
                }
                ,
                a.isRightAngle = function(e) {
                    return e > 89 && e < 91 || e < -89 && e > -91
                }
                ,
                a.isMod = function(e, t) {
                    var a = Mt.round(Mt.fmod(e, t));
                    return a > 0 && a < .02
                }
                ,
                a.isModDual = function(e, t) {
                    var a = Mt.round(Mt.fmod(e, t));
                    return a > -.02 && a < .02
                }
                ,
                a.isModBackward = function(e, t) {
                    var a = Mt.round(Mt.fmod(e, t));
                    return a > t - .02 || a < .02
                }
                ,
                a.isTolerance = function(e, t, a) {
                    return e > t - a && e < t + a
                }
                ,
                a.actions = new va(a),
                a.settings = {
                    title: "",
                    description: "",
                    move: !0,
                    autosave: !1,
                    defaultDistance: 0,
                    heightPoles: 0,
                    heightWalls: 0
                },
                a.system = null,
                a.blocksFamily = null,
                a.blocksColor = null,
                a.peaksFamily = null,
                a.peaksColor = null,
                a.combo = {
                    status: !1,
                    system: null,
                    variant: null,
                    color: null
                },
                a.fencings = {
                    status: !1,
                    group: null,
                    system: null,
                    variant: null,
                    space: null,
                    color: null
                },
                a.poles = [],
                a.flags = [],
                a.firstPole = null,
                a.lastPole = null,
                a.window = a.details.window,
                a.fonts = new xt({
                    normal: "/assets/fonts/helvetiker_normal.json",
                    bold: "/assets/fonts/helvetiker_bold.json"
                },(function() {
                    a.init(),
                    a.events()
                }
                )),
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t)
        }(wa);
        function yi(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var ki = function(e) {
            function t() {
                return Object(l.a)(this, t),
                yi(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action,
                        title: this.props.description
                    }, this.props.text)
                }
            }])
        }(n.a.Component);
        ki.defaultProps = {
            action: null,
            description: null
        };
        var xi = ki;
        function ji(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var zi = function(e) {
            function t() {
                return Object(l.a)(this, t),
                ji(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("section", {
                        className: "menu"
                    }, n.a.createElement(xi, {
                        action: function() {
                            return w.app.extensions.storage.save(!0)
                        },
                        text: W("Zapisz"),
                        description: [W("Zapisz projekt"), "(F9)"].join(" ")
                    }), n.a.createElement(xi, {
                        action: function() {
                            return w.app.actions.clear()
                        },
                        text: W("Wyczy\u015b\u0107"),
                        description: W("Usu\u0144 wszystkie s\u0142upki i prz\u0119s\u0142a")
                    }), n.a.createElement(xi, {
                        action: function() {
                            return w.app.actions.reset()
                        },
                        text: W("Zresetuj"),
                        description: W("Zmie\u0144 system i zacznij projekt od nowa")
                    }), n.a.createElement(xi, {
                        action: function() {
                            return window.location.replace("/")
                        },
                        text: W("Zamknij"),
                        description: W("Wr\xf3\u0107 do listy projekt\xf3w")
                    }))
                }
            }])
        }(n.a.Component);
        function Mi(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Oi = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Mi(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action,
                        title: this.props.description,
                        "aria-label": this.props.description,
                        className: "type-".concat(this.props.type)
                    }, n.a.createElement("span", null))
                }
            }])
        }(n.a.Component);
        Oi.defaultProps = {
            action: null,
            description: null
        };
        var Ei = Oi;
        function _i(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Si = function(e) {
            function t() {
                return Object(l.a)(this, t),
                _i(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("section", {
                        className: "toolbar-main"
                    }, n.a.createElement("div", null, n.a.createElement(Ei, {
                        action: function() {
                            return w.app.actions.addPole()
                        },
                        type: "pole",
                        description: W("Dodaj s\u0142upek")
                    }), n.a.createElement(Ei, {
                        action: function() {
                            return w.app.actions.addCurtain()
                        },
                        type: "curtain",
                        description: W("Dodaj mur")
                    }), n.a.createElement(Ei, {
                        action: function() {
                            return w.app.actions.addWicket()
                        },
                        type: "wicket",
                        description: W("Dodaj furtk\u0119")
                    }), n.a.createElement(Ei, {
                        action: function() {
                            return w.app.actions.addGate()
                        },
                        type: "gate",
                        description: W("Dodaj bram\u0119")
                    }), n.a.createElement(Ei, {
                        action: function() {
                            return w.app.actions.addSpace()
                        },
                        type: "space",
                        description: W("Dodaj przerw\u0119")
                    }), n.a.createElement(Ei, {
                        action: function() {
                            return w.app.actions.setPanel("episode")
                        },
                        type: "episode",
                        description: W("Dodaj odcinek")
                    })))
                }
            }])
        }(n.a.Component);
        function Pi(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ci = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = Pi(this, t, [].concat(i))).onClick = function() {
                    e.props.action && e.props.action(),
                    e.props.after && e.props.after()
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.onClick,
                        title: this.props.description,
                        "aria-label": this.props.description,
                        className: G()("type-".concat(this.props.type), this.props.param ? Object(O.a)({}, P.keys(this.props.param)[0], P.values(this.props.param)[0]) : null)
                    }, n.a.createElement("span", null))
                }
            }])
        }(n.a.Component);
        Ci.defaultProps = {
            action: null,
            description: null,
            param: null,
            after: null
        };
        var Di = Ci;
        function Ri(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Fi = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Ri(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i, o, s, l, r, c = this;
                    return n.a.createElement("section", {
                        className: "toolbar-project"
                    }, n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setPanel("colors-blocks")
                        },
                        type: "colors-blocks",
                        description: W("Wybierz kolor bloczk\xf3w")
                    }), n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setPanel("colors-peaks")
                        },
                        type: "colors-peaks",
                        description: W("Wybierz kolor daszk\xf3w")
                    }), (null === w || void 0 === w || null === (e = w.app) || void 0 === e || null === (t = e.getSystem()) || void 0 === t ? void 0 : t.adds.combo) && n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setPanel("combo")
                        },
                        type: "combo",
                        description: W("Konfiguruj kombo")
                    }), (null === w || void 0 === w || null === (a = w.app) || void 0 === a || null === (i = a.getSystem()) || void 0 === i ? void 0 : i.adds.fencings) && n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setPanel("fencings")
                        },
                        type: "fencings",
                        description: W("Konfiguruj wype\u0142nienia")
                    }), n.a.createElement(Di, {
                        action: function() {
                            return w.app.extensions.average.start()
                        },
                        type: "average",
                        description: W("Roz\u0142\xf3\u017c s\u0142upki r\xf3wnomiernie")
                    }), n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setSetting("move")
                        },
                        type: "move",
                        description: W("Blokada przenoszenia element\xf3w"),
                        param: {
                            enabled: null === (o = w.app) || void 0 === o ? void 0 : o.settings.move
                        },
                        after: function() {
                            return c.forceUpdate()
                        }
                    }), (null === w || void 0 === w || null === (s = w.app) || void 0 === s || null === (l = s.getSystem()) || void 0 === l ? void 0 : l.migration) && n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setPanel("migration")
                        },
                        type: "migration",
                        description: W("Migruj projekt do innego systemu")
                    }), n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setSetting("autosave")
                        },
                        type: "autosave",
                        description: W("Autozapis"),
                        param: {
                            enabled: null === (r = w.app) || void 0 === r ? void 0 : r.settings.autosave
                        },
                        after: function() {
                            return c.forceUpdate()
                        }
                    }), n.a.createElement(Di, {
                        action: function() {
                            return w.app.actions.setPanel("settings")
                        },
                        type: "settings",
                        description: W("Ustawienia projektu")
                    }))
                }
            }])
        }(n.a.Component);
        var Vi = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onChange = function(e) {
                    var t = e.target.name
                      , i = "checkbox" === e.target.type ? e.target.checked : e.target.value;
                    a.setState(Object(O.a)({}, t, i))
                }
                ,
                a.onBlur = function(e) {
                    var t = e.target.name
                      , i = "checkbox" === e.target.type ? e.target.checked : e.target.value;
                    a.setState(Object(O.a)({}, t, a.validate(t, i)))
                }
                ,
                a.validate = function(e, t) {
                    var a;
                    switch (e) {
                    case "distance":
                    case "between":
                        (t = parseFloat(t) || 0) < (a = w.app.getBlocksFamily().settings.distance.min) && (t = a),
                        t = He.numberFormat(t, 3, ".");
                        break;
                    case "angle":
                        135,
                        (t = parseInt(t, 10) || 0) < (a = -135) && (t = a),
                        t > 135 && (t = 135)
                    }
                    return t
                }
                ,
                a.settings = w.app.settings,
                a.state = {
                    distance: !1,
                    between: a.settings.defaultDistance,
                    angle: 0
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Dodaj odcinek"))), n.a.createElement("div", {
                        className: "options-group"
                    }, n.a.createElement("h3", null, W("D\u0142ugo\u015b\u0107")), n.a.createElement("input", {
                        type: "number",
                        min: "0",
                        step: "0.01",
                        name: "distance",
                        value: this.state.distance,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), " ", n.a.createElement("small", null, "m"), n.a.createElement("h3", null, W("Odleg\u0142o\u015b\u0107 mi\u0119dzy s\u0142upkami")), n.a.createElement("input", {
                        type: "number",
                        min: "0",
                        step: "0.01",
                        name: "between",
                        value: this.state.between,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), " ", n.a.createElement("small", null, "m"), n.a.createElement("h3", null, W("K\u0105t")), n.a.createElement("input", {
                        type: "number",
                        min: "-135",
                        max: "135",
                        step: "1",
                        name: "angle",
                        value: this.state.angle,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), " ", n.a.createElement("small", null, "\xb0")), this.state.distance && n.a.createElement("button", {
                        onClick: function() {
                            return w.app.addEpisode(parseFloat(e.state.distance), parseFloat(e.state.between), parseInt(e.state.angle, 10))
                        }
                    }, W("Dodaj")))
                }
            }])
        }(n.a.Component);
        function Ii(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Li = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Ii(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action,
                        title: this.props.description,
                        "aria-label": this.props.description,
                        className: G()("button-options", "button-options-type-".concat(this.props.type), this.props.param ? Object(O.a)({}, P.keys(this.props.param)[0], P.values(this.props.param)[0]) : null)
                    }, n.a.createElement("span", null))
                }
            }])
        }(n.a.Component);
        Li.defaultProps = {
            action: null,
            description: null,
            param: null
        };
        var Hi = Li;
        function Ti(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Bi = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = Ti(this, t, [].concat(i))).getLabel = function(e, t) {
                    return "string" === typeof t ? t : "object" === typeof t ? null === t || void 0 === t ? void 0 : t.label : e
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement("div", {
                        className: "option"
                    }, this.props.title && n.a.createElement("h4", null, this.props.title), n.a.createElement("ul", {
                        className: G()("options-list", "inrow-".concat(this.props.inrow))
                    }, P.entries(this.props.options).map((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , o = a[1];
                        return n.a.createElement("li", {
                            key: i
                        }, n.a.createElement("button", {
                            onClick: function() {
                                return e.props.action(i)
                            }
                        }, i === e.props.value ? n.a.createElement("strong", null, e.getLabel(i, o)) : e.getLabel(i, o)))
                    }
                    ))))
                }
            }])
        }(n.a.Component);
        Bi.defaultProps = {
            action: null,
            title: null,
            options: null,
            value: null,
            inrow: 1
        };
        var Wi = Bi;
        function Ni(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ai = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), o = 0; o < a; o++)
                    i[o] = arguments[o];
                return (e = Ni(this, t, [].concat(i))).getSize = function() {
                    var t = He.numberFormat(e.props.size, 3)
                      , a = t.substring(0, t.length - 1)
                      , i = t.slice(-1);
                    return n.a.createElement(n.a.Fragment, null, a, n.a.createElement("small", null, ".", i))
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h4", null, this.props.title), n.a.createElement("div", {
                        className: "plus-minus"
                    }, n.a.createElement("button", {
                        onClick: this.props.actionPlus,
                        title: W("Powi\u0119ksz"),
                        "aria-label": W("Powi\u0119ksz"),
                        className: "plus"
                    }), n.a.createElement("button", {
                        onClick: this.props.actionMinus,
                        title: W("Pomniejsz"),
                        "aria-label": W("Pomniejsz"),
                        className: "minus"
                    }), n.a.createElement("p", null, this.props.value, " ", He.countWord(this.props.value, W("bloczek"), W("bloczki"), W("bloczk\xf3w")), " (", this.getSize(), " m)")))
                }
            }])
        }(n.a.Component);
        Ai.defaultProps = {
            actionPlus: null,
            actionMinus: null,
            title: null,
            value: null,
            size: null
        };
        var Gi = Ai;
        function Ui(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ki = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Ui(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement(Hi, {
                        action: function() {
                            return e.props.object.actions.remove()
                        },
                        type: "remove",
                        description: "".concat(W("Usu\u0144 s\u0142upek"), " (DEL)")
                    }), n.a.createElement(Hi, {
                        action: function() {
                            return e.props.object.actions.polygonBreak()
                        },
                        type: "polygon-break",
                        description: W("Koniec ci\u0105gu"),
                        param: {
                            enabled: this.props.object.config.polygonBreak
                        }
                    }), n.a.createElement(Hi, {
                        action: function() {
                            return e.props.object.actions.virtual()
                        },
                        type: "virtual",
                        description: W("S\u0142upek / granica muru"),
                        param: {
                            enabled: this.props.object.config.virtual
                        }
                    }), n.a.createElement("h2", null, W("Ustawienia s\u0142upka"))), !this.props.object.config.virtual && n.a.createElement(n.a.Fragment, null, n.a.createElement(Wi, {
                        action: function(t) {
                            return e.props.object.actions.blockMaterial(t)
                        },
                        title: W("Materia\u0142"),
                        options: this.props.object.getBlockMaterialsList(),
                        value: this.props.object.config.blockMaterialId
                    }), this.props.object.blockMaterial.block.resizeable.height && n.a.createElement(Gi, {
                        actionPlus: function() {
                            return e.props.object.actions.heightPlus()
                        },
                        actionMinus: function() {
                            return e.props.object.actions.heightMinus()
                        },
                        title: W("Wysoko\u015b\u0107"),
                        value: this.props.object.config.size.height,
                        size: this.props.object.height
                    }), this.props.object.blockMaterial.block.resizeable.width && n.a.createElement(Gi, {
                        actionPlus: function() {
                            return e.props.object.actions.widthPlus()
                        },
                        actionMinus: function() {
                            return e.props.object.actions.widthMinus()
                        },
                        title: W("Szeroko\u015b\u0107"),
                        value: this.props.object.config.size.width,
                        size: this.props.object.width
                    }), this.props.object.blockMaterial.block.resizeable.depth && n.a.createElement(Gi, {
                        actionPlus: function() {
                            return e.props.object.actions.depthPlus()
                        },
                        actionMinus: function() {
                            return e.props.object.actions.depthMinus()
                        },
                        title: W("G\u0142\u0119boko\u015b\u0107"),
                        value: this.props.object.config.size.depth,
                        size: this.props.object.depth
                    }), (w.app.getSystem().adds.mailboxes || w.app.getSystem().adds.lamps) && n.a.createElement(n.a.Fragment, null, n.a.createElement("br", null), n.a.createElement("button", {
                        onClick: function() {
                            return ft("additionals", null, e.props.object)
                        }
                    }, W("Dodatki")))))
                }
            }])
        }(n.a.Component);
        function qi(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Yi = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = qi(this, t, [].concat(i))).getLabel = function(e, t) {
                    return "string" === typeof t ? t : "object" === typeof t ? null === t || void 0 === t ? void 0 : t.label : e
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement("ul", {
                        className: G()("flex-list", "flex-list-".concat(this.props.align))
                    }, P.entries(this.props.options).map((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , o = a[1];
                        return n.a.createElement("li", {
                            key: i
                        }, n.a.createElement("button", {
                            onClick: function() {
                                return e.props.action(i)
                            }
                        }, i === e.props.value ? n.a.createElement("strong", null, e.getLabel(i, o)) : e.getLabel(i, o)))
                    }
                    )))
                }
            }])
        }(n.a.Component);
        Yi.defaultProps = {
            action: null,
            options: null,
            value: null,
            align: "left"
        };
        var Zi = Yi;
        function Xi(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Ji = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = Xi(this, t, [].concat(i))).setFencingHeight = function(t) {
                    var a = t.target.value;
                    "blur" === t.type && (a = He.numberFormat(parseFloat(a), 2, ".")),
                    e.props.object.actions.fencingHeight(a)
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i, o, s, l, r, c, p, d = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement(Hi, {
                        action: function() {
                            return d.props.object.actions.remove()
                        },
                        type: "remove",
                        description: "".concat(W("Usu\u0144 prz\u0119s\u0142o"), " (DEL)")
                    }), n.a.createElement("h2", null, W("Ustawienia prz\u0119s\u0142a"))), n.a.createElement(Wi, {
                        action: function(e) {
                            return d.props.object.actions.kind(e)
                        },
                        title: W("Rodzaj"),
                        options: this.props.object.kindsList,
                        value: this.props.object.config.kind
                    }), "wall" === this.props.object.config.kind && n.a.createElement(Wi, {
                        action: function(e) {
                            return d.props.object.actions.blockMaterial(e)
                        },
                        title: W("Materia\u0142"),
                        options: this.props.object.getBlockMaterialsList(),
                        value: this.props.object.config.blockMaterialId
                    }), "wall" === this.props.object.config.kind && this.props.object.blockMaterial.block.resizeable.height && n.a.createElement(Gi, {
                        actionPlus: function() {
                            return d.props.object.actions.heightPlus()
                        },
                        actionMinus: function() {
                            return d.props.object.actions.heightMinus()
                        },
                        title: W("Wysoko\u015b\u0107"),
                        value: this.props.object.config.size.height,
                        size: this.props.object.height
                    }), "wall" === this.props.object.config.kind && (null === w || void 0 === w || null === (e = w.app) || void 0 === e || null === (t = e.getSystem()) || void 0 === t ? void 0 : t.adds.combo) && w.app.combo.status && w.app.combo.system && w.app.combo.variant && w.app.combo.color && n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Kombo")), n.a.createElement(Zi, {
                        action: function(e) {
                            return d.props.object.actions.combo(e)
                        },
                        options: {
                            on: W("Tak"),
                            off: W("Nie")
                        },
                        value: this.props.object.config.combo,
                        align: "half"
                    })), ("wall" === this.props.object.config.kind || "space" === this.props.object.config.kind) && (null === w || void 0 === w || null === (a = w.app) || void 0 === a || null === (i = a.getSystem()) || void 0 === i ? void 0 : i.adds.fencings) && w.app.fencings.status && w.app.fencings.group && w.app.fencings.system && w.app.fencings.variant && w.app.fencings.color && n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Wype\u0142nienie")), n.a.createElement(Zi, {
                        action: function(e) {
                            return d.props.object.actions.fencing(e)
                        },
                        options: {
                            on: W("Tak"),
                            off: W("Nie")
                        },
                        value: this.props.object.config.fencing,
                        align: "half"
                    })), "on" === this.props.object.config.fencing && n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Wysoko\u015b\u0107 wype\u0142nienia")), n.a.createElement("input", {
                        type: "number",
                        min: "0",
                        step: "0.01",
                        value: this.props.object.config.fencingHeight,
                        placeholder: W("Domy\u015blnie"),
                        onChange: this.setFencingHeight,
                        onBlur: this.setFencingHeight,
                        style: {
                            width: "75px"
                        }
                    }), " ", n.a.createElement("small", null, "m"))), "wicket" === this.props.object.config.kind && (null === w || void 0 === w || null === (o = w.app) || void 0 === o || null === (s = o.getSystem()) || void 0 === s ? void 0 : s.adds.wickets) && n.a.createElement("button", {
                        onClick: function() {
                            return ft("wicket", d.props.object.manufacture.config, d.props.object.manufacture)
                        }
                    }, W("Szczeg\xf3\u0142y furtki")), "gate" === this.props.object.config.kind && (null === w || void 0 === w || null === (l = w.app) || void 0 === l || null === (r = l.getSystem()) || void 0 === r ? void 0 : r.adds.gates) && n.a.createElement("button", {
                        onClick: function() {
                            return ft("gate", d.props.object.manufacture.config, d.props.object.manufacture)
                        }
                    }, W("Szczeg\xf3\u0142y bramy")), ("wall" === this.props.object.config.kind || "space" === this.props.object.config.kind) && (null === w || void 0 === w || null === (c = w.app) || void 0 === c || null === (p = c.getSystem()) || void 0 === p ? void 0 : p.adds.panels) && n.a.createElement("button", {
                        onClick: function() {
                            return ft("panels", d.props.object.panels.config, d.props.object.panels)
                        }
                    }, W("Szczeg\xf3\u0142y paneli")))
                }
            }])
        }(n.a.Component);
        function Qi(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var $i = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Qi(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, this.props.title && n.a.createElement("h3", null, this.props.title), n.a.createElement("div", {
                        className: "colors-list"
                    }, P.entries(this.props.options).map((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , o = a[1];
                        return n.a.createElement("div", {
                            className: G()(i === e.props.value ? "active" : null),
                            key: i
                        }, n.a.createElement("button", {
                            onClick: function() {
                                return e.props.action(i, o)
                            },
                            "aria-label": o.label,
                            style: {
                                backgroundColor: o.color ? "#".concat(o.color) : null,
                                backgroundImage: o.path ? "url(".concat(o.path, ")") : null
                            }
                        }), n.a.createElement("span", {
                            className: "tooltip"
                        }, o.label))
                    }
                    ))))
                }
            }])
        }(n.a.Component);
        $i.defaultProps = {
            action: null,
            title: null,
            options: null,
            value: null
        };
        var en = $i;
        var tn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                }
                ,
                a.clear = function() {
                    a.setState({
                        status: !1,
                        group: null,
                        system: null,
                        variant: null,
                        space: null,
                        color: null
                    }, (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    e !== a.state.group && a.setState((function() {
                        return {
                            group: e,
                            system: null,
                            variant: null,
                            space: null,
                            color: null
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectSystem = function(e) {
                    e !== a.state.system && a.setState((function(t) {
                        var i;
                        return {
                            status: !0,
                            system: e,
                            variant: a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.variant,
                            space: (null === (i = a.config[t.group].systems[e].pattern.customizable) || void 0 === i ? void 0 : i.space) ? a.config[t.group].systems[e].pattern.customizable.space.default : null,
                            color: (null === t || void 0 === t ? void 0 : t.color) || a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.color
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectVariant = function(e) {
                    a.setState({
                        variant: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectSpace = function(e) {
                    a.setState({
                        space: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectColor = function(e) {
                    a.setState({
                        color: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectDirectionVertical = function(e) {
                    a.setState({
                        directionVertical: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectDirectionHorizontal = function(e) {
                    a.setState({
                        directionHorizontal: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.setSuggestedHeight = function(e) {
                    var t = e.target.value;
                    "blur" === e.type && (t = He.numberFormat(parseFloat(t), 2, ".")),
                    a.setState({
                        suggestedHeight: t
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.config = w.app.config.wickets,
                a.state = a.props.object.config,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i, o, s, l, r, c, p = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Ustawienia furtki"))), n.a.createElement("div", {
                        className: "info"
                    }, W("Wype\u0142nienia zamieszczone w wizualizacji zosta\u0142y przedstawione wy\u0142\u0105cznie podgl\u0105dowo."), " ", W("W celu uzyskania wyceny prosimy o kontakt z dzia\u0142em obs\u0142ugi klienta indywidualnego lub najbli\u017cszym dystrybutorem.")), n.a.createElement(Wi, {
                        action: function() {
                            return p.clear()
                        },
                        options: {
                            default: W("Niezdefiniowana")
                        },
                        value: (null === (e = this.state) || void 0 === e ? void 0 : e.status) ? null : "default"
                    }), P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return p.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.group
                    }), this.state.group && n.a.createElement(Wi, {
                        action: function(e) {
                            return p.selectSystem(e)
                        },
                        title: W("System"),
                        options: this.config[this.state.group].systems,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.system
                    }), this.state.system && n.a.createElement(n.a.Fragment, null, n.a.createElement(Wi, {
                        action: function(e) {
                            return p.selectVariant(e)
                        },
                        title: W("Konfiguracja"),
                        options: this.config[this.state.group].systems[this.state.system].variants,
                        value: null === (i = this.state) || void 0 === i ? void 0 : i.variant
                    }), (null === (o = this.config[this.state.group].systems[this.state.system].pattern.customizable) || void 0 === o ? void 0 : o.space) && n.a.createElement(n.a.Fragment, null, n.a.createElement("h3", null, W("Przerwa mi\u0119dzy profilami")), n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectSpace(e)
                        },
                        options: this.config[this.state.group].systems[this.state.system].pattern.customizable.space.options,
                        value: null === (s = this.state) || void 0 === s ? void 0 : s.space
                    })), n.a.createElement(en, {
                        action: function(e) {
                            return p.selectColor(e)
                        },
                        title: W("Kolor"),
                        options: this.config[this.state.group].systems[this.state.system].colors,
                        value: null === (l = this.state) || void 0 === l ? void 0 : l.color
                    }), n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Kierunek otwierania")), n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectDirectionVertical(e)
                        },
                        options: this.props.object.directionVerticalList,
                        value: null === (r = this.state) || void 0 === r ? void 0 : r.directionVertical,
                        align: "half"
                    }), n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectDirectionHorizontal(e)
                        },
                        options: this.props.object.directionHorizontalList,
                        value: null === (c = this.state) || void 0 === c ? void 0 : c.directionHorizontal,
                        align: "half"
                    })), n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Sugerowana wysoko\u015b\u0107")), n.a.createElement("input", {
                        type: "number",
                        min: "0",
                        step: "0.01",
                        value: this.state.suggestedHeight,
                        placeholder: W("Domy\u015blnie"),
                        onChange: this.setSuggestedHeight,
                        onBlur: this.setSuggestedHeight,
                        style: {
                            width: "75px"
                        }
                    }), " ", n.a.createElement("small", null, "m"))))
                }
            }])
        }(n.a.Component);
        var an = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                }
                ,
                a.clear = function() {
                    a.setState({
                        status: !1,
                        group: null,
                        system: null,
                        type: null,
                        variant: null,
                        space: null,
                        color: null
                    }, (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    e !== a.state.group && a.setState((function() {
                        return {
                            group: e,
                            system: null,
                            type: null,
                            variant: null,
                            space: null,
                            color: null
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectSystem = function(e) {
                    e !== a.state.system && a.setState((function(t) {
                        var i;
                        return {
                            status: !0,
                            system: e,
                            type: (null === t || void 0 === t ? void 0 : t.type) || a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.type,
                            variant: a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.variant,
                            space: (null === (i = a.config[t.group].systems[e].types[(null === t || void 0 === t ? void 0 : t.type) || a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.type].pattern.customizable) || void 0 === i ? void 0 : i.space) ? a.config[t.group].systems[e].types[(null === t || void 0 === t ? void 0 : t.type) || a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.type].pattern.customizable.space.default : null,
                            color: (null === t || void 0 === t ? void 0 : t.color) || a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.color
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectVariant = function(e, t) {
                    a.setState({
                        type: e,
                        variant: t
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectSpace = function(e) {
                    a.setState({
                        space: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectColor = function(e) {
                    a.setState({
                        color: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectSide = function(e) {
                    a.setState({
                        side: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectDirectionVertical = function(e) {
                    a.setState({
                        directionVertical: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectDirectionHorizontal = function(e) {
                    a.setState({
                        directionHorizontal: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.setSuggestedHeight = function(e) {
                    var t = e.target.value;
                    "blur" === e.type && (t = He.numberFormat(parseFloat(t), 2, ".")),
                    a.setState({
                        suggestedHeight: t
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.config = w.app.config.gates,
                a.state = a.props.object.config,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i, o, s, l, r, c, p = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Ustawienia bramy"))), n.a.createElement("div", {
                        className: "info"
                    }, W("Wype\u0142nienia zamieszczone w wizualizacji zosta\u0142y przedstawione wy\u0142\u0105cznie podgl\u0105dowo."), " ", W("W celu uzyskania wyceny prosimy o kontakt z dzia\u0142em obs\u0142ugi klienta indywidualnego lub najbli\u017cszym dystrybutorem.")), n.a.createElement(Wi, {
                        action: function() {
                            return p.clear()
                        },
                        options: {
                            default: W("Niezdefiniowana")
                        },
                        value: (null === (e = this.state) || void 0 === e ? void 0 : e.status) ? null : "default"
                    }), P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return p.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.group
                    }), this.state.group && n.a.createElement(Wi, {
                        action: function(e) {
                            return p.selectSystem(e)
                        },
                        title: W("System"),
                        options: this.config[this.state.group].systems,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.system
                    }), this.state.system && n.a.createElement(n.a.Fragment, null, P.entries(this.config[this.state.group].systems[this.state.system].types).map((function(e) {
                        var t, a = Object(N.a)(e, 2), i = a[0], o = a[1];
                        return n.a.createElement("div", {
                            key: i
                        }, o.label, ":", n.a.createElement(Wi, {
                            action: function(e) {
                                return p.selectVariant(i, e)
                            },
                            options: p.config[p.state.group].systems[p.state.system].types[i].variants,
                            value: i === p.state.type ? null === (t = p.state) || void 0 === t ? void 0 : t.variant : null
                        }))
                    }
                    )), (null === (i = this.config[this.state.group].systems[this.state.system].types[this.state.type].pattern.customizable) || void 0 === i ? void 0 : i.space) && n.a.createElement(n.a.Fragment, null, n.a.createElement("h3", null, W("Przerwa mi\u0119dzy profilami")), n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectSpace(e)
                        },
                        options: this.config[this.state.group].systems[this.state.system].types[this.state.type].pattern.customizable.space.options,
                        value: null === (o = this.state) || void 0 === o ? void 0 : o.space
                    })), n.a.createElement(en, {
                        action: function(e) {
                            return p.selectColor(e)
                        },
                        title: W("Kolor"),
                        options: this.config[this.state.group].systems[this.state.system].colors,
                        value: null === (s = this.state) || void 0 === s ? void 0 : s.color
                    }), "sliding" === this.state.type && n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Strona")), n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectSide(e)
                        },
                        options: {
                            front: W("Prz\xf3d"),
                            back: W("Ty\u0142")
                        },
                        value: null === (l = this.state) || void 0 === l ? void 0 : l.side,
                        align: "half"
                    })), n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Kierunek otwierania")), "swing" === this.state.type && n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectDirectionVertical(e)
                        },
                        options: this.props.object.directionVerticalList,
                        value: null === (r = this.state) || void 0 === r ? void 0 : r.directionVertical,
                        align: "half"
                    }), "sliding" === this.state.type && n.a.createElement(Zi, {
                        action: function(e) {
                            return p.selectDirectionHorizontal(e)
                        },
                        options: this.props.object.directionHorizontalList,
                        value: null === (c = this.state) || void 0 === c ? void 0 : c.directionHorizontal,
                        align: "half"
                    })), n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Sugerowana wysoko\u015b\u0107")), n.a.createElement("input", {
                        type: "number",
                        min: "0",
                        step: "0.01",
                        value: this.state.suggestedHeight,
                        placeholder: W("Domy\u015blnie"),
                        onChange: this.setSuggestedHeight,
                        onBlur: this.setSuggestedHeight,
                        style: {
                            width: "75px"
                        }
                    }), " ", n.a.createElement("small", null, "m"))))
                }
            }])
        }(n.a.Component);
        var nn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                }
                ,
                a.clear = function() {
                    a.setState({
                        group: null,
                        model: null,
                        height: null
                    }, (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    e !== a.state.group && a.setState((function() {
                        return {
                            group: e,
                            model: null,
                            height: null
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectModel = function(e) {
                    e !== a.state.model && a.setState((function(t) {
                        return {
                            model: e,
                            height: a.config[t.group].models[e].heights[t.height] ? t.height : P.first(a.config[t.group].models[e].heights)
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectHeight = function(e) {
                    a.setState({
                        height: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.config = w.app.config.panels,
                a.state = a.props.object.config,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, this.state.model && n.a.createElement(Hi, {
                        action: function() {
                            return i.clear()
                        },
                        type: "remove",
                        description: W("Usu\u0144")
                    }), n.a.createElement(Hi, {
                        action: function() {
                            ft("wall", i.props.object.wall.config, i.props.object.wall)
                        },
                        type: "prev",
                        description: W("Wr\xf3\u0107")
                    }), n.a.createElement("h2", null, W("Ustawienia paneli"))), P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (e = this.state) || void 0 === e ? void 0 : e.group
                    }), this.state.group && n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectModel(e)
                        },
                        options: this.config[this.state.group].models,
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.model
                    }), this.state.model && n.a.createElement(n.a.Fragment, null, n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectHeight(e)
                        },
                        title: W("Wysoko\u015b\u0107"),
                        options: this.config[this.state.group].models[this.state.model].heights,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.height
                    })))
                }
            }])
        }(n.a.Component);
        function on(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var sn = function(e) {
            function t() {
                return Object(l.a)(this, t),
                on(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement(Hi, {
                        action: function() {
                            ft("pole", e.props.object.config, e.props.object)
                        },
                        type: "prev",
                        description: W("Wr\xf3\u0107")
                    }), n.a.createElement("h2", null, W("Dodatki"))), w.app.getSystem().adds.mailboxes && n.a.createElement(n.a.Fragment, null, n.a.createElement("button", {
                        onClick: function() {
                            return ft("mailbox", e.props.object.additionals.mailbox.config, e.props.object.additionals.mailbox)
                        }
                    }, W("Skrzynki na listy")), n.a.createElement("br", null)), w.app.getSystem().adds.lamps && n.a.createElement(n.a.Fragment, null, n.a.createElement("button", {
                        onClick: function() {
                            return ft("lamp", e.props.object.additionals.lamp.config, e.props.object.additionals.lamp)
                        }
                    }, W("Lampy")), n.a.createElement("br", null)), w.app.getSystem().adds.ledblocks && n.a.createElement(n.a.Fragment, null, n.a.createElement("button", {
                        onClick: function() {
                            return ft("ledblock", e.props.object.additionals.ledblock.config, e.props.object.additionals.ledblock)
                        }
                    }, W("Lampy LED BLOCK")), n.a.createElement("br", null)))
                }
            }])
        }(n.a.Component);
        var ln = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                }
                ,
                a.clear = function() {
                    a.setState({
                        group: null,
                        model: null,
                        color: null,
                        frame: "",
                        roof: ""
                    }, (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    a.setState({
                        group: e
                    })
                }
                ,
                a.selectModel = function(e) {
                    e !== a.state.model && a.setState((function(t) {
                        var i;
                        return i = a.config[null === t || void 0 === t ? void 0 : t.group].models[e].colors[null === t || void 0 === t ? void 0 : t.color] ? t.color : P.first(a.config[null === t || void 0 === t ? void 0 : t.group].models[e].colors),
                        {
                            model: e,
                            color: i
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectColor = function(e) {
                    a.setState({
                        color: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectFrame = function(e) {
                    a.setState({
                        frame: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectRoof = function(e) {
                    a.setState({
                        roof: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectSide = function(e) {
                    a.setState({
                        side: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.getAdditionalList = function(e) {
                    var t = [];
                    return t[""] = W("Nie"),
                    a.config[a.state.group].models[a.state.model].additionals[e] && (t[a.config[a.state.group].models[a.state.model].additionals[e].model] = W("Tak")),
                    t
                }
                ,
                a.config = w.app.config.mailboxes,
                a.state = a.props.object.config,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i, o, s, l = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, this.state.model && n.a.createElement(Hi, {
                        action: function() {
                            return l.clear()
                        },
                        type: "remove",
                        description: W("Usu\u0144")
                    }), n.a.createElement(Hi, {
                        action: function() {
                            ft("additionals", null, l.props.object.target)
                        },
                        type: "prev",
                        description: W("Wr\xf3\u0107")
                    }), n.a.createElement("h2", null, W("Skrzynka na listy"))), P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return l.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (e = this.state) || void 0 === e ? void 0 : e.group
                    }), this.state.group && n.a.createElement(en, {
                        action: function(e) {
                            return l.selectModel(e)
                        },
                        options: this.props.object.getModelsList(this.config[this.state.group].models),
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.model
                    }), this.state.model && n.a.createElement(n.a.Fragment, null, n.a.createElement(en, {
                        action: function(e) {
                            return l.selectColor(e)
                        },
                        title: W("Kolor"),
                        options: this.config[this.state.group].models[this.state.model].colors,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.color
                    }), this.config[this.state.group].models[this.state.model].additionals.frame && !this.config[this.state.group].models[this.state.model].additionals.frame.auto && n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Maskownica")), n.a.createElement(Zi, {
                        action: function(e) {
                            return l.selectFrame(e)
                        },
                        options: this.getAdditionalList("frame"),
                        value: null === (i = this.state) || void 0 === i ? void 0 : i.frame,
                        align: "half"
                    })), this.config[this.state.group].models[this.state.model].additionals.roof && !this.config[this.state.group].models[this.state.model].additionals.roof.auto && n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Daszek")), n.a.createElement(Zi, {
                        action: function(e) {
                            return l.selectRoof(e)
                        },
                        options: this.getAdditionalList("roof"),
                        value: null === (o = this.state) || void 0 === o ? void 0 : o.roof,
                        align: "half"
                    })), n.a.createElement("div", {
                        className: "option"
                    }, n.a.createElement("h3", null, W("Strona")), n.a.createElement(Zi, {
                        action: function(e) {
                            return l.selectSide(e)
                        },
                        options: {
                            front: W("Prz\xf3d"),
                            back: W("Ty\u0142")
                        },
                        value: null === (s = this.state) || void 0 === s ? void 0 : s.side,
                        align: "half"
                    }))))
                }
            }])
        }(n.a.Component);
        var rn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                }
                ,
                a.clear = function() {
                    a.setState({
                        group: null,
                        model: null
                    }, (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    a.setState({
                        group: e
                    })
                }
                ,
                a.selectModel = function(e) {
                    e !== a.state.model && a.setState({
                        model: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.config = w.app.config.lamps,
                a.state = a.props.object.config,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, this.state.model && n.a.createElement(Hi, {
                        action: function() {
                            return a.clear()
                        },
                        type: "remove",
                        description: W("Usu\u0144")
                    }), n.a.createElement(Hi, {
                        action: function() {
                            ft("additionals", null, a.props.object.target)
                        },
                        type: "prev",
                        description: W("Wr\xf3\u0107")
                    }), n.a.createElement("h2", null, W("Lampa"))), P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return a.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (e = this.state) || void 0 === e ? void 0 : e.group
                    }), this.state.group && n.a.createElement(en, {
                        action: function(e) {
                            return a.selectModel(e)
                        },
                        options: this.props.object.getModelsList(this.config[this.state.group].models),
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.model
                    }))
                }
            }])
        }(n.a.Component);
        var cn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                }
                ,
                a.clear = function() {
                    a.setState({
                        group: null,
                        model: null,
                        color: null
                    }, (function() {
                        a.props.object.actions.set(a.state),
                        a.componentDidMount()
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    a.setState({
                        group: e
                    })
                }
                ,
                a.selectModel = function(e) {
                    e !== a.state.model && a.setState((function(t) {
                        var i;
                        return i = a.config[null === t || void 0 === t ? void 0 : t.group].models[e].colors[null === t || void 0 === t ? void 0 : t.color] ? t.color : P.first(a.config[null === t || void 0 === t ? void 0 : t.group].models[e].colors),
                        {
                            model: e,
                            color: i
                        }
                    }
                    ), (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.selectColor = function(e) {
                    a.setState({
                        color: e
                    }, (function() {
                        a.props.object.actions.set(a.state)
                    }
                    ))
                }
                ,
                a.config = w.app.config.ledblocks,
                a.state = a.props.object.config,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, this.state.model && n.a.createElement(Hi, {
                        action: function() {
                            return i.clear()
                        },
                        type: "remove",
                        description: W("Usu\u0144")
                    }), n.a.createElement(Hi, {
                        action: function() {
                            ft("additionals", null, i.props.object.target)
                        },
                        type: "prev",
                        description: W("Wr\xf3\u0107")
                    }), n.a.createElement("h2", null, W("Lampa LED BLOCK"))), P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (e = this.state) || void 0 === e ? void 0 : e.group
                    }), this.state.group && n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectModel(e)
                        },
                        options: this.props.object.getModelsList(this.config[this.state.group].models),
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.model
                    }), this.state.model && this.config[this.state.group].models[this.state.model] && n.a.createElement(n.a.Fragment, null, n.a.createElement(en, {
                        action: function(e) {
                            return i.selectColor(e)
                        },
                        title: W("Kolor"),
                        options: this.config[this.state.group].models[this.state.model].colors,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.color
                    })))
                }
            }])
        }(n.a.Component);
        function pn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var dn = function(e) {
            function t() {
                return Object(l.a)(this, t),
                pn(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, !this.props.object.boundary && n.a.createElement(Hi, {
                        action: function() {
                            return e.props.object.actions.remove()
                        },
                        type: "remove",
                        description: "".concat(W("Usu\u0144 pomiar"), " (DEL)")
                    }), n.a.createElement("h2", null, W("Ustawienia pomiaru"))), !this.props.object.boundary && n.a.createElement(Wi, {
                        action: function(t) {
                            return e.props.object.actions.type(t)
                        },
                        title: W("Typ"),
                        options: this.props.object.typesList,
                        value: this.props.object.config.type
                    }), n.a.createElement(Wi, {
                        action: function(t) {
                            return e.props.object.actions.position(t)
                        },
                        title: W("Pozycja"),
                        options: this.props.object.getPositionsList(),
                        value: this.props.object.config.position
                    }), n.a.createElement(Wi, {
                        action: function(t) {
                            return e.props.object.actions.align(t)
                        },
                        title: W("Wyr\xf3wnanie"),
                        options: this.props.object.alignsList,
                        value: this.props.object.config.align
                    }))
                }
            }])
        }(n.a.Component);
        function hn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var un = function(e) {
            function t() {
                return Object(l.a)(this, t),
                hn(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Kolor bloczk\xf3w"))), n.a.createElement(en, {
                        action: function(e, t) {
                            return w.app.actions.setBlocksColor(e, t)
                        },
                        options: w.app.getCurrentBlocksColorsList(),
                        value: w.app.blocksColor
                    }))
                }
            }])
        }(n.a.Component);
        function mn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var gn = function(e) {
            function t() {
                return Object(l.a)(this, t),
                mn(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Kolor daszk\xf3w"))), P.entries(w.app.getCurrentPeaksColorsList()).map((function(e) {
                        var t = Object(N.a)(e, 2)
                          , a = t[0]
                          , o = t[1];
                        return n.a.createElement(i.Fragment, {
                            key: a
                        }, P.keys(w.app.getCurrentPeaksColorsList()).length > 1 && n.a.createElement("h3", null, o.label), n.a.createElement(en, {
                            action: function(e, t) {
                                return w.app.actions.setPeaksColor(e, t)
                            },
                            options: o.colors,
                            value: w.app.peaksColor
                        }))
                    }
                    )))
                }
            }])
        }(n.a.Component);
        var fn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).start = function() {
                    a.setState({
                        status: !0
                    })
                }
                ,
                a.clear = function() {
                    ot(W("Usun\u0105\u0107 ?"), (function() {
                        a.setState({
                            status: !1,
                            system: null,
                            variant: null,
                            color: null
                        }, (function() {
                            w.app.actions.setCombo(a.state)
                        }
                        ))
                    }
                    ))
                }
                ,
                a.selectSystem = function(e) {
                    e !== a.state.system && a.setState({
                        system: e,
                        variant: null,
                        color: a.config[e].default.color
                    }, (function() {
                        w.app.actions.setCombo(a.state)
                    }
                    ))
                }
                ,
                a.selectVariant = function(e) {
                    a.setState({
                        variant: e
                    }, (function() {
                        w.app.actions.setCombo(a.state)
                    }
                    ))
                }
                ,
                a.selectColor = function(e) {
                    a.setState({
                        color: e
                    }, (function() {
                        w.app.actions.setCombo(a.state)
                    }
                    ))
                }
                ,
                a.getSystemsList = function() {
                    var e = [];
                    return P.entries(a.config).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        i in w.app.getSystem().adds.combo && (e[i] = n)
                    }
                    )),
                    e
                }
                ,
                a.getVariantsList = function() {
                    var e = [];
                    return P.entries(a.config[a.state.system].variants).forEach((function(t) {
                        var i = Object(N.a)(t, 2)
                          , n = i[0]
                          , o = i[1];
                        0 === n.indexOf("".concat(w.app.getSystem().adds.combo[a.state.system], "/")) && (e[n] = o)
                    }
                    )),
                    e
                }
                ,
                a.config = w.app.config.combo,
                a.state = a.props.object,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, this.state.system && n.a.createElement(Hi, {
                        action: function() {
                            return i.clear()
                        },
                        type: "remove",
                        description: W("Usu\u0144 kombo")
                    }), n.a.createElement("h2", null, W("Ustawienia kombo"))), this.state.status ? n.a.createElement(n.a.Fragment, null, n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectSystem(e)
                        },
                        title: W("System"),
                        options: this.getSystemsList(),
                        value: null === (e = this.state) || void 0 === e ? void 0 : e.system
                    }), this.state.system && n.a.createElement(n.a.Fragment, null, n.a.createElement(Wi, {
                        action: function(e) {
                            return i.selectVariant(e)
                        },
                        title: W("Konfiguracja"),
                        options: this.getVariantsList(),
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.variant
                    }), n.a.createElement(en, {
                        action: function(e) {
                            return i.selectColor(e)
                        },
                        title: W("Kolor"),
                        options: this.config[this.state.system].colors,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.color
                    }))) : n.a.createElement(n.a.Fragment, null, n.a.createElement("br", null), n.a.createElement("button", {
                        onClick: this.start
                    }, W("Dodaj"))))
                }
            }])
        }(n.a.Component);
        var bn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).start = function() {
                    a.setState({
                        status: !0
                    }, (function() {
                        1 === P.count(a.config) && a.selectGroup(P.first(a.config))
                    }
                    ))
                }
                ,
                a.clear = function() {
                    ot(W("Usun\u0105\u0107 ?"), (function() {
                        a.setState({
                            status: !1,
                            group: null,
                            system: null,
                            variant: null,
                            space: null,
                            color: null
                        }, (function() {
                            w.app.actions.setFencings(a.state)
                        }
                        ))
                    }
                    ))
                }
                ,
                a.selectGroup = function(e) {
                    e !== a.state.group && a.setState((function() {
                        return {
                            group: e,
                            system: null,
                            variant: null,
                            space: null,
                            color: null
                        }
                    }
                    ), (function() {
                        w.app.actions.setFencings(a.state)
                    }
                    ))
                }
                ,
                a.selectSystem = function(e) {
                    e !== a.state.system && a.setState((function(t) {
                        var i;
                        return {
                            system: e,
                            variant: a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.variant,
                            space: (null === (i = a.config[t.group].systems[e].pattern.customizable) || void 0 === i ? void 0 : i.space) ? a.config[t.group].systems[e].pattern.customizable.space.default : null,
                            color: a.config[null === t || void 0 === t ? void 0 : t.group].systems[e].default.color
                        }
                    }
                    ), (function() {
                        w.app.actions.setFencings(a.state)
                    }
                    ))
                }
                ,
                a.selectVariant = function(e) {
                    a.setState({
                        variant: e
                    }, (function() {
                        w.app.actions.setFencings(a.state)
                    }
                    ))
                }
                ,
                a.selectSpace = function(e) {
                    a.setState({
                        space: e
                    }, (function() {
                        w.app.actions.setFencings(a.state)
                    }
                    ))
                }
                ,
                a.selectColor = function(e) {
                    a.setState({
                        color: e
                    }, (function() {
                        w.app.actions.setFencings(a.state)
                    }
                    ))
                }
                ,
                a.config = w.app.config.fencings,
                a.state = a.props.object,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a, i, o, s, l = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, this.state.system && n.a.createElement(Hi, {
                        action: function() {
                            return l.clear()
                        },
                        type: "remove",
                        description: W("Usu\u0144 wype\u0142nienia")
                    }), n.a.createElement("h2", null, W("Ustawienia wype\u0142nie\u0144"))), n.a.createElement("div", {
                        className: "info"
                    }, W("Wype\u0142nienia zamieszczone w wizualizacji zosta\u0142y przedstawione wy\u0142\u0105cznie podgl\u0105dowo."), " ", W("W celu uzyskania wyceny prosimy o kontakt z dzia\u0142em obs\u0142ugi klienta indywidualnego lub najbli\u017cszym dystrybutorem.")), this.state.status ? n.a.createElement(n.a.Fragment, null, P.count(this.config) > 1 && n.a.createElement(Wi, {
                        action: function(e) {
                            return l.selectGroup(e)
                        },
                        title: W("Grupa"),
                        options: this.config,
                        value: null === (e = this.state) || void 0 === e ? void 0 : e.group
                    }), this.state.group && n.a.createElement(Wi, {
                        action: function(e) {
                            return l.selectSystem(e)
                        },
                        title: W("System"),
                        options: this.config[this.state.group].systems,
                        value: null === (t = this.state) || void 0 === t ? void 0 : t.system
                    }), this.state.system && n.a.createElement(n.a.Fragment, null, n.a.createElement(Wi, {
                        action: function(e) {
                            return l.selectVariant(e)
                        },
                        title: W("Konfiguracja"),
                        options: this.config[this.state.group].systems[this.state.system].variants,
                        value: null === (a = this.state) || void 0 === a ? void 0 : a.variant
                    }), (null === (i = this.config[this.state.group].systems[this.state.system].pattern.customizable) || void 0 === i ? void 0 : i.space) && n.a.createElement(n.a.Fragment, null, n.a.createElement("h3", null, W("Przerwa mi\u0119dzy profilami")), n.a.createElement(Zi, {
                        action: function(e) {
                            return l.selectSpace(e)
                        },
                        options: this.config[this.state.group].systems[this.state.system].pattern.customizable.space.options,
                        value: null === (o = this.state) || void 0 === o ? void 0 : o.space
                    })), n.a.createElement(en, {
                        action: function(e) {
                            return l.selectColor(e)
                        },
                        title: W("Kolor"),
                        options: this.config[this.state.group].systems[this.state.system].colors,
                        value: null === (s = this.state) || void 0 === s ? void 0 : s.color
                    }))) : n.a.createElement(n.a.Fragment, null, n.a.createElement("br", null), n.a.createElement("button", {
                        onClick: this.start
                    }, W("Dodaj"))))
                }
            }])
        }(n.a.Component);
        var wn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).list = function() {
                    var e = {};
                    return P.keys(a.config.pole[P.first(a.config.pole)]).forEach((function(t) {
                        t !== w.app.system && (e[t] = w.app.config.systems[t].label)
                    }
                    )),
                    e
                }
                ,
                a.config = w.app.config.migrations[w.app.getSystem().migration],
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Migruj projekt"))), n.a.createElement(Wi, {
                        action: function(e) {
                            return w.app.actions.migration(e)
                        },
                        title: n.a.createElement("small", null, "".concat(W("Obecny projekt mo\u017cna zmigrowa\u0107 do"), ":")),
                        options: this.list()
                    }))
                }
            }])
        }(n.a.Component);
        var vn = function(e) {
            function t(e) {
                var a, i, o, s;
                return Object(l.a)(this, t),
                i = this,
                o = t,
                s = [e],
                o = Object(d.a)(o),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(o, s || [], Object(d.a)(i).constructor) : o.apply(i, s))).componentDidMount = function() {
                    P.entries(a.state).forEach((function(e) {
                        var t = Object(N.a)(e, 2)
                          , i = t[0]
                          , n = t[1];
                        a.setState(Object(O.a)({}, i, a.validate(i, n)))
                    }
                    ))
                }
                ,
                a.onChange = function(e) {
                    var t = e.target.name
                      , i = "checkbox" === e.target.type ? e.target.checked : e.target.value;
                    a.setState(Object(O.a)({}, t, i)),
                    w.app.actions.setSetting(t, a.validate(t, i))
                }
                ,
                a.onBlur = function(e) {
                    var t = e.target.name
                      , i = "checkbox" === e.target.type ? e.target.checked : e.target.value;
                    a.setState(Object(O.a)({}, t, a.validate(t, i)))
                }
                ,
                a.validate = function(e, t) {
                    var a;
                    switch (e) {
                    case "defaultDistance":
                        (t = parseFloat(t) || 0) < (a = w.app.getBlocksFamily().settings.distance.min) && (t = a),
                        t = He.numberFormat(t, 3, ".");
                        break;
                    case "heightPoles":
                    case "heightWalls":
                        (t = parseInt(t, 10) || 0) < (a = 1) && (t = a)
                    }
                    return t
                }
                ,
                a.field = function(e, t) {
                    var i = !0;
                    if (t.conditions && P.entries(t.conditions).forEach((function(e) {
                        var t = Object(N.a)(e, 2)
                          , a = t[0]
                          , n = t[1];
                        switch (a) {
                        case "peaksFamily":
                            w.app.peaksFamily !== n && (i = !1)
                        }
                    }
                    )),
                    i)
                        switch (t.type) {
                        case "checkbox":
                            return n.a.createElement("div", {
                                className: "checkbox",
                                key: e
                            }, n.a.createElement("input", {
                                type: "checkbox",
                                name: e,
                                defaultChecked: a.state[e],
                                onChange: function(e) {
                                    a.onChange(e),
                                    t.reload && w.app.projectReload()
                                }
                            }), n.a.createElement("div", null, t.label))
                        }
                    return n.a.createElement(n.a.Fragment, null)
                }
                ,
                a.materialPoles = w.app.getMaterialPoles(),
                a.materialWalls = w.app.getMaterialWalls(),
                a.options = w.app.getSystemOptions(),
                a.state = a.props.object,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "title"
                    }, n.a.createElement("h2", null, W("Ustawienia projektu"))), n.a.createElement("div", {
                        className: "options-group"
                    }, n.a.createElement("h3", null, W("Nazwa")), n.a.createElement("input", {
                        type: "text",
                        name: "title",
                        value: this.state.title,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), n.a.createElement("h3", null, W("Opis")), n.a.createElement("textarea", {
                        name: "description",
                        rows: "3",
                        value: this.state.description,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    })), n.a.createElement("div", {
                        className: "options-group"
                    }, n.a.createElement("h3", null, W("Odleg\u0142o\u015b\u0107 mi\u0119dzy s\u0142upkami")), n.a.createElement("input", {
                        type: "number",
                        min: "0",
                        step: "0.01",
                        name: "defaultDistance",
                        value: this.state.defaultDistance,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), " ", n.a.createElement("small", null, "m"), n.a.createElement("h3", null, W("Wysoko\u015b\u0107 ogrodzenia")), n.a.createElement("input", {
                        type: "number",
                        name: "heightPoles",
                        value: this.state.heightPoles,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), "\xa0", n.a.createElement("button", {
                        onClick: function() {
                            return w.app.actions.setAllHeightPoles()
                        }
                    }, W("Zastosuj do wszystkich")), n.a.createElement("h3", null, W("Wysoko\u015b\u0107 podmur\xf3wek")), n.a.createElement("input", {
                        type: "number",
                        name: "heightWalls",
                        value: this.state.heightWalls,
                        onChange: this.onChange,
                        onBlur: this.onBlur
                    }), "\xa0", n.a.createElement("button", {
                        onClick: function() {
                            return w.app.actions.setAllHeightWalls()
                        }
                    }, W("Zastosuj do wszystkich")), P.count(this.materialPoles) > 1 && n.a.createElement(n.a.Fragment, null, n.a.createElement("h3", null, W("Rodzaj s\u0142upk\xf3w")), n.a.createElement("select", {
                        name: "materialPoles",
                        value: this.state.materialPoles,
                        onChange: this.onChange,
                        ref: function(t) {
                            e.materialPolesRef = t
                        }
                    }, P.entries(this.materialPoles).map((function(e) {
                        var t = Object(N.a)(e, 2)
                          , a = t[0]
                          , i = t[1];
                        return n.a.createElement("option", {
                            value: a,
                            key: a
                        }, i)
                    }
                    ))), n.a.createElement("button", {
                        onClick: function() {
                            return w.app.actions.setAllMaterialPoles(e.materialPolesRef.value)
                        }
                    }, W("Zastosuj do wszystkich"))), P.count(this.materialWalls) > 1 && n.a.createElement(n.a.Fragment, null, n.a.createElement("h3", null, W("Rodzaj podmur\xf3wek")), n.a.createElement("select", {
                        name: "materialWalls",
                        value: this.state.materialWalls,
                        onChange: this.onChange,
                        ref: function(t) {
                            e.materialWallsRef = t
                        }
                    }, P.entries(this.materialWalls).map((function(e) {
                        var t = Object(N.a)(e, 2)
                          , a = t[0]
                          , i = t[1];
                        return n.a.createElement("option", {
                            value: a,
                            key: a
                        }, i)
                    }
                    ))), n.a.createElement("button", {
                        onClick: function() {
                            return w.app.actions.setAllMaterialWalls(e.materialWallsRef.value)
                        }
                    }, W("Zastosuj do wszystkich")))), n.a.createElement("div", {
                        className: "options-group"
                    }, n.a.createElement("h3", null, W("Opcje systemu")), !!P.count(this.options) && n.a.createElement(n.a.Fragment, null, P.entries(this.options).map((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        return e.field(i, n)
                    }
                    ))), this.field("chemicals", {
                        type: "checkbox",
                        label: W("Dodaj chemi\u0119 do betonu na wycenie")
                    })))
                }
            }])
        }(n.a.Component);
        function yn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var kn = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), o = 0; o < a; o++)
                    i[o] = arguments[o];
                return (e = yn(this, t, [].concat(i))).content = function() {
                    switch (e.props.type) {
                    case "episode":
                        return n.a.createElement(Vi, null);
                    case "pole":
                        return n.a.createElement(Ki, {
                            object: e.props.object
                        });
                    case "wall":
                        return n.a.createElement(Ji, {
                            object: e.props.object
                        });
                    case "wicket":
                        return n.a.createElement(tn, {
                            object: e.props.object
                        });
                    case "gate":
                        return n.a.createElement(an, {
                            object: e.props.object
                        });
                    case "panels":
                        return n.a.createElement(nn, {
                            object: e.props.object
                        });
                    case "additionals":
                        return n.a.createElement(sn, {
                            object: e.props.object
                        });
                    case "mailbox":
                        return n.a.createElement(ln, {
                            object: e.props.object
                        });
                    case "lamp":
                        return n.a.createElement(rn, {
                            object: e.props.object
                        });
                    case "ledblock":
                        return n.a.createElement(cn, {
                            object: e.props.object
                        });
                    case "dimension":
                        return n.a.createElement(dn, {
                            object: e.props.object
                        });
                    case "colors-blocks":
                        return n.a.createElement(un, null);
                    case "colors-peaks":
                        return n.a.createElement(gn, null);
                    case "combo":
                        return n.a.createElement(fn, {
                            object: e.props.object
                        });
                    case "fencings":
                        return n.a.createElement(bn, {
                            object: e.props.object
                        });
                    case "migration":
                        return n.a.createElement(wn, null);
                    case "settings":
                        return n.a.createElement(vn, {
                            object: e.props.object
                        })
                    }
                    return n.a.createElement(n.a.Fragment, null)
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("section", null, n.a.createElement("div", {
                        className: "row-panel"
                    }, n.a.createElement(zi, null), n.a.createElement(Si, null), n.a.createElement(Fi, null), n.a.createElement("div", {
                        className: "content"
                    }, this.content())), n.a.createElement("div", {
                        className: "row-switcher"
                    }, n.a.createElement("button", {
                        onClick: function() {
                            return w.app.actions.switchView()
                        }
                    }, "2D/3D")))
                }
            }])
        }(n.a.Component);
        kn.defaultProps = {
            type: null,
            object: null
        };
        var xn = Object(m.b)((function(e) {
            return {
                type: e.panel.type,
                state: JSON.stringify(e.panel.state),
                object: e.panel.object
            }
        }
        ), null)(kn);
        function jn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var zn = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), o = 0; o < a; o++)
                    i[o] = arguments[o];
                return (e = jn(this, t, [].concat(i))).display = function(t, a) {
                    return !a.status || a.position !== t || a.views && !P.in(e.props.view, a.views) ? n.a.createElement(n.a.Fragment, null) : n.a.createElement(n.a.Fragment, {
                        key: a.id
                    }, "function" === typeof a.node ? a.node() : a.node)
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(n.a.Fragment, null, n.a.createElement("div", {
                        className: "top-left"
                    }, P.values(this.props.objects).map((function(t) {
                        return n.a.createElement(n.a.Fragment, {
                            key: t.id
                        }, e.display("top-left", t))
                    }
                    ))), n.a.createElement("div", {
                        className: "top-right"
                    }, P.valuesReverse(this.props.objects).map((function(t) {
                        return n.a.createElement(n.a.Fragment, {
                            key: t.id
                        }, e.display("top-right", t))
                    }
                    ))), n.a.createElement("div", {
                        className: "bottom-left"
                    }, P.values(this.props.objects).map((function(t) {
                        return n.a.createElement(n.a.Fragment, {
                            key: t.id
                        }, e.display("bottom-left", t))
                    }
                    ))), n.a.createElement("div", {
                        className: "bottom-right"
                    }, P.valuesReverse(this.props.objects).map((function(t) {
                        return n.a.createElement(n.a.Fragment, {
                            key: t.id
                        }, e.display("bottom-right", t))
                    }
                    ))), P.values(this.props.objects).map((function(t) {
                        return n.a.createElement(n.a.Fragment, {
                            key: t.id
                        }, e.display("main", t))
                    }
                    )))
                }
            }])
        }(n.a.Component);
        zn.defaultProps = {
            view: null,
            objects: null
        };
        var Mn = Object(m.b)((function(e) {
            return {
                update: e.workspace.update,
                view: e.workspace.view,
                objects: e.workspace.objects
            }
        }
        ), null)(zn);
        function On(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var En = function(e) {
            function t() {
                return Object(l.a)(this, t),
                On(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement("section", null, n.a.createElement("div", {
                        className: "row-workspace"
                    }, n.a.createElement("div", {
                        className: "canvas",
                        ref: function(t) {
                            e.canvas = t
                        }
                    }), n.a.createElement("div", {
                        className: "canvas-helper",
                        ref: function(t) {
                            e.canvasHelper = t
                        }
                    }), n.a.createElement(Mn, null)))
                }
            }])
        }(n.a.Component);
        function _n(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Sn = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), n = 0; n < a; n++)
                    i[n] = arguments[n];
                return (e = _n(this, t, [].concat(i))).componentDidMount = function() {
                    w.app = new vi({
                        intro: w.intro,
                        canvas: [w.workspace.canvas, w.workspace.canvasHelper],
                        config: e.props.config,
                        type: e.props.type,
                        debug: e.props.debug,
                        id: e.props.id,
                        project: e.props.project
                    })
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("div", {
                        id: "application",
                        className: G()("grid", {
                            preview: "normal" !== this.props.type
                        })
                    }, n.a.createElement("div", {
                        className: "col-panel"
                    }, n.a.createElement(xn, null)), n.a.createElement("div", {
                        className: "col-workspace"
                    }, n.a.createElement(En, {
                        ref: function(e) {
                            w.workspace = e
                        }
                    })))
                }
            }])
        }(n.a.Component);
        Sn.defaultProps = {
            config: null,
            type: "normal",
            debug: !1,
            id: 0,
            project: null
        };
        var Pn = Sn;
        function Cn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Dn = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Cn(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement("button", {
                        onClick: this.props.action
                    }, n.a.createElement("div", {
                        className: "image",
                        style: {
                            backgroundImage: "url(".concat(this.props.background, "?v=20230413)")
                        }
                    }), n.a.createElement("div", {
                        className: "label",
                        dangerouslySetInnerHTML: {
                            __html: this.props.label
                        }
                    }))
                }
            }])
        }(n.a.Component);
        Dn.defaultProps = {
            action: null,
            background: null,
            label: null
        };
        var Rn = Dn;
        var Fn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).getSystemsList = function() {
                    var e = [];
                    return P.entries(a.instance.config.systems).forEach((function(t) {
                        var a = Object(N.a)(t, 2)
                          , i = a[0]
                          , n = a[1];
                        P.in(i, w.permissions) && (e[i] = n)
                    }
                    )),
                    e
                }
                ,
                a.selectSystem = function(e) {
                    var t, i;
                    (a.families = null === (t = a.systems[e]) || void 0 === t ? void 0 : t.blocks,
                    P.count(a.families)) && (1 === P.count(a.families) ? (a.instance.state.project = {
                        data: {
                            system: e,
                            blocksFamily: P.first(null === (i = a.systems[e]) || void 0 === i ? void 0 : i.blocks)
                        }
                    },
                    a.run()) : (a.instance.state.project = {
                        data: {
                            system: e
                        }
                    },
                    a.forceUpdate()))
                }
                ,
                a.selectFamily = function(e) {
                    a.instance.state.project.data.blocksFamily = e,
                    a.run()
                }
                ,
                a.run = function() {
                    w.app ? (w.app.project = a.instance.state.project,
                    w.app.reset(),
                    a.forceUpdate()) : a.instance.forceUpdate()
                }
                ,
                a.instance = a.props.instance,
                a.systems = a.getSystemsList(),
                a.families = null,
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t, a = this;
                    return (null === (e = this.instance.state.project) || void 0 === e ? void 0 : e.data.system) ? (null === (t = this.instance.state.project) || void 0 === t ? void 0 : t.data.blocksFamily) ? n.a.createElement(n.a.Fragment, null) : n.a.createElement("div", {
                        className: "wrapper"
                    }, n.a.createElement("h1", null, W("Wybierz konfiguracj\u0119")), n.a.createElement("section", {
                        className: "systems-list"
                    }, P.entries(this.families).map((function(e) {
                        var t = Object(N.a)(e, 2)
                          , i = t[0]
                          , o = t[1];
                        return (o.visible || "gl8" === i && P.in(w.user.login, ["dark24labs@op.pl", "dariusz.dziadon@gmail.com"])) && n.a.createElement("div", {
                            className: "col col-4",
                            key: i
                        }, n.a.createElement(Rn, {
                            action: function() {
                                return a.selectFamily(i)
                            },
                            background: [a.instance.config.systemsDir, a.instance.state.project.data.system, "/blocks/", i, ".jpg"].join(""),
                            label: o.label
                        }))
                    }
                    )))) : n.a.createElement("div", {
                        className: "wrapper"
                    }, n.a.createElement("h1", null, W("Wybierz system")), n.a.createElement("section", {
                        className: "systems-list"
                    }, P.entries(this.systems).map((function(e) {
                        var t = Object(N.a)(e, 2)
                          , i = t[0]
                          , o = t[1];
                        return n.a.createElement("div", {
                            className: "col col-4",
                            key: i
                        }, n.a.createElement(Rn, {
                            action: function() {
                                return a.selectSystem(i)
                            },
                            background: [a.instance.config.systemsDir, i, ".jpg"].join(""),
                            label: o.label
                        }))
                    }
                    ))))
                }
            }])
        }(n.a.Component);
        var Vn = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    a.id ? M.post("project/".concat(a.id, "/"), {
                        success: function(e) {
                            try {
                                var t = e;
                                t.data = JSON.parse(t.data),
                                a.setState({
                                    view: "default",
                                    project: t
                                })
                            } catch (i) {}
                        }
                    }) : a.setState({
                        view: "default"
                    })
                }
                ,
                a.id = a.props.match.params.id ? parseInt(a.props.match.params.id, 10) : 0,
                a.vr = Boolean(a.props.match.params.vr),
                a.config = at(),
                a.state = {
                    view: "loading",
                    debug: "dev" === w.config.env,
                    project: null
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e, t;
                    switch (this.state.view) {
                    default:
                        return (null === (e = this.state.project) || void 0 === e ? void 0 : e.data.system) && (null === (t = this.state.project) || void 0 === t ? void 0 : t.data.blocksFamily) ? n.a.createElement(nt, null, n.a.createElement(Fn, {
                            instance: this,
                            ref: function(e) {
                                w.intro = e
                            }
                        }), n.a.createElement(Pn, {
                            config: this.config,
                            type: this.vr ? "vr" : "normal",
                            debug: this.state.debug,
                            id: this.id,
                            project: this.state.project
                        }), n.a.createElement(ct, null), n.a.createElement(mt, null)) : n.a.createElement(nt, null, n.a.createElement(Fn, {
                            instance: this
                        }));
                    case "loading":
                        return n.a.createElement(n.a.Fragment, null)
                    }
                }
            }])
        }(n.a.Component);
        Vn.defaultProps = {
            match: null
        };
        var In = Vn;
        var Ln = function(e) {
            function t(e) {
                var a, i, n, o;
                return Object(l.a)(this, t),
                i = this,
                n = t,
                o = [e],
                n = Object(d.a)(n),
                (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                    M.post("preview/".concat(a.id, "/").concat(a.token, "/"), {
                        success: function(e) {
                            try {
                                var t = e;
                                t.data = JSON.parse(t.data),
                                a.setState({
                                    view: "default",
                                    project: t
                                })
                            } catch (i) {}
                        }
                    })
                }
                ,
                a.id = a.props.match.params.id ? parseInt(a.props.match.params.id, 10) : 0,
                a.token = !!a.props.match.params.token && a.props.match.params.token,
                a.vr = Boolean(a.props.match.params.vr),
                a.config = at(),
                a.state = {
                    view: "loading",
                    debug: "dev" === w.config.env,
                    project: null
                },
                a
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    default:
                        return n.a.createElement(nt, null, n.a.createElement(Pn, {
                            config: this.config,
                            type: this.vr ? "vr" : "preview",
                            debug: this.state.debug,
                            id: this.id,
                            project: this.state.project
                        }));
                    case "loading":
                        return n.a.createElement(n.a.Fragment, null)
                    }
                }
            }])
        }(n.a.Component);
        Ln.defaultProps = {
            match: null
        };
        var Hn = [F, L, B, ze, Ge, {
            reducers: {
                panel: qe,
                workspace: Xe
            },
            views: [{
                route: {
                    path: "project",
                    component: In
                }
            }, {
                route: {
                    path: "project/:id",
                    component: In
                }
            }, {
                route: {
                    path: "preview/:id/:token",
                    component: Ln,
                    auth: !1
                }
            }, {
                route: {
                    path: "graphic-details",
                    component: function(e) {
                        function t(e) {
                            var a, i, n, o;
                            return Object(l.a)(this, t),
                            i = this,
                            n = t,
                            o = [e],
                            n = Object(d.a)(n),
                            (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).onChange = function(e) {
                                var t = e.target.name
                                  , i = "checkbox" === e.target.type ? e.target.checked : e.target.value;
                                a.setState(Object(O.a)({}, t, i))
                            }
                            ,
                            a.onSubmit = function(e) {
                                e.preventDefault(),
                                P.entries(a.state).forEach((function(e) {
                                    var t = Object(N.a)(e, 2)
                                      , a = t[0]
                                      , i = t[1];
                                    localStorage.setItem("graphic-details-".concat(a), i)
                                }
                                )),
                                window.location.replace(document.referrer || "/")
                            }
                            ,
                            a.state = {
                                window: localStorage.getItem("graphic-details-window") || "",
                                theme: localStorage.getItem("graphic-details-theme") || "",
                                framelimit: localStorage.getItem("graphic-details-framelimit") || "",
                                antialiassing: localStorage.getItem("graphic-details-antialiassing") || "",
                                shadows: localStorage.getItem("graphic-details-shadows") || "",
                                ground: localStorage.getItem("graphic-details-ground") || ""
                            },
                            a
                        }
                        return Object(h.a)(t, e),
                        Object(r.a)(t, [{
                            key: "render",
                            value: function() {
                                var e = {
                                    paddingRight: "0.5em",
                                    paddingBottom: "0.5em",
                                    fontWeight: "bold",
                                    textAlign: "right",
                                    verticalAlign: "top"
                                }
                                  , t = {
                                    paddingBottom: "0.5em",
                                    textAlign: "left",
                                    verticalAlign: "top"
                                }
                                  , a = {
                                    display: "block"
                                };
                                return n.a.createElement(ne, null, n.a.createElement("h1", null, W("Ustawienia grafiki")), n.a.createElement("div", {
                                    className: "form"
                                }, n.a.createElement("form", {
                                    onSubmit: this.onSubmit
                                }, n.a.createElement("table", null, n.a.createElement("tbody", null, n.a.createElement("tr", null, n.a.createElement("td", {
                                    style: e
                                }, W("Uk\u0142ad okien"), ":"), n.a.createElement("td", {
                                    style: t
                                }, n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "window",
                                    value: "",
                                    checked: "" === this.state.window,
                                    onChange: this.onChange
                                }), W("Domy\u015blnie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "window",
                                    value: "none",
                                    checked: "none" === this.state.window,
                                    onChange: this.onChange
                                }), W("Brak")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "window",
                                    value: "vertical",
                                    checked: "vertical" === this.state.window,
                                    onChange: this.onChange
                                }), W("Pionowo")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "window",
                                    value: "horizontal",
                                    checked: "horizontal" === this.state.window,
                                    onChange: this.onChange
                                }), W("Poziomo")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "window",
                                    value: "cascade-technical",
                                    checked: "cascade-technical" === this.state.window,
                                    onChange: this.onChange
                                }), "".concat(W("Kaskadowo"), " - ").concat(W("techniczny"))), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "window",
                                    value: "cascade-main",
                                    checked: "cascade-main" === this.state.window,
                                    onChange: this.onChange
                                }), "".concat(W("Kaskadowo"), " - ").concat(W("g\u0142\xf3wny"))))), n.a.createElement("tr", null, n.a.createElement("td", {
                                    style: e
                                }, W("Schemat kolor\xf3w"), ":"), n.a.createElement("td", {
                                    style: t
                                }, n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "theme",
                                    value: "",
                                    checked: "" === this.state.theme,
                                    onChange: this.onChange
                                }), W("Domy\u015blnie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "theme",
                                    value: "white",
                                    checked: "white" === this.state.theme,
                                    onChange: this.onChange
                                }), W("Jasny")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "theme",
                                    value: "dark",
                                    checked: "dark" === this.state.theme,
                                    onChange: this.onChange
                                }), W("Ciemny")))), n.a.createElement("tr", null, n.a.createElement("td", {
                                    style: e
                                }, W("Limiter klatek"), ":"), n.a.createElement("td", {
                                    style: t
                                }, n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "framelimit",
                                    value: "",
                                    checked: "" === this.state.framelimit,
                                    onChange: this.onChange
                                }), W("Domy\u015blnie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "framelimit",
                                    value: "on",
                                    checked: "on" === this.state.framelimit,
                                    onChange: this.onChange
                                }), W("W\u0142\u0105czony")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "framelimit",
                                    value: "off",
                                    checked: "off" === this.state.framelimit,
                                    onChange: this.onChange
                                }), W("Wy\u0142\u0105czony")))), n.a.createElement("tr", null, n.a.createElement("td", {
                                    style: e
                                }, W("Wyg\u0142adzanie kraw\u0119dzi"), ":"), n.a.createElement("td", {
                                    style: t
                                }, n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "antialiassing",
                                    value: "",
                                    checked: "" === this.state.antialiassing,
                                    onChange: this.onChange
                                }), W("Domy\u015blnie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "antialiassing",
                                    value: "on",
                                    checked: "on" === this.state.antialiassing,
                                    onChange: this.onChange
                                }), W("W\u0142\u0105czony")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "antialiassing",
                                    value: "off",
                                    checked: "off" === this.state.antialiassing,
                                    onChange: this.onChange
                                }), W("Wy\u0142\u0105czony")))), n.a.createElement("tr", null, n.a.createElement("td", {
                                    style: e
                                }, W("Cienie"), ":"), n.a.createElement("td", {
                                    style: t
                                }, n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "shadows",
                                    value: "",
                                    checked: "" === this.state.shadows,
                                    onChange: this.onChange
                                }), W("Domy\u015blnie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "shadows",
                                    value: "off",
                                    checked: "off" === this.state.shadows,
                                    onChange: this.onChange
                                }), W("Wy\u0142\u0105czone")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "shadows",
                                    value: "slow",
                                    checked: "slow" === this.state.shadows,
                                    onChange: this.onChange
                                }), W("Standardowe")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "shadows",
                                    value: "medium",
                                    checked: "medium" === this.state.shadows,
                                    onChange: this.onChange
                                }), W("\u015arednie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "shadows",
                                    value: "high",
                                    checked: "high" === this.state.shadows,
                                    onChange: this.onChange
                                }), W("Dok\u0142adne")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "shadows",
                                    value: "full",
                                    checked: "full" === this.state.shadows,
                                    onChange: this.onChange
                                }), W("Bardzo dok\u0142adne")))), n.a.createElement("tr", null, n.a.createElement("td", {
                                    style: e
                                }, W("Pod\u0142o\u017ce"), ":"), n.a.createElement("td", {
                                    style: t
                                }, n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "ground",
                                    value: "",
                                    checked: "" === this.state.ground,
                                    onChange: this.onChange
                                }), W("Domy\u015blnie")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "ground",
                                    value: "pavement",
                                    checked: "pavement" === this.state.ground,
                                    onChange: this.onChange
                                }), W("Kostka")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "ground",
                                    value: "gravel",
                                    checked: "gravel" === this.state.ground,
                                    onChange: this.onChange
                                }), W("Kamyczki")), n.a.createElement("label", {
                                    style: a
                                }, n.a.createElement("input", {
                                    type: "radio",
                                    name: "ground",
                                    value: "grass",
                                    checked: "grass" === this.state.ground,
                                    onChange: this.onChange
                                }), W("Trawa")))))), n.a.createElement("fieldset", {
                                    className: "submit"
                                }, n.a.createElement("button", {
                                    className: "button"
                                }, W("Zapisz"))))))
                            }
                        }])
                    }(n.a.Component),
                    auth: !1
                }
            }, {
                route: {
                    path: "gamepad",
                    component: function(e) {
                        function t(e) {
                            var a, i, n, o;
                            return Object(l.a)(this, t),
                            i = this,
                            n = t,
                            o = [e],
                            n = Object(d.a)(n),
                            (a = Object(c.a)(i, Object(p.a)() ? Reflect.construct(n, o || [], Object(d.a)(i).constructor) : n.apply(i, o))).componentDidMount = function() {
                                window.addEventListener("gamepadconnected", (function() {
                                    a.setState({
                                        status: "Connected"
                                    })
                                }
                                )),
                                a.reqestAnimation()
                            }
                            ,
                            a.reqestAnimation = function() {
                                window.requestAnimationFrame((function() {
                                    a.updateStatus(),
                                    a.reqestAnimation()
                                }
                                ))
                            }
                            ,
                            a.updateStatus = function() {
                                var e = a.state.position;
                                Array.from(navigator.getGamepads()).forEach((function(t) {
                                    t && (Array.from(t.axes.entries()).forEach((function(t) {
                                        var a = Object(N.a)(t, 2)
                                          , i = a[0]
                                          , n = a[1];
                                        switch (i) {
                                        case 0:
                                            e.x += n;
                                            break;
                                        case 1:
                                            e.y += n
                                        }
                                    }
                                    )),
                                    Array.from(t.buttons.entries()).forEach((function(t) {
                                        var a = Object(N.a)(t, 2)
                                          , i = a[0]
                                          , n = a[1];
                                        if (n.pressed || n.touched)
                                            switch (i) {
                                            case 4:
                                                e.x = 50,
                                                e.y = 50
                                            }
                                    }
                                    )))
                                }
                                )),
                                a.setState({
                                    position: e
                                })
                            }
                            ,
                            a.state = {
                                status: "Not connected",
                                position: {
                                    x: 50,
                                    y: 50
                                }
                            },
                            a
                        }
                        return Object(h.a)(t, e),
                        Object(r.a)(t, [{
                            key: "render",
                            value: function() {
                                return n.a.createElement(nt, null, n.a.createElement("h1", null, this.state.status), n.a.createElement("div", {
                                    style: {
                                        width: "10px",
                                        height: "10px",
                                        position: "absolute",
                                        top: "".concat(this.state.position.y, "%"),
                                        left: "".concat(this.state.position.x, "%"),
                                        background: "red"
                                    }
                                }))
                            }
                        }])
                    }(n.a.Component)
                }
            }]
        }]
          , Tn = Object(r.a)((function e() {
            var t = this;
            Object(l.a)(this, e),
            this.init = function() {
                Hn.forEach((function(e) {
                    e.reducers && (t.reducers = Object(k.a)(Object(k.a)({}, t.reducers), e.reducers)),
                    e.views && t.view(e.views, e.base || "")
                }
                ))
            }
            ,
            this.view = function(e, a) {
                e.forEach((function(e) {
                    var i, n, o, s, l = void 0 !== (null === (i = e.route) || void 0 === i ? void 0 : i.parent) ? e.route.parent : a, r = void 0 !== (null === (n = e.route) || void 0 === n ? void 0 : n.path) ? e.route.path : "", c = "/".concat(l, "/").replace(/\/+/g, "/"), p = "/".concat(l, "/").concat(r, "/").replace(/\/+/g, "/"), d = null === (o = e.route) || void 0 === o ? void 0 : o.component, h = null === (s = e.route) || void 0 === s ? void 0 : s.auth;
                    t.views.push({
                        parent: c,
                        path: p,
                        component: d,
                        auth: h,
                        name: e.name || !1,
                        menu: e.menu || {},
                        data: e.data || {}
                    }),
                    e.childs && t.view(e.childs, p)
                }
                ))
            }
            ,
            this.generateRoutes = function() {
                var e = [];
                return t.views.forEach((function(t) {
                    t.component && e.push({
                        path: t.path,
                        component: t.component,
                        auth: t.auth
                    })
                }
                )),
                e
            }
            ,
            this.generateMenu = function(e) {
                var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/";
                return t.menu(e, a)
            }
            ,
            this.menu = function(e, a) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1
                  , n = [];
                return t.views.forEach((function(o) {
                    if (!a || o.parent === a) {
                        var s, l, r = o.name || "";
                        if ((null === (s = o.menu) || void 0 === s ? void 0 : s.type) && o.menu.type.includes(e))
                            n.push({
                                depth: i,
                                link: !!o.component && o.path,
                                name: void 0 !== (null === (l = o.menu) || void 0 === l ? void 0 : l.name) ? o.menu.name : r,
                                data: o.data,
                                childs: o.parent !== o.path ? t.menu(e, o.path, i + 1) : void 0
                            })
                    }
                }
                )),
                n.length ? n : void 0
            }
            ,
            this.reducers = [],
            this.views = [],
            this.init()
        }
        ));
        function Bn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var Wn = function(e) {
            function t() {
                return Object(l.a)(this, t),
                Bn(this, t, arguments)
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    return n.a.createElement(ne, null, n.a.createElement("h1", null, "404"))
                }
            }])
        }(n.a.Component);
        function Nn(e, t, a) {
            return t = Object(d.a)(t),
            Object(c.a)(e, Object(p.a)() ? Reflect.construct(t, a || [], Object(d.a)(e).constructor) : t.apply(e, a))
        }
        var An = function(e) {
            function t() {
                var e;
                Object(l.a)(this, t);
                for (var a = arguments.length, i = new Array(a), o = 0; o < a; o++)
                    i[o] = arguments[o];
                return (e = Nn(this, t, [].concat(i))).element = function(t, a) {
                    return e.auth(a) && !(null === w || void 0 === w ? void 0 : w.user) ? e.redirect(a) : t
                }
                ,
                e.auth = function(e) {
                    var t;
                    return void 0 === e ? !!(null === (t = w.config.auth) || void 0 === t ? void 0 : t.default) : !!e
                }
                ,
                e.redirect = function(e) {
                    var t, a;
                    "string" === typeof e ? t = e : t = (null === (a = w.config.auth) || void 0 === a ? void 0 : a.redirect) || "/";
                    return function() {
                        return n.a.createElement(fe.a, {
                            to: t
                        })
                    }
                }
                ,
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return n.a.createElement(J.a, {
                        basename: window.basepath
                    }, n.a.createElement(fe.d, null, w.routes.map((function(t) {
                        return n.a.createElement(fe.b, {
                            exact: !0,
                            path: t.path,
                            component: e.element(t.component, t.auth),
                            key: t.path
                        })
                    }
                    )), n.a.createElement(fe.b, {
                        exact: !0,
                        path: "*",
                        component: this.element(Wn, void 0)
                    })))
                }
            }])
        }(n.a.Component);
        var Gn = function(e) {
            function t() {
                var e, a, i, n;
                return Object(l.a)(this, t),
                a = this,
                i = t,
                i = Object(d.a)(i),
                (e = Object(c.a)(a, Object(p.a)() ? Reflect.construct(i, n || [], Object(d.a)(a).constructor) : i.apply(a, n))).init = function() {
                    var e = new Tn;
                    w.config = b,
                    w.routes = e.generateRoutes(),
                    y.replaceReducer(Object(u.combineReducers)(e.reducers))
                }
                ,
                e.init(),
                e.state = {
                    view: "loading"
                },
                e
            }
            return Object(h.a)(t, e),
            Object(r.a)(t, [{
                key: "componentDidMount",
                value: function() {
                    var e = this;
                    M.post("status/", {
                        success: function(t) {
                            t.lang ? w.lang = t.lang : w.lang = null,
                            t.translations ? w.translations = t.translations : w.translations = null,
                            t.user ? w.user = t.user : w.user = null,
                            t.permissions ? w.permissions = t.permissions : w.permissions = null,
                            t.dates ? w.dates = t.dates : w.dates = null,
                            e.setState({
                                view: "default"
                            })
                        }
                    })
                }
            }, {
                key: "render",
                value: function() {
                    switch (this.state.view) {
                    case "loading":
                        return n.a.createElement("div", null);
                    default:
                        return n.a.createElement(m.a, {
                            store: y
                        }, n.a.createElement(An, null))
                    }
                }
            }])
        }(n.a.Component);
        a(128);
        s.a.render(n.a.createElement(Gn, null), document.getElementById("app"))
    },
    31: function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        var W_DEV_repo_joniec_kalkulator_web_app_prod_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3), W_DEV_repo_joniec_kalkulator_web_app_prod_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2), _Colors, Colors = Object(W_DEV_repo_joniec_kalkulator_web_app_prod_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__.a)((function e() {
            Object(W_DEV_repo_joniec_kalkulator_web_app_prod_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__.a)(this, e)
        }
        ));
        _Colors = Colors,
        Colors.code = function(color) {
            return eval("0x".concat(color))
        }
        ,
        Colors.hex = function(e) {
            return "#".concat(e)
        }
        ,
        Colors.shades = function(e, t) {
            return [_Colors.darkenLighten(e, -t), e, _Colors.darkenLighten(e, t)]
        }
        ,
        Colors.darkenLighten = function(e, t) {
            var a, i, n;
            "object" === typeof e ? (a = e.r,
            i = e.g,
            n = e.b) : (a = parseInt(e.substring(1, 3), 16),
            i = parseInt(e.substring(3, 5), 16),
            n = parseInt(e.substring(5, 7), 16)),
            a = parseInt(a * (100 + t) / 100, 10),
            i = (i = parseInt(i * (100 + t) / 100, 10)) < 255 ? i : 255,
            n = (n = parseInt(n * (100 + t) / 100, 10)) < 255 ? n : 255;
            var o = 1 === (a = a < 255 ? a : 255).toString(16).length ? "0".concat(a.toString(16)) : a.toString(16)
              , s = 1 === i.toString(16).length ? "0".concat(i.toString(16)) : i.toString(16)
              , l = 1 === n.toString(16).length ? "0".concat(n.toString(16)) : n.toString(16);
            return "#".concat(o).concat(s).concat(l)
        }
        ,
        __webpack_exports__.a = Colors
    },
    72: function(e, t, a) {
        e.exports = a(129)
    },
    75: function(e, t) {},
    86: function(e, t) {}
}, [[72, 1, 2]]]);
//# sourceMappingURL=main.f98c1ea0.chunk.js.map
